
blackpill_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800db60  0800db60  0001db60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e154  0800e154  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e154  0800e154  0001e154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e15c  0800e15c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e15c  0800e15c  0001e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e160  0800e160  0001e160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  200001e0  0800e344  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  0800e344  000212c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f71  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d5  00000000  00000000  0003a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5a5  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c993  00000000  00000000  0005b865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4624  00000000  00000000  000781f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c81c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  0011c86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db48 	.word	0x0800db48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800db48 	.word	0x0800db48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9bf 	b.w	8001038 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b974 	b.w	8001038 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	468e      	mov	lr, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d14d      	bne.n	8000e12 <__udivmoddi4+0xaa>
 8000d76:	428a      	cmp	r2, r1
 8000d78:	4694      	mov	ip, r2
 8000d7a:	d969      	bls.n	8000e50 <__udivmoddi4+0xe8>
 8000d7c:	fab2 f282 	clz	r2, r2
 8000d80:	b152      	cbz	r2, 8000d98 <__udivmoddi4+0x30>
 8000d82:	fa01 f302 	lsl.w	r3, r1, r2
 8000d86:	f1c2 0120 	rsb	r1, r2, #32
 8000d8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d92:	ea41 0e03 	orr.w	lr, r1, r3
 8000d96:	4094      	lsls	r4, r2
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	0c21      	lsrs	r1, r4, #16
 8000d9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000da2:	fa1f f78c 	uxth.w	r7, ip
 8000da6:	fb08 e316 	mls	r3, r8, r6, lr
 8000daa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dae:	fb06 f107 	mul.w	r1, r6, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x64>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dbe:	f080 811f 	bcs.w	8001000 <__udivmoddi4+0x298>
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	f240 811c 	bls.w	8001000 <__udivmoddi4+0x298>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb00 f707 	mul.w	r7, r0, r7
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x92>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dec:	f080 810a 	bcs.w	8001004 <__udivmoddi4+0x29c>
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	f240 8107 	bls.w	8001004 <__udivmoddi4+0x29c>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfe:	1be4      	subs	r4, r4, r7
 8000e00:	2600      	movs	r6, #0
 8000e02:	b11d      	cbz	r5, 8000e0c <__udivmoddi4+0xa4>
 8000e04:	40d4      	lsrs	r4, r2
 8000e06:	2300      	movs	r3, #0
 8000e08:	e9c5 4300 	strd	r4, r3, [r5]
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0xc2>
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	f000 80ef 	beq.w	8000ffa <__udivmoddi4+0x292>
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e22:	4630      	mov	r0, r6
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	fab3 f683 	clz	r6, r3
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d14a      	bne.n	8000ec8 <__udivmoddi4+0x160>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xd4>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 80f9 	bhi.w	800102e <__udivmoddi4+0x2c6>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	469e      	mov	lr, r3
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e0      	beq.n	8000e0c <__udivmoddi4+0xa4>
 8000e4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4e:	e7dd      	b.n	8000e0c <__udivmoddi4+0xa4>
 8000e50:	b902      	cbnz	r2, 8000e54 <__udivmoddi4+0xec>
 8000e52:	deff      	udf	#255	; 0xff
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	f040 8092 	bne.w	8000f82 <__udivmoddi4+0x21a>
 8000e5e:	eba1 010c 	sub.w	r1, r1, ip
 8000e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e66:	fa1f fe8c 	uxth.w	lr, ip
 8000e6a:	2601      	movs	r6, #1
 8000e6c:	0c20      	lsrs	r0, r4, #16
 8000e6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e72:	fb07 1113 	mls	r1, r7, r3, r1
 8000e76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7a:	fb0e f003 	mul.w	r0, lr, r3
 8000e7e:	4288      	cmp	r0, r1
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x12c>
 8000e82:	eb1c 0101 	adds.w	r1, ip, r1
 8000e86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x12a>
 8000e8c:	4288      	cmp	r0, r1
 8000e8e:	f200 80cb 	bhi.w	8001028 <__udivmoddi4+0x2c0>
 8000e92:	4643      	mov	r3, r8
 8000e94:	1a09      	subs	r1, r1, r0
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000ea0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x156>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb4:	d202      	bcs.n	8000ebc <__udivmoddi4+0x154>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f200 80bb 	bhi.w	8001032 <__udivmoddi4+0x2ca>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	eba4 040e 	sub.w	r4, r4, lr
 8000ec2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec6:	e79c      	b.n	8000e02 <__udivmoddi4+0x9a>
 8000ec8:	f1c6 0720 	rsb	r7, r6, #32
 8000ecc:	40b3      	lsls	r3, r6
 8000ece:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eda:	fa01 f306 	lsl.w	r3, r1, r6
 8000ede:	431c      	orrs	r4, r3
 8000ee0:	40f9      	lsrs	r1, r7
 8000ee2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eee:	0c20      	lsrs	r0, r4, #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	fb08 f00e 	mul.w	r0, r8, lr
 8000f00:	4288      	cmp	r0, r1
 8000f02:	fa02 f206 	lsl.w	r2, r2, r6
 8000f06:	d90b      	bls.n	8000f20 <__udivmoddi4+0x1b8>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f10:	f080 8088 	bcs.w	8001024 <__udivmoddi4+0x2bc>
 8000f14:	4288      	cmp	r0, r1
 8000f16:	f240 8085 	bls.w	8001024 <__udivmoddi4+0x2bc>
 8000f1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f28:	fb09 1110 	mls	r1, r9, r0, r1
 8000f2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f34:	458e      	cmp	lr, r1
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x1e2>
 8000f38:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f40:	d26c      	bcs.n	800101c <__udivmoddi4+0x2b4>
 8000f42:	458e      	cmp	lr, r1
 8000f44:	d96a      	bls.n	800101c <__udivmoddi4+0x2b4>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4461      	add	r1, ip
 8000f4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f52:	eba1 010e 	sub.w	r1, r1, lr
 8000f56:	42a1      	cmp	r1, r4
 8000f58:	46c8      	mov	r8, r9
 8000f5a:	46a6      	mov	lr, r4
 8000f5c:	d356      	bcc.n	800100c <__udivmoddi4+0x2a4>
 8000f5e:	d053      	beq.n	8001008 <__udivmoddi4+0x2a0>
 8000f60:	b15d      	cbz	r5, 8000f7a <__udivmoddi4+0x212>
 8000f62:	ebb3 0208 	subs.w	r2, r3, r8
 8000f66:	eb61 010e 	sbc.w	r1, r1, lr
 8000f6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f72:	40f1      	lsrs	r1, r6
 8000f74:	431f      	orrs	r7, r3
 8000f76:	e9c5 7100 	strd	r7, r1, [r5]
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	f1c2 0320 	rsb	r3, r2, #32
 8000f86:	40d8      	lsrs	r0, r3
 8000f88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f90:	4091      	lsls	r1, r2
 8000f92:	4301      	orrs	r1, r0
 8000f94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f98:	fa1f fe8c 	uxth.w	lr, ip
 8000f9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fa0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa4:	0c0b      	lsrs	r3, r1, #16
 8000fa6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000faa:	fb00 f60e 	mul.w	r6, r0, lr
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb4:	d908      	bls.n	8000fc8 <__udivmoddi4+0x260>
 8000fb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fbe:	d22f      	bcs.n	8001020 <__udivmoddi4+0x2b8>
 8000fc0:	429e      	cmp	r6, r3
 8000fc2:	d92d      	bls.n	8001020 <__udivmoddi4+0x2b8>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	1b9b      	subs	r3, r3, r6
 8000fca:	b289      	uxth	r1, r1
 8000fcc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fd0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x28a>
 8000fe0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe8:	d216      	bcs.n	8001018 <__udivmoddi4+0x2b0>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d914      	bls.n	8001018 <__udivmoddi4+0x2b0>
 8000fee:	3e02      	subs	r6, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	1ac9      	subs	r1, r1, r3
 8000ff4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff8:	e738      	b.n	8000e6c <__udivmoddi4+0x104>
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e705      	b.n	8000e0c <__udivmoddi4+0xa4>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e3      	b.n	8000dcc <__udivmoddi4+0x64>
 8001004:	4618      	mov	r0, r3
 8001006:	e6f8      	b.n	8000dfa <__udivmoddi4+0x92>
 8001008:	454b      	cmp	r3, r9
 800100a:	d2a9      	bcs.n	8000f60 <__udivmoddi4+0x1f8>
 800100c:	ebb9 0802 	subs.w	r8, r9, r2
 8001010:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001014:	3801      	subs	r0, #1
 8001016:	e7a3      	b.n	8000f60 <__udivmoddi4+0x1f8>
 8001018:	4646      	mov	r6, r8
 800101a:	e7ea      	b.n	8000ff2 <__udivmoddi4+0x28a>
 800101c:	4620      	mov	r0, r4
 800101e:	e794      	b.n	8000f4a <__udivmoddi4+0x1e2>
 8001020:	4640      	mov	r0, r8
 8001022:	e7d1      	b.n	8000fc8 <__udivmoddi4+0x260>
 8001024:	46d0      	mov	r8, sl
 8001026:	e77b      	b.n	8000f20 <__udivmoddi4+0x1b8>
 8001028:	3b02      	subs	r3, #2
 800102a:	4461      	add	r1, ip
 800102c:	e732      	b.n	8000e94 <__udivmoddi4+0x12c>
 800102e:	4630      	mov	r0, r6
 8001030:	e709      	b.n	8000e46 <__udivmoddi4+0xde>
 8001032:	4464      	add	r4, ip
 8001034:	3802      	subs	r0, #2
 8001036:	e742      	b.n	8000ebe <__udivmoddi4+0x156>

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <Trim_Read>:
		 CalibrationP6, CalibrationP7, CalibrationP8, CalibrationP9,
		 CalibrationH2,  CalibrationH4, CalibrationH5, CalibrationH6;

// Read the Trimming parameters saved in the NVM ROM of the device
void Trim_Read(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af04      	add	r7, sp, #16
	uint8_t TrimTab[32];

	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, TrimTab, 25, 500);
 8001042:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2319      	movs	r3, #25
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	463b      	mov	r3, r7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2288      	movs	r2, #136	; 0x88
 8001054:	21ec      	movs	r1, #236	; 0xec
 8001056:	4857      	ldr	r0, [pc, #348]	; (80011b4 <Trim_Read+0x178>)
 8001058:	f005 fadc 	bl	8006614 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)TrimTab+25, 7, 500);
 800105c:	463b      	mov	r3, r7
 800105e:	3319      	adds	r3, #25
 8001060:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001064:	9202      	str	r2, [sp, #8]
 8001066:	2207      	movs	r2, #7
 8001068:	9201      	str	r2, [sp, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	22e1      	movs	r2, #225	; 0xe1
 8001070:	21ec      	movs	r1, #236	; 0xec
 8001072:	4850      	ldr	r0, [pc, #320]	; (80011b4 <Trim_Read+0x178>)
 8001074:	f005 face 	bl	8006614 <HAL_I2C_Mem_Read>

	CalibrationT1 = (TrimTab[1]<<8) | TrimTab[0];
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	783b      	ldrb	r3, [r7, #0]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <Trim_Read+0x17c>)
 800108a:	801a      	strh	r2, [r3, #0]
	CalibrationT2 = (TrimTab[3]<<8) | TrimTab[2];
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	78bb      	ldrb	r3, [r7, #2]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b48      	ldr	r3, [pc, #288]	; (80011bc <Trim_Read+0x180>)
 800109c:	801a      	strh	r2, [r3, #0]
	CalibrationT3 = (TrimTab[5]<<8) | TrimTab[4];
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <Trim_Read+0x184>)
 80010ae:	801a      	strh	r2, [r3, #0]
	CalibrationP1 = (TrimTab[7]<<8) | TrimTab[5];
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <Trim_Read+0x188>)
 80010c2:	801a      	strh	r2, [r3, #0]
	CalibrationP2 = (TrimTab[9]<<8) | TrimTab[6];
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <Trim_Read+0x18c>)
 80010d4:	801a      	strh	r2, [r3, #0]
	CalibrationP3 = (TrimTab[11]<<8) | TrimTab[10];
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7abb      	ldrb	r3, [r7, #10]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <Trim_Read+0x190>)
 80010e6:	801a      	strh	r2, [r3, #0]
	CalibrationP4 = (TrimTab[13]<<8) | TrimTab[12];
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7b3b      	ldrb	r3, [r7, #12]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <Trim_Read+0x194>)
 80010f8:	801a      	strh	r2, [r3, #0]
	CalibrationP5 = (TrimTab[15]<<8) | TrimTab[14];
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <Trim_Read+0x198>)
 800110a:	801a      	strh	r2, [r3, #0]
	CalibrationP6 = (TrimTab[17]<<8) | TrimTab[16];
 800110c:	7c7b      	ldrb	r3, [r7, #17]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	7c3b      	ldrb	r3, [r7, #16]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <Trim_Read+0x19c>)
 800111c:	801a      	strh	r2, [r3, #0]
	CalibrationP7 = (TrimTab[19]<<8) | TrimTab[18];
 800111e:	7cfb      	ldrb	r3, [r7, #19]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	7cbb      	ldrb	r3, [r7, #18]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <Trim_Read+0x1a0>)
 800112e:	801a      	strh	r2, [r3, #0]
	CalibrationP8 = (TrimTab[21]<<8) | TrimTab[20];
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7d3b      	ldrb	r3, [r7, #20]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <Trim_Read+0x1a4>)
 8001140:	801a      	strh	r2, [r3, #0]
	CalibrationP9 = (TrimTab[23]<<8) | TrimTab[22];
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <Trim_Read+0x1a8>)
 8001152:	801a      	strh	r2, [r3, #0]
	CalibrationH1 = TrimTab[24];
 8001154:	7e3b      	ldrb	r3, [r7, #24]
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <Trim_Read+0x1ac>)
 800115a:	801a      	strh	r2, [r3, #0]
	CalibrationH2 = (TrimTab[26]<<8) | TrimTab[25];
 800115c:	7ebb      	ldrb	r3, [r7, #26]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	7e7b      	ldrb	r3, [r7, #25]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <Trim_Read+0x1b0>)
 800116c:	801a      	strh	r2, [r3, #0]
	CalibrationH3 = (TrimTab[27]);
 800116e:	7efb      	ldrb	r3, [r7, #27]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Trim_Read+0x1b4>)
 8001174:	801a      	strh	r2, [r3, #0]
	CalibrationH4 = (TrimTab[28]<<4) | (TrimTab[29] & 0x0f);
 8001176:	7f3b      	ldrb	r3, [r7, #28]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b21a      	sxth	r2, r3
 800117c:	7f7b      	ldrb	r3, [r7, #29]
 800117e:	b21b      	sxth	r3, r3
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <Trim_Read+0x1b8>)
 800118c:	801a      	strh	r2, [r3, #0]
	CalibrationH5 = (TrimTab[30]<<4) | (TrimTab[29]>>4);
 800118e:	7fbb      	ldrb	r3, [r7, #30]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b21a      	sxth	r2, r3
 8001194:	7f7b      	ldrb	r3, [r7, #29]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <Trim_Read+0x1bc>)
 80011a2:	801a      	strh	r2, [r3, #0]
	CalibrationH6 = (TrimTab[31]);
 80011a4:	7ffb      	ldrb	r3, [r7, #31]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <Trim_Read+0x1c0>)
 80011aa:	801a      	strh	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000ffc 	.word	0x20000ffc
 80011b8:	2000020a 	.word	0x2000020a
 80011bc:	20000212 	.word	0x20000212
 80011c0:	20000214 	.word	0x20000214
 80011c4:	2000020c 	.word	0x2000020c
 80011c8:	20000216 	.word	0x20000216
 80011cc:	20000218 	.word	0x20000218
 80011d0:	2000021a 	.word	0x2000021a
 80011d4:	2000021c 	.word	0x2000021c
 80011d8:	2000021e 	.word	0x2000021e
 80011dc:	20000220 	.word	0x20000220
 80011e0:	20000222 	.word	0x20000222
 80011e4:	20000224 	.word	0x20000224
 80011e8:	2000020e 	.word	0x2000020e
 80011ec:	20000226 	.word	0x20000226
 80011f0:	20000210 	.word	0x20000210
 80011f4:	20000228 	.word	0x20000228
 80011f8:	2000022a 	.word	0x2000022a
 80011fc:	2000022c 	.word	0x2000022c

08001200 <BME280_Config>:

// Function to configure BME280 sensor
int BME280_Config (uint8_t tempOversampling, uint8_t pressureOversampling, uint8_t humidityOversampling, uint8_t filter)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af04      	add	r7, sp, #16
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	4603      	mov	r3, r0
 8001214:	71bb      	strb	r3, [r7, #6]
 8001216:	460b      	mov	r3, r1
 8001218:	717b      	strb	r3, [r7, #5]
 800121a:	4613      	mov	r3, r2
 800121c:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	Trim_Read();
 800121e:	f7ff ff0d 	bl	800103c <Trim_Read>

	// Define local variables for the data to be written and the data checked
	uint8_t dataToWrite = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
	uint8_t dataCheck = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	dataToWrite = 0xB6;  // reset sequence
 800122a:	23b6      	movs	r3, #182	; 0xb6
 800122c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &dataToWrite, 1, 1000) != HAL_OK)
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f107 030f 	add.w	r3, r7, #15
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	22e0      	movs	r2, #224	; 0xe0
 8001242:	21ec      	movs	r1, #236	; 0xec
 8001244:	4854      	ldr	r0, [pc, #336]	; (8001398 <BME280_Config+0x198>)
 8001246:	f005 f8eb 	bl	8006420 <HAL_I2C_Mem_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <BME280_Config+0x56>
	{
		return -1; // return error if writing to I2C bus failed
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	e09c      	b.n	8001390 <BME280_Config+0x190>
	}
	HAL_Delay (100); // Delay required for stable operation after reset
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f003 fcd6 	bl	8004c08 <HAL_Delay>

	// Write the humidity oversampling to 0xF2 register
	dataToWrite = humidityOversampling;
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &dataToWrite, 1, 1000) != HAL_OK)
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	2301      	movs	r3, #1
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	f107 030f 	add.w	r3, r7, #15
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	22f2      	movs	r2, #242	; 0xf2
 8001274:	21ec      	movs	r1, #236	; 0xec
 8001276:	4848      	ldr	r0, [pc, #288]	; (8001398 <BME280_Config+0x198>)
 8001278:	f005 f8d2 	bl	8006420 <HAL_I2C_Mem_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <BME280_Config+0x88>
	{
		return -1; // return error if writing to I2C bus failed
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e083      	b.n	8001390 <BME280_Config+0x190>
	}
	HAL_Delay (100); // Delay to ensure the write is completed
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f003 fcbd 	bl	8004c08 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &dataCheck, 1, 1000); // Read the value back to check if write was successful
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	2301      	movs	r3, #1
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	f107 030e 	add.w	r3, r7, #14
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	22f2      	movs	r2, #242	; 0xf2
 80012a2:	21ec      	movs	r1, #236	; 0xec
 80012a4:	483c      	ldr	r0, [pc, #240]	; (8001398 <BME280_Config+0x198>)
 80012a6:	f005 f9b5 	bl	8006614 <HAL_I2C_Mem_Read>
	if (dataCheck != dataToWrite)
 80012aa:	7bba      	ldrb	r2, [r7, #14]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d002      	beq.n	80012b8 <BME280_Config+0xb8>
	{
		return -1; // return error if the read data does not match the written data
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e06b      	b.n	8001390 <BME280_Config+0x190>
	}

	// Write the IIR filter coeff to 0xF5 register
	dataToWrite = (filter << 2);
 80012b8:	793b      	ldrb	r3, [r7, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &dataToWrite, 1, 1000) != HAL_OK)
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	22f5      	movs	r2, #245	; 0xf5
 80012d4:	21ec      	movs	r1, #236	; 0xec
 80012d6:	4830      	ldr	r0, [pc, #192]	; (8001398 <BME280_Config+0x198>)
 80012d8:	f005 f8a2 	bl	8006420 <HAL_I2C_Mem_Write>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <BME280_Config+0xe8>
	{
		return -1; // return error if writing to I2C bus failed
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e053      	b.n	8001390 <BME280_Config+0x190>
	}
	HAL_Delay (100); // Delay to ensure the write is completed
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f003 fc8d 	bl	8004c08 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &dataCheck, 1, 1000); // Read the value back to check if write was successful
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f107 030e 	add.w	r3, r7, #14
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	22f5      	movs	r2, #245	; 0xf5
 8001302:	21ec      	movs	r1, #236	; 0xec
 8001304:	4824      	ldr	r0, [pc, #144]	; (8001398 <BME280_Config+0x198>)
 8001306:	f005 f985 	bl	8006614 <HAL_I2C_Mem_Read>
	if (dataCheck != dataToWrite)
 800130a:	7bba      	ldrb	r2, [r7, #14]
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	429a      	cmp	r2, r3
 8001310:	d002      	beq.n	8001318 <BME280_Config+0x118>
	{
		return -1; // return error if the read data does not match the written data
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e03b      	b.n	8001390 <BME280_Config+0x190>
	}

	// Write the pressure and temperature oversampling along with mode to 0xF4 register
	dataToWrite = (tempOversampling << 5) | (pressureOversampling << 2) | MODE_FORCED;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	b25a      	sxtb	r2, r3
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	b25b      	sxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MSG_REG, 1, &dataToWrite, 1, 1000) != HAL_OK)
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030f 	add.w	r3, r7, #15
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	22f4      	movs	r2, #244	; 0xf4
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	4813      	ldr	r0, [pc, #76]	; (8001398 <BME280_Config+0x198>)
 800134a:	f005 f869 	bl	8006420 <HAL_I2C_Mem_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <BME280_Config+0x15a>
	{
		return -1; // return error if writing to I2C bus failed
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e01a      	b.n	8001390 <BME280_Config+0x190>
	}
	HAL_Delay (100); // Delay to ensure the write is completed
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f003 fc54 	bl	8004c08 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MSG_REG, 1, &dataCheck, 1, 1000); // Read the value back to check if write was successful
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030e 	add.w	r3, r7, #14
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	22f4      	movs	r2, #244	; 0xf4
 8001374:	21ec      	movs	r1, #236	; 0xec
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <BME280_Config+0x198>)
 8001378:	f005 f94c 	bl	8006614 <HAL_I2C_Mem_Read>
	if (dataCheck != dataToWrite - 1)
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	461a      	mov	r2, r3
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3b01      	subs	r3, #1
 8001384:	429a      	cmp	r2, r3
 8001386:	d002      	beq.n	800138e <BME280_Config+0x18e>
	{
		return -1; // return error if the read data does not match the written data
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e000      	b.n	8001390 <BME280_Config+0x190>
	}

	return 0; // return 0 for successful configuration
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	20000ffc 	.word	0x20000ffc

0800139c <BMESensorRead>:

// Read raw data from BME sensor
int BMESensorRead(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
	uint8_t rawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <BMESensorRead+0x8c>)
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	22d0      	movs	r2, #208	; 0xd0
 80013b4:	21ec      	movs	r1, #236	; 0xec
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <BMESensorRead+0x90>)
 80013b8:	f005 f92c 	bl	8006614 <HAL_I2C_Mem_Read>

	// Check if the read chip ID is correct
	if (chipID == 0x60)
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <BMESensorRead+0x8c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b60      	cmp	r3, #96	; 0x60
 80013c2:	d12a      	bne.n	800141a <BMESensorRead+0x7e>
	{
		// Read registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, rawData, 8, 500);
 80013c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2308      	movs	r3, #8
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	463b      	mov	r3, r7
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	22f7      	movs	r2, #247	; 0xf7
 80013d6:	21ec      	movs	r1, #236	; 0xec
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <BMESensorRead+0x90>)
 80013da:	f005 f91b 	bl	8006614 <HAL_I2C_Mem_Read>

		/* Calculate raw data for the parameters.
		 * Pressure and Temperature are in 20 bit format and Humidity in 16 bit format.
		 */
		rawPressure = (rawData[0]<<12)|(rawData[1]<<4)|(rawData[2]>>4);
 80013de:	783b      	ldrb	r3, [r7, #0]
 80013e0:	031a      	lsls	r2, r3, #12
 80013e2:	787b      	ldrb	r3, [r7, #1]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4313      	orrs	r3, r2
 80013e8:	78ba      	ldrb	r2, [r7, #2]
 80013ea:	0912      	lsrs	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	4313      	orrs	r3, r2
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <BMESensorRead+0x94>)
 80013f2:	6013      	str	r3, [r2, #0]
		rawTemperature = (rawData[3]<<12)|(rawData[4]<<4)|(rawData[5]>>4);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	031a      	lsls	r2, r3, #12
 80013f8:	793b      	ldrb	r3, [r7, #4]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4313      	orrs	r3, r2
 80013fe:	797a      	ldrb	r2, [r7, #5]
 8001400:	0912      	lsrs	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	4313      	orrs	r3, r2
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <BMESensorRead+0x98>)
 8001408:	6013      	str	r3, [r2, #0]
		rawHumidity = (rawData[6]<<8)|(rawData[7]);
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	4313      	orrs	r3, r2
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <BMESensorRead+0x9c>)
 8001414:	6013      	str	r3, [r2, #0]

		return 0;  // Success
 8001416:	2300      	movs	r3, #0
 8001418:	e001      	b.n	800141e <BMESensorRead+0x82>
	}

	else return -1;  // Failure
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000208 	.word	0x20000208
 800142c:	20000ffc 	.word	0x20000ffc
 8001430:	20000200 	.word	0x20000200
 8001434:	200001fc 	.word	0x200001fc
 8001438:	20000204 	.word	0x20000204

0800143c <BME280_WakeUP>:

// Wake up BME280 sensor from sleep mode
void BME280_WakeUP(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af04      	add	r7, sp, #16
	uint8_t controlData = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]

	// First, read the control measure register
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MSG_REG, 1, &controlData, 1, 1000);
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	22f4      	movs	r2, #244	; 0xf4
 8001458:	21ec      	movs	r1, #236	; 0xec
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <BME280_WakeUP+0x58>)
 800145c:	f005 f8da 	bl	8006614 <HAL_I2C_Mem_Read>

	// Modify the data with the forced mode
	controlData = controlData | MODE_FORCED;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	71fb      	strb	r3, [r7, #7]

	// Write the new data to the control measure register
	HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MSG_REG, 1, &controlData, 1, 1000);
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	22f4      	movs	r2, #244	; 0xf4
 800147c:	21ec      	movs	r1, #236	; 0xec
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <BME280_WakeUP+0x58>)
 8001480:	f004 ffce 	bl	8006420 <HAL_I2C_Mem_Write>

	HAL_Delay (100);  // Short delay for changes to take effect
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f003 fbbf 	bl	8004c08 <HAL_Delay>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000ffc 	.word	0x20000ffc

08001498 <BME280_compensateTemperature>:
// Global variable for storing fine temperature
int32_t temperatureFine;

// Compensate temperature
int32_t BME280_compensateTemperature(int32_t rawTemp)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	int32_t intermediateTemp1, intermediateTemp2, compensatedTemp;

	intermediateTemp1 = ((((rawTemp>>3) - ((int32_t)CalibrationT1<<1))) * ((int32_t)CalibrationT2)) >> 11;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	10da      	asrs	r2, r3, #3
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <BME280_compensateTemperature+0x7c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <BME280_compensateTemperature+0x80>)
 80014ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	12db      	asrs	r3, r3, #11
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t rawTempShifted = rawTemp >> 4;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	111b      	asrs	r3, r3, #4
 80014be:	623b      	str	r3, [r7, #32]
	int32_t calibDiff = rawTempShifted - ((int32_t)CalibrationT1);
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <BME280_compensateTemperature+0x7c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	61fb      	str	r3, [r7, #28]
	int32_t calibDiffSquared = (calibDiff * calibDiff) >> 12;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	fb03 f303 	mul.w	r3, r3, r3
 80014d2:	131b      	asrs	r3, r3, #12
 80014d4:	61bb      	str	r3, [r7, #24]
	int32_t calibProduct = calibDiffSquared * ((int32_t)CalibrationT3);
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <BME280_compensateTemperature+0x84>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	461a      	mov	r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
	intermediateTemp2 = calibProduct >> 14;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	139b      	asrs	r3, r3, #14
 80014ea:	613b      	str	r3, [r7, #16]

	temperatureFine = intermediateTemp1 + intermediateTemp2;
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <BME280_compensateTemperature+0x88>)
 80014f4:	6013      	str	r3, [r2, #0]

	compensatedTemp = (temperatureFine * 5 + 128) >> 8;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <BME280_compensateTemperature+0x88>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3380      	adds	r3, #128	; 0x80
 8001502:	121b      	asrs	r3, r3, #8
 8001504:	60fb      	str	r3, [r7, #12]
	return compensatedTemp;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	2000020a 	.word	0x2000020a
 8001518:	20000212 	.word	0x20000212
 800151c:	20000214 	.word	0x20000214
 8001520:	20000230 	.word	0x20000230

08001524 <BME280_compensatePressure>:

// Compensate pressure
uint32_t BME280_compensatePressure(int32_t rawPressure)
{
 8001524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001528:	b0ca      	sub	sp, #296	; 0x128
 800152a:	af00      	add	r7, sp, #0
 800152c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t intermediatePressure1, intermediatePressure2, compensatedPressure;

	intermediatePressure1 = ((int64_t)temperatureFine) - 128000;
 8001530:	4baf      	ldr	r3, [pc, #700]	; (80017f0 <BME280_compensatePressure+0x2cc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	17da      	asrs	r2, r3, #31
 8001536:	461c      	mov	r4, r3
 8001538:	4615      	mov	r5, r2
 800153a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800153e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001542:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	intermediatePressure2 = intermediatePressure1 * intermediatePressure1 * (int64_t)CalibrationP6;
 8001546:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800154a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154e:	fb03 f102 	mul.w	r1, r3, r2
 8001552:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001556:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	18ca      	adds	r2, r1, r3
 8001560:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001564:	fba3 8903 	umull	r8, r9, r3, r3
 8001568:	eb02 0309 	add.w	r3, r2, r9
 800156c:	4699      	mov	r9, r3
 800156e:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <BME280_compensatePressure+0x2d0>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b21b      	sxth	r3, r3
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800157c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001580:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001584:	4603      	mov	r3, r0
 8001586:	fb03 f209 	mul.w	r2, r3, r9
 800158a:	460b      	mov	r3, r1
 800158c:	fb08 f303 	mul.w	r3, r8, r3
 8001590:	4413      	add	r3, r2
 8001592:	4602      	mov	r2, r0
 8001594:	fba8 1202 	umull	r1, r2, r8, r2
 8001598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800159c:	460a      	mov	r2, r1
 800159e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015a6:	4413      	add	r3, r2
 80015a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015ac:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	intermediatePressure2 = intermediatePressure2 + ((intermediatePressure1*(int64_t)CalibrationP5)<<17);
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <BME280_compensatePressure+0x2d4>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	17da      	asrs	r2, r3, #31
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015c6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ce:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015d2:	462a      	mov	r2, r5
 80015d4:	fb02 f203 	mul.w	r2, r2, r3
 80015d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015dc:	4621      	mov	r1, r4
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	441a      	add	r2, r3
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e8:	4621      	mov	r1, r4
 80015ea:	fba3 1301 	umull	r1, r3, r3, r1
 80015ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015f2:	460b      	mov	r3, r1
 80015f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800160e:	462b      	mov	r3, r5
 8001610:	0459      	lsls	r1, r3, #17
 8001612:	4623      	mov	r3, r4
 8001614:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001618:	4623      	mov	r3, r4
 800161a:	0458      	lsls	r0, r3, #17
 800161c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001620:	1814      	adds	r4, r2, r0
 8001622:	643c      	str	r4, [r7, #64]	; 0x40
 8001624:	414b      	adcs	r3, r1
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
 8001628:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	intermediatePressure2 = intermediatePressure2 + (((int64_t)CalibrationP4)<<35);
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <BME280_compensatePressure+0x2d8>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800163e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800164e:	00d9      	lsls	r1, r3, #3
 8001650:	2000      	movs	r0, #0
 8001652:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001656:	1814      	adds	r4, r2, r0
 8001658:	63bc      	str	r4, [r7, #56]	; 0x38
 800165a:	414b      	adcs	r3, r1
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800165e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001662:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	intermediatePressure1 = ((intermediatePressure1 * intermediatePressure1 * (int64_t)CalibrationP3)>>8) +
 8001666:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800166a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800166e:	fb03 f102 	mul.w	r1, r3, r2
 8001672:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001676:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	18ca      	adds	r2, r1, r3
 8001680:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001684:	fba3 1303 	umull	r1, r3, r3, r3
 8001688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800168c:	460b      	mov	r3, r1
 800168e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001696:	18d3      	adds	r3, r2, r3
 8001698:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <BME280_compensatePressure+0x2dc>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ae:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016b2:	462b      	mov	r3, r5
 80016b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016b8:	4642      	mov	r2, r8
 80016ba:	fb02 f203 	mul.w	r2, r2, r3
 80016be:	464b      	mov	r3, r9
 80016c0:	4621      	mov	r1, r4
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	4641      	mov	r1, r8
 80016cc:	fba2 1201 	umull	r1, r2, r2, r1
 80016d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016d4:	460a      	mov	r2, r1
 80016d6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016de:	4413      	add	r3, r2
 80016e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016f0:	4623      	mov	r3, r4
 80016f2:	0a18      	lsrs	r0, r3, #8
 80016f4:	462b      	mov	r3, r5
 80016f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016fa:	462b      	mov	r3, r5
 80016fc:	1219      	asrs	r1, r3, #8
			((intermediatePressure1 * (int64_t)CalibrationP2)<<12);
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <BME280_compensatePressure+0x2e0>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	b21b      	sxth	r3, r3
 8001706:	17da      	asrs	r2, r3, #31
 8001708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800170c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001714:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001718:	464a      	mov	r2, r9
 800171a:	fb02 f203 	mul.w	r2, r2, r3
 800171e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001722:	4644      	mov	r4, r8
 8001724:	fb04 f303 	mul.w	r3, r4, r3
 8001728:	441a      	add	r2, r3
 800172a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172e:	4644      	mov	r4, r8
 8001730:	fba3 4304 	umull	r4, r3, r3, r4
 8001734:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001738:	4623      	mov	r3, r4
 800173a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800173e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001754:	464c      	mov	r4, r9
 8001756:	0323      	lsls	r3, r4, #12
 8001758:	4644      	mov	r4, r8
 800175a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800175e:	4644      	mov	r4, r8
 8001760:	0322      	lsls	r2, r4, #12
	intermediatePressure1 = ((intermediatePressure1 * intermediatePressure1 * (int64_t)CalibrationP3)>>8) +
 8001762:	1884      	adds	r4, r0, r2
 8001764:	633c      	str	r4, [r7, #48]	; 0x30
 8001766:	eb41 0303 	adc.w	r3, r1, r3
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
 800176c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001770:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	intermediatePressure1 = (((((int64_t)1)<<47)+intermediatePressure1))*((int64_t)CalibrationP1)>>33;
 8001774:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001778:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800177c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001780:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <BME280_compensatePressure+0x2e4>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001794:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001798:	462b      	mov	r3, r5
 800179a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800179e:	4642      	mov	r2, r8
 80017a0:	fb02 f203 	mul.w	r2, r2, r3
 80017a4:	464b      	mov	r3, r9
 80017a6:	4621      	mov	r1, r4
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	4622      	mov	r2, r4
 80017b0:	4641      	mov	r1, r8
 80017b2:	fba2 1201 	umull	r1, r2, r2, r1
 80017b6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017ba:	460a      	mov	r2, r1
 80017bc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017c4:	4413      	add	r3, r2
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017d6:	4629      	mov	r1, r5
 80017d8:	104a      	asrs	r2, r1, #1
 80017da:	4629      	mov	r1, r5
 80017dc:	17cb      	asrs	r3, r1, #31
 80017de:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	// Avoid exception caused by division by zero
	if (intermediatePressure1 == 0)
 80017e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017e6:	4313      	orrs	r3, r2
 80017e8:	d110      	bne.n	800180c <BME280_compensatePressure+0x2e8>
	{
		return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e154      	b.n	8001a98 <BME280_compensatePressure+0x574>
 80017ee:	bf00      	nop
 80017f0:	20000230 	.word	0x20000230
 80017f4:	2000021e 	.word	0x2000021e
 80017f8:	2000021c 	.word	0x2000021c
 80017fc:	2000021a 	.word	0x2000021a
 8001800:	20000218 	.word	0x20000218
 8001804:	20000216 	.word	0x20000216
 8001808:	2000020c 	.word	0x2000020c
	}

	compensatedPressure = 1048576 - rawPressure;
 800180c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001810:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800181a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800181e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	compensatedPressure = (((compensatedPressure<<31) - intermediatePressure2) * 3125) / intermediatePressure1;
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001826:	105b      	asrs	r3, r3, #1
 8001828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800182c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001830:	07db      	lsls	r3, r3, #31
 8001832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001836:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800183a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800183e:	4621      	mov	r1, r4
 8001840:	1a89      	subs	r1, r1, r2
 8001842:	67b9      	str	r1, [r7, #120]	; 0x78
 8001844:	4629      	mov	r1, r5
 8001846:	eb61 0303 	sbc.w	r3, r1, r3
 800184a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800184c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001850:	4622      	mov	r2, r4
 8001852:	462b      	mov	r3, r5
 8001854:	1891      	adds	r1, r2, r2
 8001856:	6239      	str	r1, [r7, #32]
 8001858:	415b      	adcs	r3, r3
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001860:	4621      	mov	r1, r4
 8001862:	1851      	adds	r1, r2, r1
 8001864:	61b9      	str	r1, [r7, #24]
 8001866:	4629      	mov	r1, r5
 8001868:	414b      	adcs	r3, r1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001878:	4649      	mov	r1, r9
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4641      	mov	r1, r8
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4641      	mov	r1, r8
 8001888:	1889      	adds	r1, r1, r2
 800188a:	6139      	str	r1, [r7, #16]
 800188c:	4649      	mov	r1, r9
 800188e:	eb43 0101 	adc.w	r1, r3, r1
 8001892:	6179      	str	r1, [r7, #20]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a0:	4649      	mov	r1, r9
 80018a2:	008b      	lsls	r3, r1, #2
 80018a4:	4641      	mov	r1, r8
 80018a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018aa:	4641      	mov	r1, r8
 80018ac:	008a      	lsls	r2, r1, #2
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	4622      	mov	r2, r4
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	460b      	mov	r3, r1
 80018bc:	462a      	mov	r2, r5
 80018be:	eb42 0303 	adc.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d0:	4649      	mov	r1, r9
 80018d2:	008b      	lsls	r3, r1, #2
 80018d4:	4641      	mov	r1, r8
 80018d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018da:	4641      	mov	r1, r8
 80018dc:	008a      	lsls	r2, r1, #2
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	4622      	mov	r2, r4
 80018e6:	189b      	adds	r3, r3, r2
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
 80018ea:	462b      	mov	r3, r5
 80018ec:	460a      	mov	r2, r1
 80018ee:	eb42 0303 	adc.w	r3, r2, r3
 80018f2:	677b      	str	r3, [r7, #116]	; 0x74
 80018f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018fc:	f7ff f9cc 	bl	8000c98 <__aeabi_ldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	intermediatePressure1 = (((int64_t)CalibrationP9) * (compensatedPressure>>13) * (compensatedPressure>>13)) >> 25;
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <BME280_compensatePressure+0x580>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b21b      	sxth	r3, r3
 8001910:	17da      	asrs	r2, r3, #31
 8001912:	66bb      	str	r3, [r7, #104]	; 0x68
 8001914:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001916:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	0b50      	lsrs	r0, r2, #13
 8001924:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001928:	1359      	asrs	r1, r3, #13
 800192a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800192e:	462b      	mov	r3, r5
 8001930:	fb00 f203 	mul.w	r2, r0, r3
 8001934:	4623      	mov	r3, r4
 8001936:	fb03 f301 	mul.w	r3, r3, r1
 800193a:	4413      	add	r3, r2
 800193c:	4622      	mov	r2, r4
 800193e:	fba2 1200 	umull	r1, r2, r2, r0
 8001942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001946:	460a      	mov	r2, r1
 8001948:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800194c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001950:	4413      	add	r3, r2
 8001952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800198c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019a2:	4621      	mov	r1, r4
 80019a4:	0e4a      	lsrs	r2, r1, #25
 80019a6:	4629      	mov	r1, r5
 80019a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ac:	4629      	mov	r1, r5
 80019ae:	164b      	asrs	r3, r1, #25
 80019b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	intermediatePressure2 = (((int64_t)CalibrationP8) * compensatedPressure) >> 19;
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <BME280_compensatePressure+0x584>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	17da      	asrs	r2, r3, #31
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
 80019c0:	667a      	str	r2, [r7, #100]	; 0x64
 80019c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019ca:	462a      	mov	r2, r5
 80019cc:	fb02 f203 	mul.w	r2, r2, r3
 80019d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d4:	4621      	mov	r1, r4
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019e0:	4621      	mov	r1, r4
 80019e2:	fba2 1201 	umull	r1, r2, r2, r1
 80019e6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019ea:	460a      	mov	r2, r1
 80019ec:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019f4:	4413      	add	r3, r2
 80019f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a06:	4621      	mov	r1, r4
 8001a08:	0cca      	lsrs	r2, r1, #19
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a10:	4629      	mov	r1, r5
 8001a12:	14cb      	asrs	r3, r1, #19
 8001a14:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	compensatedPressure = ((compensatedPressure + intermediatePressure1 + intermediatePressure2) >> 8)
 8001a18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a20:	1884      	adds	r4, r0, r2
 8001a22:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a24:	eb41 0303 	adc.w	r3, r1, r3
 8001a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a2e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a32:	4621      	mov	r1, r4
 8001a34:	1889      	adds	r1, r1, r2
 8001a36:	6539      	str	r1, [r7, #80]	; 0x50
 8001a38:	4629      	mov	r1, r5
 8001a3a:	eb43 0101 	adc.w	r1, r3, r1
 8001a3e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	0a18      	lsrs	r0, r3, #8
 8001a50:	462b      	mov	r3, r5
 8001a52:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a56:	462b      	mov	r3, r5
 8001a58:	1219      	asrs	r1, r3, #8
			+ (((int64_t)CalibrationP7)<<4);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <BME280_compensatePressure+0x588>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	17da      	asrs	r2, r3, #31
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a74:	464c      	mov	r4, r9
 8001a76:	0123      	lsls	r3, r4, #4
 8001a78:	4644      	mov	r4, r8
 8001a7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a7e:	4644      	mov	r4, r8
 8001a80:	0122      	lsls	r2, r4, #4
	compensatedPressure = ((compensatedPressure + intermediatePressure1 + intermediatePressure2) >> 8)
 8001a82:	1884      	adds	r4, r0, r2
 8001a84:	603c      	str	r4, [r7, #0]
 8001a86:	eb41 0303 	adc.w	r3, r1, r3
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a90:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (uint32_t)compensatedPressure;
 8001a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa4:	20000224 	.word	0x20000224
 8001aa8:	20000222 	.word	0x20000222
 8001aac:	20000220 	.word	0x20000220

08001ab0 <BME280_compensateHumidity>:

// Compensate humidity
uint32_t BME280_compensateHumidity(int32_t rawHumidity)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	; 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	int32_t intermediateHumidity;

	intermediateHumidity = (temperatureFine - ((int32_t)76800));
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <BME280_compensateHumidity+0xe4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t tempHumid = temperatureFine - (int32_t)76800;
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <BME280_compensateHumidity+0xe4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001aca:	623b      	str	r3, [r7, #32]
	int32_t calc1 = (rawHumidity << 14) - (((int32_t)CalibrationH4) << 20) - (((int32_t)CalibrationH5) * tempHumid);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	039a      	lsls	r2, r3, #14
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <BME280_compensateHumidity+0xe8>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	051b      	lsls	r3, r3, #20
 8001ad8:	1ad2      	subs	r2, r2, r3
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <BME280_compensateHumidity+0xec>)
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	61fb      	str	r3, [r7, #28]
	calc1 = (calc1 + (int32_t)16384) >> 15;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001af2:	13db      	asrs	r3, r3, #15
 8001af4:	61fb      	str	r3, [r7, #28]
	int32_t calc2 = (tempHumid * ((int32_t)CalibrationH6)) >> 10;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <BME280_compensateHumidity+0xf0>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	129b      	asrs	r3, r3, #10
 8001b06:	61bb      	str	r3, [r7, #24]
	int32_t calc3 = ((tempHumid * ((int32_t)CalibrationH3)) >> 11) + ((int32_t)32768);
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <BME280_compensateHumidity+0xf4>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	12db      	asrs	r3, r3, #11
 8001b16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b1a:	617b      	str	r3, [r7, #20]
	int32_t calc4 = (((calc2 * calc3) >> 10) + ((int32_t)2097152)) * ((int32_t)CalibrationH2) + 8192;
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	129b      	asrs	r3, r3, #10
 8001b26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <BME280_compensateHumidity+0xf8>)
 8001b2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b38:	613b      	str	r3, [r7, #16]
	calc4 = calc4 >> 14;
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	139b      	asrs	r3, r3, #14
 8001b3e:	613b      	str	r3, [r7, #16]
	intermediateHumidity = calc1 * calc4;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t calc5 = ((intermediateHumidity >> 15) * (intermediateHumidity >> 15)) >> 7;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	13db      	asrs	r3, r3, #15
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	13d2      	asrs	r2, r2, #15
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	11db      	asrs	r3, r3, #7
 8001b58:	60fb      	str	r3, [r7, #12]
	intermediateHumidity -= calc5 * ((int32_t)CalibrationH1) >> 4;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <BME280_compensateHumidity+0xfc>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	111b      	asrs	r3, r3, #4
 8001b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

	intermediateHumidity = (intermediateHumidity < 0 ? 0 : intermediateHumidity);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
	intermediateHumidity = (intermediateHumidity > 419430400 ? 419430400 : intermediateHumidity);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b7c:	bfa8      	it	ge
 8001b7e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t)(intermediateHumidity>>12);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	131b      	asrs	r3, r3, #12
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	372c      	adds	r7, #44	; 0x2c
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000230 	.word	0x20000230
 8001b98:	20000228 	.word	0x20000228
 8001b9c:	2000022a 	.word	0x2000022a
 8001ba0:	2000022c 	.word	0x2000022c
 8001ba4:	20000210 	.word	0x20000210
 8001ba8:	20000226 	.word	0x20000226
 8001bac:	2000020e 	.word	0x2000020e

08001bb0 <BME280_Measure>:

//measure the temp, pressure and humidity
void BME280_Measure (void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af04      	add	r7, sp, #16
	if (BMESensorRead() == 0)
 8001bb6:	f7ff fbf1 	bl	800139c <BMESensorRead>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d163      	bne.n	8001c88 <BME280_Measure+0xd8>
	{
		  if(rawTemperature == 0x800000)
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <BME280_Measure+0x17c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bc8:	d104      	bne.n	8001bd4 <BME280_Measure+0x24>
		  {
			   Temperature = 0; // value in case temp measurement was disabled
 8001bca:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <BME280_Measure+0x180>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e016      	b.n	8001c02 <BME280_Measure+0x52>
		  }
		  else
		  {
			  Temperature = (BME280_compensateTemperature(rawTemperature))/100.0;//compensation of values using trimming data
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <BME280_Measure+0x17c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc5d 	bl	8001498 <BME280_compensateTemperature>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fca7 	bl	8000534 <__aeabi_i2d>
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <BME280_Measure+0x184>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7fe fffe 	bl	8000bf8 <__aeabi_d2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <BME280_Measure+0x180>)
 8001c00:	6013      	str	r3, [r2, #0]
		  }

		  if(rawPressure == 0x800000){
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <BME280_Measure+0x188>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c0a:	d104      	bne.n	8001c16 <BME280_Measure+0x66>
			  Pressure = 0; // value in case temp measurement was disabled
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <BME280_Measure+0x18c>)
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e016      	b.n	8001c44 <BME280_Measure+0x94>
		  }

		  else
		  {
			  Pressure = (BME280_compensatePressure(rawPressure))/256.0;//compensation of values using trimming data
 8001c16:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <BME280_Measure+0x188>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc82 	bl	8001524 <BME280_compensatePressure>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc76 	bl	8000514 <__aeabi_ui2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <BME280_Measure+0x190>)
 8001c2e:	f7fe fe15 	bl	800085c <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ffdd 	bl	8000bf8 <__aeabi_d2f>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a3e      	ldr	r2, [pc, #248]	; (8001d3c <BME280_Measure+0x18c>)
 8001c42:	6013      	str	r3, [r2, #0]
		  }

		  if(rawHumidity == 0x8000){
 8001c44:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <BME280_Measure+0x194>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4c:	d104      	bne.n	8001c58 <BME280_Measure+0xa8>
			  Humidity = 0; // value in case temp measurement was disabled
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <BME280_Measure+0x198>)
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e023      	b.n	8001ca0 <BME280_Measure+0xf0>
		  }
		  else
		  {
			  Humidity = (BME280_compensateHumidity(rawHumidity))/1024.0;//compensation of values using trimming data
 8001c58:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <BME280_Measure+0x194>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff27 	bl	8001ab0 <BME280_compensateHumidity>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc55 	bl	8000514 <__aeabi_ui2d>
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <BME280_Measure+0x19c>)
 8001c70:	f7fe fdf4 	bl	800085c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ffbc 	bl	8000bf8 <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <BME280_Measure+0x198>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <BME280_Measure+0xf0>
		  }
	}
	else
	{
		Temperature = Pressure = Humidity = 0;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <BME280_Measure+0x198>)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <BME280_Measure+0x198>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <BME280_Measure+0x18c>)
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <BME280_Measure+0x18c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <BME280_Measure+0x180>)
 8001c9e:	6013      	str	r3, [r2, #0]
	}

	//convert measured values for UI labels format
	sprintf(str_temp, "%2.1f", Temperature);
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <BME280_Measure+0x180>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc57 	bl	8000558 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4928      	ldr	r1, [pc, #160]	; (8001d50 <BME280_Measure+0x1a0>)
 8001cb0:	4828      	ldr	r0, [pc, #160]	; (8001d54 <BME280_Measure+0x1a4>)
 8001cb2:	f009 fc5d 	bl	800b570 <siprintf>
	sprintf(str_cis, "%4.0f", Pressure/100);
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <BME280_Measure+0x18c>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d58 <BME280_Measure+0x1a8>
 8001cc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cc4:	ee16 0a90 	vmov	r0, s13
 8001cc8:	f7fe fc46 	bl	8000558 <__aeabi_f2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4922      	ldr	r1, [pc, #136]	; (8001d5c <BME280_Measure+0x1ac>)
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <BME280_Measure+0x1b0>)
 8001cd4:	f009 fc4c 	bl	800b570 <siprintf>
	sprintf(str_wil, "%2.1f", Humidity);
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <BME280_Measure+0x198>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <BME280_Measure+0x1a0>)
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <BME280_Measure+0x1b4>)
 8001cea:	f009 fc41 	bl	800b570 <siprintf>
	sprintf(tab_polecenie[5].msg, "%s:W%s:T%s:P%04u:B%04d:D#\r\n",str_wil,str_temp, str_cis, bat_lvl_int, dust);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <BME280_Measure+0x1b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <BME280_Measure+0x1bc>)
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	9202      	str	r2, [sp, #8]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <BME280_Measure+0x1b0>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <BME280_Measure+0x1a4>)
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <BME280_Measure+0x1b4>)
 8001d02:	491b      	ldr	r1, [pc, #108]	; (8001d70 <BME280_Measure+0x1c0>)
 8001d04:	481b      	ldr	r0, [pc, #108]	; (8001d74 <BME280_Measure+0x1c4>)
 8001d06:	f009 fc33 	bl	800b570 <siprintf>
	sprintf(tab_polecenie[4].msg, "AT+CIPSEND=0,%i\r\n",strlen(tab_polecenie[5].msg));//channel
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <BME280_Measure+0x1c4>)
 8001d0c:	f7fe fa68 	bl	80001e0 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4918      	ldr	r1, [pc, #96]	; (8001d78 <BME280_Measure+0x1c8>)
 8001d16:	4819      	ldr	r0, [pc, #100]	; (8001d7c <BME280_Measure+0x1cc>)
 8001d18:	f009 fc2a 	bl	800b570 <siprintf>
	sprintf(tab_polecenie[6].msg,  "AT+CIPCLOSE=0\r\n");//=%dchannel
 8001d1c:	4918      	ldr	r1, [pc, #96]	; (8001d80 <BME280_Measure+0x1d0>)
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <BME280_Measure+0x1d4>)
 8001d20:	f009 fc26 	bl	800b570 <siprintf>

}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200001fc 	.word	0x200001fc
 8001d30:	2000026c 	.word	0x2000026c
 8001d34:	40590000 	.word	0x40590000
 8001d38:	20000200 	.word	0x20000200
 8001d3c:	20000270 	.word	0x20000270
 8001d40:	40700000 	.word	0x40700000
 8001d44:	20000204 	.word	0x20000204
 8001d48:	20000274 	.word	0x20000274
 8001d4c:	40900000 	.word	0x40900000
 8001d50:	0800db60 	.word	0x0800db60
 8001d54:	20000248 	.word	0x20000248
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	0800db68 	.word	0x0800db68
 8001d60:	20000254 	.word	0x20000254
 8001d64:	20000260 	.word	0x20000260
 8001d68:	20000b54 	.word	0x20000b54
 8001d6c:	2000023c 	.word	0x2000023c
 8001d70:	0800db70 	.word	0x0800db70
 8001d74:	20000d2e 	.word	0x20000d2e
 8001d78:	0800db8c 	.word	0x0800db8c
 8001d7c:	20000cd2 	.word	0x20000cd2
 8001d80:	0800dba0 	.word	0x0800dba0
 8001d84:	20000d8a 	.word	0x20000d8a

08001d88 <ESP_RESET>:
uint16_t indy;



void ESP_RESET()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <ESP_RESET+0x44>)
 8001d94:	f004 f9e6 	bl	8006164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <ESP_RESET+0x48>)
 8001da0:	f004 f9e0 	bl	8006164 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001da4:	20c8      	movs	r0, #200	; 0xc8
 8001da6:	f002 ff2f 	bl	8004c08 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db0:	4806      	ldr	r0, [pc, #24]	; (8001dcc <ESP_RESET+0x44>)
 8001db2:	f004 f9d7 	bl	8006164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <ESP_RESET+0x48>)
 8001dbe:	f004 f9d1 	bl	8006164 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001dc2:	20c8      	movs	r0, #200	; 0xc8
 8001dc4:	f002 ff20 	bl	8004c08 <HAL_Delay>

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <ESP_Server_Init>:

void ESP_Server_Init()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 8001dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ddc:	f002 ff14 	bl	8004c08 <HAL_Delay>
	ESP_RESET();
 8001de0:	f7ff ffd2 	bl	8001d88 <ESP_RESET>
	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f002 ff0e 	bl	8004c08 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <transfer_bufor>:

void transfer_bufor(){
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0

	uint16_t i=0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	81fb      	strh	r3, [r7, #14]
	  		  	while(((ogon +i)!=glowa)&&(ogon+i)<1000){
 8001dfa:	e0d1      	b.n	8001fa0 <transfer_bufor+0x1b0>

	  		  		if(flaga_szukania==1){
 8001dfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <transfer_bufor+0x200>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d17f      	bne.n	8001f04 <transfer_bufor+0x114>

	  		  			int a = (ogon+i+1+1000)%1000;
 8001e04:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <transfer_bufor+0x204>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001e12:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <transfer_bufor+0x208>)
 8001e14:	fb82 1203 	smull	r1, r2, r2, r3
 8001e18:	1191      	asrs	r1, r2, #6
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	1a8a      	subs	r2, r1, r2
 8001e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e22:	fb01 f202 	mul.w	r2, r1, r2
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	60bb      	str	r3, [r7, #8]
	  		  			int b = (ogon+i+2+1000)%1000;
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <transfer_bufor+0x204>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 33ea 	addw	r3, r3, #1002	; 0x3ea
 8001e38:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <transfer_bufor+0x208>)
 8001e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3e:	1191      	asrs	r1, r2, #6
 8001e40:	17da      	asrs	r2, r3, #31
 8001e42:	1a8a      	subs	r2, r1, r2
 8001e44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e48:	fb01 f202 	mul.w	r2, r1, r2
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	607b      	str	r3, [r7, #4]

						if( ((MainBuf[ogon+i])==*(tab_polecenie[obecny.etap].rsp)) || ((MainBuf[ogon+i])=='#') ){
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <transfer_bufor+0x204>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <transfer_bufor+0x20c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <transfer_bufor+0x210>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	4967      	ldr	r1, [pc, #412]	; (8002004 <transfer_bufor+0x214>)
 8001e68:	235c      	movs	r3, #92	; 0x5c
 8001e6a:	fb00 f303 	mul.w	r3, r0, r3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3340      	adds	r3, #64	; 0x40
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d009      	beq.n	8001e8c <transfer_bufor+0x9c>
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <transfer_bufor+0x204>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a5e      	ldr	r2, [pc, #376]	; (8001ffc <transfer_bufor+0x20c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b23      	cmp	r3, #35	; 0x23
 8001e8a:	d13b      	bne.n	8001f04 <transfer_bufor+0x114>

								if((MainBuf[a])==*(tab_polecenie[obecny.etap].rsp+1)){
 8001e8c:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <transfer_bufor+0x20c>)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <transfer_bufor+0x210>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4959      	ldr	r1, [pc, #356]	; (8002004 <transfer_bufor+0x214>)
 8001e9e:	235c      	movs	r3, #92	; 0x5c
 8001ea0:	fb00 f303 	mul.w	r3, r0, r3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3341      	adds	r3, #65	; 0x41
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d113      	bne.n	8001ed6 <transfer_bufor+0xe6>
									if((MainBuf[b])==*(tab_polecenie[obecny.etap].rsp+2)){
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <transfer_bufor+0x20c>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <transfer_bufor+0x210>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4951      	ldr	r1, [pc, #324]	; (8002004 <transfer_bufor+0x214>)
 8001ec0:	235c      	movs	r3, #92	; 0x5c
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3342      	adds	r3, #66	; 0x42
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d102      	bne.n	8001ed6 <transfer_bufor+0xe6>
										flaga_szukania=2;
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <transfer_bufor+0x200>)
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	801a      	strh	r2, [r3, #0]
									}
								}

								if((MainBuf[a])=='W'){
 8001ed6:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <transfer_bufor+0x20c>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b57      	cmp	r3, #87	; 0x57
 8001ee2:	d10f      	bne.n	8001f04 <transfer_bufor+0x114>
									if((MainBuf[b])=='F'){
 8001ee4:	4a45      	ldr	r2, [pc, #276]	; (8001ffc <transfer_bufor+0x20c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b46      	cmp	r3, #70	; 0x46
 8001ef0:	d108      	bne.n	8001f04 <transfer_bufor+0x114>
										wifi_set=1;
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <transfer_bufor+0x218>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
										obecny.etap=6;
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <transfer_bufor+0x210>)
 8001efa:	2206      	movs	r2, #6
 8001efc:	801a      	strh	r2, [r3, #0]
										obecny.krok=0;
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <transfer_bufor+0x210>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	805a      	strh	r2, [r3, #2]
								}

						}
	  		  		}

	  		  		if(wifi_set){
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <transfer_bufor+0x218>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d046      	beq.n	8001f9a <transfer_bufor+0x1aa>
						if(kopiuj_buf){
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <transfer_bufor+0x21c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03e      	beq.n	8001f92 <transfer_bufor+0x1a2>
							if((MainBuf[ogon+i]!='"')&&(indx<32)&&(indy<3)){
 8001f14:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <transfer_bufor+0x204>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <transfer_bufor+0x20c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b22      	cmp	r3, #34	; 0x22
 8001f26:	d024      	beq.n	8001f72 <transfer_bufor+0x182>
 8001f28:	4b39      	ldr	r3, [pc, #228]	; (8002010 <transfer_bufor+0x220>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b1f      	cmp	r3, #31
 8001f2e:	d820      	bhi.n	8001f72 <transfer_bufor+0x182>
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <transfer_bufor+0x224>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d81c      	bhi.n	8001f72 <transfer_bufor+0x182>
							wifi_list[indy][indx]=MainBuf[ogon+i];
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <transfer_bufor+0x204>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a34      	ldr	r2, [pc, #208]	; (8002014 <transfer_bufor+0x224>)
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <transfer_bufor+0x220>)
 8001f4a:	8812      	ldrh	r2, [r2, #0]
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <transfer_bufor+0x20c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	b2d8      	uxtb	r0, r3
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <transfer_bufor+0x228>)
 8001f56:	460b      	mov	r3, r1
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	440b      	add	r3, r1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4423      	add	r3, r4
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
							indx++;
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <transfer_bufor+0x220>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <transfer_bufor+0x220>)
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e00f      	b.n	8001f92 <transfer_bufor+0x1a2>
							}
							else{
								kopiuj_buf=0;
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <transfer_bufor+0x21c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
								if(indx>1){
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <transfer_bufor+0x220>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d905      	bls.n	8001f8c <transfer_bufor+0x19c>
									indy++;
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <transfer_bufor+0x224>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <transfer_bufor+0x224>)
 8001f8a:	801a      	strh	r2, [r3, #0]
								}
								indx=0;
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <transfer_bufor+0x220>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	801a      	strh	r2, [r3, #0]
							}
						}
						szukaj_wifi(i);
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f845 	bl	8002024 <szukaj_wifi>
	  		  		}
	  		  		i++;
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	81fb      	strh	r3, [r7, #14]
	  		  	while(((ogon +i)!=glowa)&&(ogon+i)<1000){
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <transfer_bufor+0x204>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <transfer_bufor+0x22c>)
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d008      	beq.n	8001fc4 <transfer_bufor+0x1d4>
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <transfer_bufor+0x204>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc0:	f6ff af1c 	blt.w	8001dfc <transfer_bufor+0xc>
	  		  	}

	  		  	HAL_UART_Transmit_DMA(&huart2, (MainBuf+ogon), i);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <transfer_bufor+0x204>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <transfer_bufor+0x20c>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	89fa      	ldrh	r2, [r7, #14]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4813      	ldr	r0, [pc, #76]	; (8002020 <transfer_bufor+0x230>)
 8001fd4:	f007 fb7e 	bl	80096d4 <HAL_UART_Transmit_DMA>
				ogon+=i;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <transfer_bufor+0x204>)
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <transfer_bufor+0x204>)
 8001fe4:	801a      	strh	r2, [r3, #0]

}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000a4e 	.word	0x20000a4e
 8001ff4:	20000a48 	.word	0x20000a48
 8001ff8:	10624dd3 	.word	0x10624dd3
 8001ffc:	20000660 	.word	0x20000660
 8002000:	20000fb0 	.word	0x20000fb0
 8002004:	20000b60 	.word	0x20000b60
 8002008:	20000a68 	.word	0x20000a68
 800200c:	20000236 	.word	0x20000236
 8002010:	20000234 	.word	0x20000234
 8002014:	20000238 	.word	0x20000238
 8002018:	20000a6c 	.word	0x20000a6c
 800201c:	20000a4a 	.word	0x20000a4a
 8002020:	20001144 	.word	0x20001144

08002024 <szukaj_wifi>:

void szukaj_wifi(uint16_t i){
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]

	uint16_t ind,indmin4,indmin5;

	ind=ogon+i;
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <szukaj_wifi+0xb4>)
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4413      	add	r3, r2
 8002036:	81fb      	strh	r3, [r7, #14]
	indmin4=(ind-4+1000)%1000;
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <szukaj_wifi+0xb8>)
 8002040:	fb82 1203 	smull	r1, r2, r2, r3
 8002044:	1191      	asrs	r1, r2, #6
 8002046:	17da      	asrs	r2, r3, #31
 8002048:	1a8a      	subs	r2, r1, r2
 800204a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800204e:	fb01 f202 	mul.w	r2, r1, r2
 8002052:	1a9a      	subs	r2, r3, r2
 8002054:	4613      	mov	r3, r2
 8002056:	81bb      	strh	r3, [r7, #12]
	indmin5=(ind-5+1000)%1000;
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	f203 33e3 	addw	r3, r3, #995	; 0x3e3
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <szukaj_wifi+0xb8>)
 8002060:	fb82 1203 	smull	r1, r2, r2, r3
 8002064:	1191      	asrs	r1, r2, #6
 8002066:	17da      	asrs	r2, r3, #31
 8002068:	1a8a      	subs	r2, r1, r2
 800206a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800206e:	fb01 f202 	mul.w	r2, r1, r2
 8002072:	1a9a      	subs	r2, r3, r2
 8002074:	4613      	mov	r3, r2
 8002076:	817b      	strh	r3, [r7, #10]

	if((MainBuf[indmin5]=='P')&&(MainBuf[indmin4]=='I')&&(MainBuf[ind]=='"')){
 8002078:	897b      	ldrh	r3, [r7, #10]
 800207a:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <szukaj_wifi+0xbc>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b50      	cmp	r3, #80	; 0x50
 8002082:	d10e      	bne.n	80020a2 <szukaj_wifi+0x7e>
 8002084:	89bb      	ldrh	r3, [r7, #12]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <szukaj_wifi+0xbc>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b49      	cmp	r3, #73	; 0x49
 800208e:	d108      	bne.n	80020a2 <szukaj_wifi+0x7e>
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <szukaj_wifi+0xbc>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b22      	cmp	r3, #34	; 0x22
 800209a:	d102      	bne.n	80020a2 <szukaj_wifi+0x7e>
		kopiuj_buf=1;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <szukaj_wifi+0xc0>)
 800209e:	2201      	movs	r2, #1
 80020a0:	801a      	strh	r2, [r3, #0]
	}
	if((MainBuf[indmin5]=='S')&&(MainBuf[indmin4]=='I')&&(MainBuf[ind]=='"')){
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <szukaj_wifi+0xbc>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b53      	cmp	r3, #83	; 0x53
 80020ac:	d10e      	bne.n	80020cc <szukaj_wifi+0xa8>
 80020ae:	89bb      	ldrh	r3, [r7, #12]
 80020b0:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <szukaj_wifi+0xbc>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b49      	cmp	r3, #73	; 0x49
 80020b8:	d108      	bne.n	80020cc <szukaj_wifi+0xa8>
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <szukaj_wifi+0xbc>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b22      	cmp	r3, #34	; 0x22
 80020c4:	d102      	bne.n	80020cc <szukaj_wifi+0xa8>
		kopiuj_buf=1;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <szukaj_wifi+0xc0>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	801a      	strh	r2, [r3, #0]
	}

}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	20000a48 	.word	0x20000a48
 80020dc:	10624dd3 	.word	0x10624dd3
 80020e0:	20000660 	.word	0x20000660
 80020e4:	20000236 	.word	0x20000236

080020e8 <ChooseNextStep>:

void ChooseNextStep(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if(tryb_wifi==RESET_MODE_TO_HOTSPOT){
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <ChooseNextStep+0xd0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d109      	bne.n	8002108 <ChooseNextStep+0x20>
		tryb_wifi=HOTSPOT;
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <ChooseNextStep+0xd0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
		obecny.etap=0;
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <ChooseNextStep+0xd4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	801a      	strh	r2, [r3, #0]
		obecny.krok=0;
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <ChooseNextStep+0xd4>)
 8002102:	2200      	movs	r2, #0
 8002104:	805a      	strh	r2, [r3, #2]
			obecny.etap=0;
			obecny.krok=0;
			PomiarFlag=0;
		}
	}
}
 8002106:	e054      	b.n	80021b2 <ChooseNextStep+0xca>
	else if(tryb_wifi==RESET_MODE_TO_ROUTER){
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <ChooseNextStep+0xd0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d109      	bne.n	8002124 <ChooseNextStep+0x3c>
		tryb_wifi=ROUTER_MODE;
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <ChooseNextStep+0xd0>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
		obecny.etap=0;
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <ChooseNextStep+0xd4>)
 8002118:	2200      	movs	r2, #0
 800211a:	801a      	strh	r2, [r3, #0]
		obecny.krok=0;
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <ChooseNextStep+0xd4>)
 800211e:	2200      	movs	r2, #0
 8002120:	805a      	strh	r2, [r3, #2]
}
 8002122:	e046      	b.n	80021b2 <ChooseNextStep+0xca>
	else if(tryb_wifi==RESET_TO_WIFI_CHANGE){
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <ChooseNextStep+0xd0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d109      	bne.n	8002140 <ChooseNextStep+0x58>
		tryb_wifi=WIFI_CHANGE;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <ChooseNextStep+0xd0>)
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
		obecny.etap=0;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <ChooseNextStep+0xd4>)
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]
		obecny.krok=0;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <ChooseNextStep+0xd4>)
 800213a:	2200      	movs	r2, #0
 800213c:	805a      	strh	r2, [r3, #2]
}
 800213e:	e038      	b.n	80021b2 <ChooseNextStep+0xca>
	else if(tryb_wifi==WIFI_CHANGE){
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <ChooseNextStep+0xd0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d11d      	bne.n	8002184 <ChooseNextStep+0x9c>
		save_ssid(wifi_list[0], wifi_list[1], wifi_list[2]);
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <ChooseNextStep+0xd8>)
 800214a:	491e      	ldr	r1, [pc, #120]	; (80021c4 <ChooseNextStep+0xdc>)
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <ChooseNextStep+0xe0>)
 800214e:	f000 fa19 	bl	8002584 <save_ssid>
		sprintf(wifi_ssid[0],wifi_list[0]);
 8002152:	491d      	ldr	r1, [pc, #116]	; (80021c8 <ChooseNextStep+0xe0>)
 8002154:	481d      	ldr	r0, [pc, #116]	; (80021cc <ChooseNextStep+0xe4>)
 8002156:	f009 fa0b 	bl	800b570 <siprintf>
		sprintf(wifi_ssid[1],wifi_list[1]);
 800215a:	491a      	ldr	r1, [pc, #104]	; (80021c4 <ChooseNextStep+0xdc>)
 800215c:	481c      	ldr	r0, [pc, #112]	; (80021d0 <ChooseNextStep+0xe8>)
 800215e:	f009 fa07 	bl	800b570 <siprintf>
		sprintf(wifi_ssid[2],wifi_list[2]);
 8002162:	4917      	ldr	r1, [pc, #92]	; (80021c0 <ChooseNextStep+0xd8>)
 8002164:	481b      	ldr	r0, [pc, #108]	; (80021d4 <ChooseNextStep+0xec>)
 8002166:	f009 fa03 	bl	800b570 <siprintf>
		obecny.etap=0;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <ChooseNextStep+0xd4>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
		obecny.krok=0;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <ChooseNextStep+0xd4>)
 8002172:	2200      	movs	r2, #0
 8002174:	805a      	strh	r2, [r3, #2]
		wifi_set=0;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <ChooseNextStep+0xf0>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
		tryb_wifi=RESET_MODE_TO_ROUTER;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <ChooseNextStep+0xd0>)
 800217e:	2204      	movs	r2, #4
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	e016      	b.n	80021b2 <ChooseNextStep+0xca>
		if(wifi_set){
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <ChooseNextStep+0xf0>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <ChooseNextStep+0xb8>
			tryb_wifi=RESET_TO_WIFI_CHANGE;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <ChooseNextStep+0xd0>)
 800218e:	2205      	movs	r2, #5
 8002190:	601a      	str	r2, [r3, #0]
			obecny.etap=0;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <ChooseNextStep+0xd4>)
 8002194:	2200      	movs	r2, #0
 8002196:	801a      	strh	r2, [r3, #0]
			obecny.krok=0;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <ChooseNextStep+0xd4>)
 800219a:	2200      	movs	r2, #0
 800219c:	805a      	strh	r2, [r3, #2]
}
 800219e:	e008      	b.n	80021b2 <ChooseNextStep+0xca>
			obecny.etap=0;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <ChooseNextStep+0xd4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
			obecny.krok=0;
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <ChooseNextStep+0xd4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	805a      	strh	r2, [r3, #2]
			PomiarFlag=0;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <ChooseNextStep+0xf4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000244 	.word	0x20000244
 80021bc:	20000fb0 	.word	0x20000fb0
 80021c0:	20000aae 	.word	0x20000aae
 80021c4:	20000a8d 	.word	0x20000a8d
 80021c8:	20000a6c 	.word	0x20000a6c
 80021cc:	20000ad0 	.word	0x20000ad0
 80021d0:	20000af1 	.word	0x20000af1
 80021d4:	20000b12 	.word	0x20000b12
 80021d8:	20000a68 	.word	0x20000a68
 80021dc:	20000000 	.word	0x20000000

080021e0 <send_msg>:

void send_msg(){
 80021e0:	b598      	push	{r3, r4, r7, lr}
 80021e2:	af00      	add	r7, sp, #0

	switch(obecny.krok){
 80021e4:	4b9d      	ldr	r3, [pc, #628]	; (800245c <send_msg+0x27c>)
 80021e6:	885b      	ldrh	r3, [r3, #2]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	f200 81bd 	bhi.w	8002568 <send_msg+0x388>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <send_msg+0x14>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002205 	.word	0x08002205
 80021f8:	08002265 	.word	0x08002265
 80021fc:	080022f7 	.word	0x080022f7
 8002200:	080024f7 	.word	0x080024f7

		case AT_COMMAND_IDLE_WAITING:
				if(i1==0){
 8002204:	4b96      	ldr	r3, [pc, #600]	; (8002460 <send_msg+0x280>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <send_msg+0x3a>
					__HAL_TIM_SET_COUNTER(&htim4,0);
 800220c:	4b95      	ldr	r3, [pc, #596]	; (8002464 <send_msg+0x284>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
					i1=1;
 8002214:	4b92      	ldr	r3, [pc, #584]	; (8002460 <send_msg+0x280>)
 8002216:	2201      	movs	r2, #1
 8002218:	801a      	strh	r2, [r3, #0]
				}
				if(TIM4->CNT > tab_polecenie[obecny.etap].time_init){
 800221a:	4b93      	ldr	r3, [pc, #588]	; (8002468 <send_msg+0x288>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	4a8f      	ldr	r2, [pc, #572]	; (800245c <send_msg+0x27c>)
 8002220:	8812      	ldrh	r2, [r2, #0]
 8002222:	4610      	mov	r0, r2
 8002224:	4991      	ldr	r1, [pc, #580]	; (800246c <send_msg+0x28c>)
 8002226:	225c      	movs	r2, #92	; 0x5c
 8002228:	fb00 f202 	mul.w	r2, r0, r2
 800222c:	440a      	add	r2, r1
 800222e:	8812      	ldrh	r2, [r2, #0]
 8002230:	4293      	cmp	r3, r2
 8002232:	f240 8192 	bls.w	800255a <send_msg+0x37a>
					if(obecny.etap==4){
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <send_msg+0x27c>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d108      	bne.n	8002250 <send_msg+0x70>
						measure_battery();
 800223e:	f001 fa3f 	bl	80036c0 <measure_battery>
						BME280_Measure();
 8002242:	f7ff fcb5 	bl	8001bb0 <BME280_Measure>
						dust= GP2Y_measure();
 8002246:	f001 f94f 	bl	80034e8 <GP2Y_measure>
 800224a:	4603      	mov	r3, r0
 800224c:	4a88      	ldr	r2, [pc, #544]	; (8002470 <send_msg+0x290>)
 800224e:	6013      	str	r3, [r2, #0]
					}
					obecny.krok++;
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <send_msg+0x27c>)
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	3301      	adds	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <send_msg+0x27c>)
 800225a:	805a      	strh	r2, [r3, #2]
					i1=0;
 800225c:	4b80      	ldr	r3, [pc, #512]	; (8002460 <send_msg+0x280>)
 800225e:	2200      	movs	r2, #0
 8002260:	801a      	strh	r2, [r3, #0]
				}
		break;
 8002262:	e17a      	b.n	800255a <send_msg+0x37a>

		case AT_COMMAND_SENDING:
					if((USART1->SR) & (USART_SR_TC))
 8002264:	4b83      	ldr	r3, [pc, #524]	; (8002474 <send_msg+0x294>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8176 	beq.w	800255e <send_msg+0x37e>
					{
					if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)tab_polecenie[obecny.etap].msg, strlen(tab_polecenie[obecny.etap].msg))==HAL_OK){
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <send_msg+0x27c>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	235c      	movs	r3, #92	; 0x5c
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a7b      	ldr	r2, [pc, #492]	; (800246c <send_msg+0x28c>)
 8002280:	4413      	add	r3, r2
 8002282:	1c9c      	adds	r4, r3, #2
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <send_msg+0x27c>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	235c      	movs	r3, #92	; 0x5c
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a76      	ldr	r2, [pc, #472]	; (800246c <send_msg+0x28c>)
 8002292:	4413      	add	r3, r2
 8002294:	3302      	adds	r3, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffa2 	bl	80001e0 <strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4621      	mov	r1, r4
 80022a4:	4874      	ldr	r0, [pc, #464]	; (8002478 <send_msg+0x298>)
 80022a6:	f007 fa15 	bl	80096d4 <HAL_UART_Transmit_DMA>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <send_msg+0xe4>
						obecny.krok++;
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <send_msg+0x27c>)
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <send_msg+0x27c>)
 80022ba:	805a      	strh	r2, [r3, #2]
						flaga_szukania=1;
 80022bc:	4b6f      	ldr	r3, [pc, #444]	; (800247c <send_msg+0x29c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	801a      	strh	r2, [r3, #0]
					else{
						obecny.etap=tab_polecenie[obecny.etap].powrot.etap;
						obecny.krok=tab_polecenie[obecny.krok].powrot.krok;
					}
					}
		break;
 80022c2:	e14c      	b.n	800255e <send_msg+0x37e>
						obecny.etap=tab_polecenie[obecny.etap].powrot.etap;
 80022c4:	4b65      	ldr	r3, [pc, #404]	; (800245c <send_msg+0x27c>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4a68      	ldr	r2, [pc, #416]	; (800246c <send_msg+0x28c>)
 80022cc:	235c      	movs	r3, #92	; 0x5c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3354      	adds	r3, #84	; 0x54
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b60      	ldr	r3, [pc, #384]	; (800245c <send_msg+0x27c>)
 80022da:	801a      	strh	r2, [r3, #0]
						obecny.krok=tab_polecenie[obecny.krok].powrot.krok;
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <send_msg+0x27c>)
 80022de:	885b      	ldrh	r3, [r3, #2]
 80022e0:	4619      	mov	r1, r3
 80022e2:	4a62      	ldr	r2, [pc, #392]	; (800246c <send_msg+0x28c>)
 80022e4:	235c      	movs	r3, #92	; 0x5c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3356      	adds	r3, #86	; 0x56
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	4b5a      	ldr	r3, [pc, #360]	; (800245c <send_msg+0x27c>)
 80022f2:	805a      	strh	r2, [r3, #2]
		break;
 80022f4:	e133      	b.n	800255e <send_msg+0x37e>

		case AT_COMMAND_FIND_RESPONSE:
				if(i1==0){
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <send_msg+0x280>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <send_msg+0x12c>
					__HAL_TIM_SET_COUNTER(&htim4,0);
 80022fe:	4b59      	ldr	r3, [pc, #356]	; (8002464 <send_msg+0x284>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
					i1=1;
 8002306:	4b56      	ldr	r3, [pc, #344]	; (8002460 <send_msg+0x280>)
 8002308:	2201      	movs	r2, #1
 800230a:	801a      	strh	r2, [r3, #0]
				}
				if(flaga_szukania==2){
 800230c:	4b5b      	ldr	r3, [pc, #364]	; (800247c <send_msg+0x29c>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d109      	bne.n	8002328 <send_msg+0x148>
					obecny.krok++;
 8002314:	4b51      	ldr	r3, [pc, #324]	; (800245c <send_msg+0x27c>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	3301      	adds	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b4f      	ldr	r3, [pc, #316]	; (800245c <send_msg+0x27c>)
 800231e:	805a      	strh	r2, [r3, #2]
					flaga_szukania=0;
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <send_msg+0x29c>)
 8002322:	2200      	movs	r2, #0
 8002324:	801a      	strh	r2, [r3, #0]
						obecny.krok=tab_polecenie[obecny.krok].powrot.krok=0;
					}
					flaga_szukania=0;
					i1=0;
				}
		break;
 8002326:	e11c      	b.n	8002562 <send_msg+0x382>
				else if(TIM4->CNT > tab_polecenie[obecny.etap].time_response){
 8002328:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <send_msg+0x288>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <send_msg+0x27c>)
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	4610      	mov	r0, r2
 8002332:	494e      	ldr	r1, [pc, #312]	; (800246c <send_msg+0x28c>)
 8002334:	225c      	movs	r2, #92	; 0x5c
 8002336:	fb00 f202 	mul.w	r2, r0, r2
 800233a:	440a      	add	r2, r1
 800233c:	323e      	adds	r2, #62	; 0x3e
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	4293      	cmp	r3, r2
 8002342:	f240 810e 	bls.w	8002562 <send_msg+0x382>
					if( ++iter_wifi_msg > tab_polecenie[obecny.etap].iter ){
 8002346:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <send_msg+0x2a0>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <send_msg+0x2a0>)
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <send_msg+0x2a0>)
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <send_msg+0x27c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	4943      	ldr	r1, [pc, #268]	; (800246c <send_msg+0x28c>)
 800235e:	235c      	movs	r3, #92	; 0x5c
 8002360:	fb00 f303 	mul.w	r3, r0, r3
 8002364:	440b      	add	r3, r1
 8002366:	335a      	adds	r3, #90	; 0x5a
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	f240 80a9 	bls.w	80024c2 <send_msg+0x2e2>
						iter_wifi_msg=0;
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <send_msg+0x2a0>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
						reset_iter++;
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <send_msg+0x2a4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <send_msg+0x2a4>)
 8002380:	701a      	strb	r2, [r3, #0]
						obecny.etap=tab_polecenie[obecny.etap].powrot.etap;
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <send_msg+0x27c>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <send_msg+0x28c>)
 800238a:	235c      	movs	r3, #92	; 0x5c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3354      	adds	r3, #84	; 0x54
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <send_msg+0x27c>)
 8002398:	801a      	strh	r2, [r3, #0]
						obecny.krok=tab_polecenie[obecny.krok].powrot.krok;
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <send_msg+0x27c>)
 800239c:	885b      	ldrh	r3, [r3, #2]
 800239e:	4619      	mov	r1, r3
 80023a0:	4a32      	ldr	r2, [pc, #200]	; (800246c <send_msg+0x28c>)
 80023a2:	235c      	movs	r3, #92	; 0x5c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3356      	adds	r3, #86	; 0x56
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <send_msg+0x27c>)
 80023b0:	805a      	strh	r2, [r3, #2]
						if( (tryb_wifi==ROUTER_MODE) && (reset_iter>25) ){
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <send_msg+0x2a8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10d      	bne.n	80023d6 <send_msg+0x1f6>
 80023ba:	4b32      	ldr	r3, [pc, #200]	; (8002484 <send_msg+0x2a4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b19      	cmp	r3, #25
 80023c0:	d909      	bls.n	80023d6 <send_msg+0x1f6>
							tryb_wifi=RESET_MODE_TO_HOTSPOT;
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <send_msg+0x2a8>)
 80023c4:	2203      	movs	r2, #3
 80023c6:	601a      	str	r2, [r3, #0]
							obecny.etap=0;
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <send_msg+0x27c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
							obecny.krok=0;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <send_msg+0x27c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	805a      	strh	r2, [r3, #2]
 80023d4:	e088      	b.n	80024e8 <send_msg+0x308>
						else if( (tryb_wifi==ROUTER_MODE) && (reset_iter>10)  ){
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <send_msg+0x2a8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d110      	bne.n	8002400 <send_msg+0x220>
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <send_msg+0x2a4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b0a      	cmp	r3, #10
 80023e4:	d90c      	bls.n	8002400 <send_msg+0x220>
							tryb_wifi=RESET_MODE_TO_ROUTER;
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <send_msg+0x2a8>)
 80023e8:	2204      	movs	r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
							obecny.etap=0;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <send_msg+0x27c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
							obecny.krok=0;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <send_msg+0x27c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	805a      	strh	r2, [r3, #2]
							reset_iter=0;
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <send_msg+0x2a4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e073      	b.n	80024e8 <send_msg+0x308>
						else if( (tryb_wifi==HOTSPOT) && (reset_iter>10) ){
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <send_msg+0x2a8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d110      	bne.n	800242a <send_msg+0x24a>
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <send_msg+0x2a4>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b0a      	cmp	r3, #10
 800240e:	d90c      	bls.n	800242a <send_msg+0x24a>
							tryb_wifi=RESET_MODE_TO_HOTSPOT;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <send_msg+0x2a8>)
 8002412:	2203      	movs	r2, #3
 8002414:	601a      	str	r2, [r3, #0]
							obecny.etap=0;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <send_msg+0x27c>)
 8002418:	2200      	movs	r2, #0
 800241a:	801a      	strh	r2, [r3, #0]
							obecny.krok=0;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <send_msg+0x27c>)
 800241e:	2200      	movs	r2, #0
 8002420:	805a      	strh	r2, [r3, #2]
							reset_iter=0;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <send_msg+0x2a4>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e05e      	b.n	80024e8 <send_msg+0x308>
						else if( (tryb_wifi==WIFI_CHANGE) && (reset_iter>10) ){
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <send_msg+0x2a8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d12e      	bne.n	8002490 <send_msg+0x2b0>
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <send_msg+0x2a4>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b0a      	cmp	r3, #10
 8002438:	d92a      	bls.n	8002490 <send_msg+0x2b0>
							tryb_wifi=RESET_MODE_TO_HOTSPOT;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <send_msg+0x2a8>)
 800243c:	2203      	movs	r2, #3
 800243e:	601a      	str	r2, [r3, #0]
							obecny.etap=0;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <send_msg+0x27c>)
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
							obecny.krok=0;
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <send_msg+0x27c>)
 8002448:	2200      	movs	r2, #0
 800244a:	805a      	strh	r2, [r3, #2]
							reset_iter=0;
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <send_msg+0x2a4>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
							wifi_set=0;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <send_msg+0x2ac>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e046      	b.n	80024e8 <send_msg+0x308>
 800245a:	bf00      	nop
 800245c:	20000fb0 	.word	0x20000fb0
 8002460:	20000a4c 	.word	0x20000a4c
 8002464:	200010b8 	.word	0x200010b8
 8002468:	40000800 	.word	0x40000800
 800246c:	20000b60 	.word	0x20000b60
 8002470:	2000023c 	.word	0x2000023c
 8002474:	40011000 	.word	0x40011000
 8002478:	20001100 	.word	0x20001100
 800247c:	20000a4e 	.word	0x20000a4e
 8002480:	20000240 	.word	0x20000240
 8002484:	20000a69 	.word	0x20000a69
 8002488:	20000244 	.word	0x20000244
 800248c:	20000a68 	.word	0x20000a68
							obecny.etap=tab_polecenie[obecny.etap].powrot.etap;
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <send_msg+0x38c>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <send_msg+0x390>)
 8002498:	235c      	movs	r3, #92	; 0x5c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3354      	adds	r3, #84	; 0x54
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <send_msg+0x38c>)
 80024a6:	801a      	strh	r2, [r3, #0]
							obecny.krok=tab_polecenie[obecny.krok].powrot.krok;
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <send_msg+0x38c>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4a30      	ldr	r2, [pc, #192]	; (8002570 <send_msg+0x390>)
 80024b0:	235c      	movs	r3, #92	; 0x5c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3356      	adds	r3, #86	; 0x56
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <send_msg+0x38c>)
 80024be:	805a      	strh	r2, [r3, #2]
 80024c0:	e012      	b.n	80024e8 <send_msg+0x308>
						obecny.krok=tab_polecenie[obecny.krok].powrot.krok=0;
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <send_msg+0x38c>)
 80024c4:	885b      	ldrh	r3, [r3, #2]
 80024c6:	492a      	ldr	r1, [pc, #168]	; (8002570 <send_msg+0x390>)
 80024c8:	225c      	movs	r2, #92	; 0x5c
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	440a      	add	r2, r1
 80024d0:	3256      	adds	r2, #86	; 0x56
 80024d2:	2100      	movs	r1, #0
 80024d4:	8011      	strh	r1, [r2, #0]
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <send_msg+0x390>)
 80024d8:	215c      	movs	r1, #92	; 0x5c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3356      	adds	r3, #86	; 0x56
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <send_msg+0x38c>)
 80024e6:	805a      	strh	r2, [r3, #2]
					flaga_szukania=0;
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <send_msg+0x394>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
					i1=0;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <send_msg+0x398>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]
		break;
 80024f4:	e035      	b.n	8002562 <send_msg+0x382>

		case AT_COMMAND_WAIT_AND_EXIT:
				if(i1==0){
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <send_msg+0x398>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <send_msg+0x32c>
					__HAL_TIM_SET_COUNTER(&htim4,0);
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <send_msg+0x39c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
					i1=1;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <send_msg+0x398>)
 8002508:	2201      	movs	r2, #1
 800250a:	801a      	strh	r2, [r3, #0]
				}
				if(TIM4->CNT > tab_polecenie[obecny.etap].time_exit){
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <send_msg+0x3a0>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <send_msg+0x38c>)
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	4610      	mov	r0, r2
 8002516:	4916      	ldr	r1, [pc, #88]	; (8002570 <send_msg+0x390>)
 8002518:	225c      	movs	r2, #92	; 0x5c
 800251a:	fb00 f202 	mul.w	r2, r0, r2
 800251e:	440a      	add	r2, r1
 8002520:	3258      	adds	r2, #88	; 0x58
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	4293      	cmp	r3, r2
 8002526:	d91e      	bls.n	8002566 <send_msg+0x386>
					if(tab_polecenie[obecny.etap].terminate==0){
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <send_msg+0x38c>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <send_msg+0x390>)
 8002530:	235c      	movs	r3, #92	; 0x5c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	335b      	adds	r3, #91	; 0x5b
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <send_msg+0x374>
						obecny.krok=0;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <send_msg+0x38c>)
 8002542:	2200      	movs	r2, #0
 8002544:	805a      	strh	r2, [r3, #2]
						obecny.etap++;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <send_msg+0x38c>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <send_msg+0x38c>)
 8002550:	801a      	strh	r2, [r3, #0]
					}
					else{
						ChooseNextStep();
						}
				}
		break;
 8002552:	e008      	b.n	8002566 <send_msg+0x386>
						ChooseNextStep();
 8002554:	f7ff fdc8 	bl	80020e8 <ChooseNextStep>
		break;
 8002558:	e005      	b.n	8002566 <send_msg+0x386>
		break;
 800255a:	bf00      	nop
 800255c:	e004      	b.n	8002568 <send_msg+0x388>
		break;
 800255e:	bf00      	nop
 8002560:	e002      	b.n	8002568 <send_msg+0x388>
		break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <send_msg+0x388>
		break;
 8002566:	bf00      	nop
		}

}
 8002568:	bf00      	nop
 800256a:	bd98      	pop	{r3, r4, r7, pc}
 800256c:	20000fb0 	.word	0x20000fb0
 8002570:	20000b60 	.word	0x20000b60
 8002574:	20000a4e 	.word	0x20000a4e
 8002578:	20000a4c 	.word	0x20000a4c
 800257c:	200010b8 	.word	0x200010b8
 8002580:	40000800 	.word	0x40000800

08002584 <save_ssid>:

void save_ssid(char * ssid, char * pass, char * ip){
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	b09b      	sub	sp, #108	; 0x6c
 800258a:	af00      	add	r7, sp, #0
 800258c:	6278      	str	r0, [r7, #36]	; 0x24
 800258e:	6239      	str	r1, [r7, #32]
 8002590:	61fa      	str	r2, [r7, #28]
 8002592:	466b      	mov	r3, sp
 8002594:	461e      	mov	r6, r3

	uint8_t ssid_len= strlen(ssid);
 8002596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002598:	f7fd fe22 	bl	80001e0 <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t pass_len= strlen(pass);
 80025a2:	6a38      	ldr	r0, [r7, #32]
 80025a4:	f7fd fe1c 	bl	80001e0 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t ip_len= strlen(ip);
 80025ae:	69f8      	ldr	r0, [r7, #28]
 80025b0:	f7fd fe16 	bl	80001e0 <strlen>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t mem_ssid[ssid_len+1];
 80025ba:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	1e4b      	subs	r3, r1, #1
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
 80025c4:	460a      	mov	r2, r1
 80025c6:	2300      	movs	r3, #0
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	00eb      	lsls	r3, r5, #3
 80025d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025da:	00e2      	lsls	r2, r4, #3
 80025dc:	460a      	mov	r2, r1
 80025de:	2300      	movs	r3, #0
 80025e0:	613a      	str	r2, [r7, #16]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025f0:	4628      	mov	r0, r5
 80025f2:	00c3      	lsls	r3, r0, #3
 80025f4:	4620      	mov	r0, r4
 80025f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025fa:	4620      	mov	r0, r4
 80025fc:	00c2      	lsls	r2, r0, #3
 80025fe:	460b      	mov	r3, r1
 8002600:	3307      	adds	r3, #7
 8002602:	08db      	lsrs	r3, r3, #3
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	ebad 0d03 	sub.w	sp, sp, r3
 800260a:	466b      	mov	r3, sp
 800260c:	3300      	adds	r3, #0
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mem_pass[pass_len+1];
 8002610:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002614:	1c59      	adds	r1, r3, #1
 8002616:	1e4b      	subs	r3, r1, #1
 8002618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261a:	460a      	mov	r2, r1
 800261c:	2300      	movs	r3, #0
 800261e:	60ba      	str	r2, [r7, #8]
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800262e:	4628      	mov	r0, r5
 8002630:	00c3      	lsls	r3, r0, #3
 8002632:	4620      	mov	r0, r4
 8002634:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002638:	4620      	mov	r0, r4
 800263a:	00c2      	lsls	r2, r0, #3
 800263c:	460a      	mov	r2, r1
 800263e:	2300      	movs	r3, #0
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002650:	4628      	mov	r0, r5
 8002652:	00c3      	lsls	r3, r0, #3
 8002654:	4620      	mov	r0, r4
 8002656:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800265a:	4620      	mov	r0, r4
 800265c:	00c2      	lsls	r2, r0, #3
 800265e:	460b      	mov	r3, r1
 8002660:	3307      	adds	r3, #7
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	ebad 0d03 	sub.w	sp, sp, r3
 800266a:	466b      	mov	r3, sp
 800266c:	3300      	adds	r3, #0
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t mem_ip[ip_len+1];
 8002670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002674:	1c59      	adds	r1, r3, #1
 8002676:	1e4b      	subs	r3, r1, #1
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
 800267a:	460a      	mov	r2, r1
 800267c:	2300      	movs	r3, #0
 800267e:	4692      	mov	sl, r2
 8002680:	469b      	mov	fp, r3
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800268e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002696:	460a      	mov	r2, r1
 8002698:	2300      	movs	r3, #0
 800269a:	4690      	mov	r8, r2
 800269c:	4699      	mov	r9, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b2:	460b      	mov	r3, r1
 80026b4:	3307      	adds	r3, #7
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	ebad 0d03 	sub.w	sp, sp, r3
 80026be:	466b      	mov	r3, sp
 80026c0:	3300      	adds	r3, #0
 80026c2:	643b      	str	r3, [r7, #64]	; 0x40
	memcpy(mem_ssid, ssid, ssid_len);
 80026c4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80026c8:	461a      	mov	r2, r3
 80026ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80026ce:	f008 facf 	bl	800ac70 <memcpy>
	memcpy(mem_pass, pass, pass_len);
 80026d2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026dc:	f008 fac8 	bl	800ac70 <memcpy>
	memcpy(mem_ip, ip, ip_len);
 80026e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026e4:	461a      	mov	r2, r3
 80026e6:	69f9      	ldr	r1, [r7, #28]
 80026e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026ea:	f008 fac1 	bl	800ac70 <memcpy>
	uint32_t store = (ssid_len<<16) | pass_len;
 80026ee:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80026f8:	4313      	orrs	r3, r2
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, store);
 80026fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026fe:	2105      	movs	r1, #5
 8002700:	4853      	ldr	r0, [pc, #332]	; (8002850 <save_ssid+0x2cc>)
 8002702:	f006 fbdb 	bl	8008ebc <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR19, (uint32_t) ip_len);
 8002706:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800270a:	461a      	mov	r2, r3
 800270c:	2113      	movs	r1, #19
 800270e:	4850      	ldr	r0, [pc, #320]	; (8002850 <save_ssid+0x2cc>)
 8002710:	f006 fbd4 	bl	8008ebc <HAL_RTCEx_BKUPWrite>
	for(int i=0; i<((ssid_len+3)/4); i++){
 8002714:	2300      	movs	r3, #0
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
 8002718:	e023      	b.n	8002762 <save_ssid+0x1de>
		uint32_t temp = ((mem_ssid[4*i])<<24)|(mem_ssid[4*i+1]<<16)|(mem_ssid[4*i+2]<<8)|(mem_ssid[4*i+3]);
 800271a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	061a      	lsls	r2, r3, #24
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	3301      	adds	r3, #1
 800272a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	4313      	orrs	r3, r2
 8002740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	3203      	adds	r2, #3
 8002746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002748:	5c8a      	ldrb	r2, [r1, r2]
 800274a:	4313      	orrs	r3, r2
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    HAL_RTCEx_BKUPWrite(&hrtc, (0x06U+(0x01U*i)), temp);
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	3306      	adds	r3, #6
 8002752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	483e      	ldr	r0, [pc, #248]	; (8002850 <save_ssid+0x2cc>)
 8002758:	f006 fbb0 	bl	8008ebc <HAL_RTCEx_BKUPWrite>
	for(int i=0; i<((ssid_len+3)/4); i++){
 800275c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800275e:	3301      	adds	r3, #1
 8002760:	65bb      	str	r3, [r7, #88]	; 0x58
 8002762:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002766:	3303      	adds	r3, #3
 8002768:	2b00      	cmp	r3, #0
 800276a:	da00      	bge.n	800276e <save_ssid+0x1ea>
 800276c:	3303      	adds	r3, #3
 800276e:	109b      	asrs	r3, r3, #2
 8002770:	461a      	mov	r2, r3
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	4293      	cmp	r3, r2
 8002776:	dbd0      	blt.n	800271a <save_ssid+0x196>
	}
	for(int i=0; i<((pass_len+3)/4); i++){
 8002778:	2300      	movs	r3, #0
 800277a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277c:	e023      	b.n	80027c6 <save_ssid+0x242>
		uint32_t temp = (mem_pass[4*i]<<24)|(mem_pass[4*i+1]<<16)|(mem_pass[4*i+2]<<8)|(mem_pass[4*i+3]);
 800277e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	061a      	lsls	r2, r3, #24
 8002788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3301      	adds	r3, #1
 800278e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	431a      	orrs	r2, r3
 8002796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	4313      	orrs	r3, r2
 80027a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	3203      	adds	r2, #3
 80027aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027ac:	5c8a      	ldrb	r2, [r1, r2]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
	    HAL_RTCEx_BKUPWrite(&hrtc, (0x0CU+(0x01U*i)), temp);
 80027b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b4:	330c      	adds	r3, #12
 80027b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b8:	4619      	mov	r1, r3
 80027ba:	4825      	ldr	r0, [pc, #148]	; (8002850 <save_ssid+0x2cc>)
 80027bc:	f006 fb7e 	bl	8008ebc <HAL_RTCEx_BKUPWrite>
	for(int i=0; i<((pass_len+3)/4); i++){
 80027c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c2:	3301      	adds	r3, #1
 80027c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80027ca:	3303      	adds	r3, #3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	da00      	bge.n	80027d2 <save_ssid+0x24e>
 80027d0:	3303      	adds	r3, #3
 80027d2:	109b      	asrs	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	4293      	cmp	r3, r2
 80027da:	dbd0      	blt.n	800277e <save_ssid+0x1fa>
	}
	for(int i=0; i<((ip_len+3)/4); i++){
 80027dc:	2300      	movs	r3, #0
 80027de:	663b      	str	r3, [r7, #96]	; 0x60
 80027e0:	e023      	b.n	800282a <save_ssid+0x2a6>
		uint32_t temp = (mem_ip[4*i]<<24)|(mem_ip[4*i+1]<<16)|(mem_ip[4*i+2]<<8)|(mem_ip[4*i+3]);
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	061a      	lsls	r2, r3, #24
 80027ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3301      	adds	r3, #1
 80027f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4313      	orrs	r3, r2
 8002808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	3203      	adds	r2, #3
 800280e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002810:	5c8a      	ldrb	r2, [r1, r2]
 8002812:	4313      	orrs	r3, r2
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_RTCEx_BKUPWrite(&hrtc, (0x01U+(0x01U*i)), temp);
 8002816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002818:	3301      	adds	r3, #1
 800281a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281c:	4619      	mov	r1, r3
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <save_ssid+0x2cc>)
 8002820:	f006 fb4c 	bl	8008ebc <HAL_RTCEx_BKUPWrite>
	for(int i=0; i<((ip_len+3)/4); i++){
 8002824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002826:	3301      	adds	r3, #1
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
 800282a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800282e:	3303      	adds	r3, #3
 8002830:	2b00      	cmp	r3, #0
 8002832:	da00      	bge.n	8002836 <save_ssid+0x2b2>
 8002834:	3303      	adds	r3, #3
 8002836:	109b      	asrs	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283c:	4293      	cmp	r3, r2
 800283e:	dbd0      	blt.n	80027e2 <save_ssid+0x25e>
	}
	int i=1;
 8002840:	2301      	movs	r3, #1
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	46b5      	mov	sp, r6

}
 8002846:	bf00      	nop
 8002848:	376c      	adds	r7, #108	; 0x6c
 800284a:	46bd      	mov	sp, r7
 800284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002850:	20001050 	.word	0x20001050

08002854 <read_ssid>:
void read_ssid(){
 8002854:	b580      	push	{r7, lr}
 8002856:	b08e      	sub	sp, #56	; 0x38
 8002858:	af00      	add	r7, sp, #0

	uint32_t store= HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 800285a:	2105      	movs	r1, #5
 800285c:	4875      	ldr	r0, [pc, #468]	; (8002a34 <read_ssid+0x1e0>)
 800285e:	f006 fb47 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 8002862:	61f8      	str	r0, [r7, #28]
	uint32_t ssid_len=store>>16;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	61bb      	str	r3, [r7, #24]
	uint32_t pass_len=store&0xff;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	617b      	str	r3, [r7, #20]
	uint32_t ip_len= HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR19);
 8002870:	2113      	movs	r1, #19
 8002872:	4870      	ldr	r0, [pc, #448]	; (8002a34 <read_ssid+0x1e0>)
 8002874:	f006 fb3c 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 8002878:	6138      	str	r0, [r7, #16]
	for(int i=0; i<((ssid_len+3)/4); i++){
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
 800287e:	e027      	b.n	80028d0 <read_ssid+0x7c>
		uint32_t temp = HAL_RTCEx_BKUPRead(&hrtc, (0x06U+(0x01U*i)));
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	3306      	adds	r3, #6
 8002884:	4619      	mov	r1, r3
 8002886:	486b      	ldr	r0, [pc, #428]	; (8002a34 <read_ssid+0x1e0>)
 8002888:	f006 fb32 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 800288c:	6078      	str	r0, [r7, #4]
		wifi_ssid[0][4*i]=(temp>>24)&0xff;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0e1a      	lsrs	r2, r3, #24
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	b2d1      	uxtb	r1, r2
 8002898:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <read_ssid+0x1e4>)
 800289a:	54d1      	strb	r1, [r2, r3]
		wifi_ssid[0][4*i+1]=(temp>>16)&0xff;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0c1a      	lsrs	r2, r3, #16
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3301      	adds	r3, #1
 80028a6:	b2d1      	uxtb	r1, r2
 80028a8:	4a63      	ldr	r2, [pc, #396]	; (8002a38 <read_ssid+0x1e4>)
 80028aa:	54d1      	strb	r1, [r2, r3]
		wifi_ssid[0][4*i+2]=(temp>>8)&0xff;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0a1a      	lsrs	r2, r3, #8
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	b2d1      	uxtb	r1, r2
 80028b8:	4a5f      	ldr	r2, [pc, #380]	; (8002a38 <read_ssid+0x1e4>)
 80028ba:	54d1      	strb	r1, [r2, r3]
		wifi_ssid[0][4*i+3]=temp&0xff;
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	3303      	adds	r3, #3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	b2d1      	uxtb	r1, r2
 80028c6:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <read_ssid+0x1e4>)
 80028c8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<((ssid_len+3)/4); i++){
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	3301      	adds	r3, #1
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	3303      	adds	r3, #3
 80028d4:	089a      	lsrs	r2, r3, #2
 80028d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8d1      	bhi.n	8002880 <read_ssid+0x2c>
	}
	for(int i=0; i<((pass_len+3)/4); i++){
 80028dc:	2300      	movs	r3, #0
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
 80028e0:	e033      	b.n	800294a <read_ssid+0xf6>
		uint32_t temp = HAL_RTCEx_BKUPRead(&hrtc, (0x0CU+(0x01U*i)));
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	330c      	adds	r3, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4852      	ldr	r0, [pc, #328]	; (8002a34 <read_ssid+0x1e0>)
 80028ea:	f006 fb01 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 80028ee:	60b8      	str	r0, [r7, #8]
		wifi_ssid[1][4*i]=(temp>>24)&0xff;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0e1a      	lsrs	r2, r3, #24
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	b2d1      	uxtb	r1, r2
 80028fa:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <read_ssid+0x1e4>)
 80028fc:	4413      	add	r3, r2
 80028fe:	460a      	mov	r2, r1
 8002900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		wifi_ssid[1][4*i+1]=(temp>>16)&0xff;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0c1a      	lsrs	r2, r3, #16
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3301      	adds	r3, #1
 800290e:	b2d1      	uxtb	r1, r2
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <read_ssid+0x1e4>)
 8002912:	4413      	add	r3, r2
 8002914:	460a      	mov	r2, r1
 8002916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		wifi_ssid[1][4*i+2]=(temp>>8)&0xff;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0a1a      	lsrs	r2, r3, #8
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	b2d1      	uxtb	r1, r2
 8002926:	4a44      	ldr	r2, [pc, #272]	; (8002a38 <read_ssid+0x1e4>)
 8002928:	4413      	add	r3, r2
 800292a:	460a      	mov	r2, r1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		wifi_ssid[1][4*i+3]=temp&0xff;
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3303      	adds	r3, #3
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	b2d1      	uxtb	r1, r2
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <read_ssid+0x1e4>)
 800293c:	4413      	add	r3, r2
 800293e:	460a      	mov	r2, r1
 8002940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for(int i=0; i<((pass_len+3)/4); i++){
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	3301      	adds	r3, #1
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3303      	adds	r3, #3
 800294e:	089a      	lsrs	r2, r3, #2
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	429a      	cmp	r2, r3
 8002954:	d8c5      	bhi.n	80028e2 <read_ssid+0x8e>
	}
	for(int i=0; i<((ip_len+3)/4); i++){
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	e033      	b.n	80029c4 <read_ssid+0x170>
		uint32_t temp = HAL_RTCEx_BKUPRead(&hrtc, (0x01U+(0x01U*i)));
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	3301      	adds	r3, #1
 8002960:	4619      	mov	r1, r3
 8002962:	4834      	ldr	r0, [pc, #208]	; (8002a34 <read_ssid+0x1e0>)
 8002964:	f006 fac4 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 8002968:	60f8      	str	r0, [r7, #12]
		wifi_ssid[2][4*i]=(temp>>24)&0xff;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0e1a      	lsrs	r2, r3, #24
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	b2d1      	uxtb	r1, r2
 8002974:	4a30      	ldr	r2, [pc, #192]	; (8002a38 <read_ssid+0x1e4>)
 8002976:	4413      	add	r3, r2
 8002978:	460a      	mov	r2, r1
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		wifi_ssid[2][4*i+1]=(temp>>16)&0xff;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0c1a      	lsrs	r2, r3, #16
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	3301      	adds	r3, #1
 8002988:	b2d1      	uxtb	r1, r2
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <read_ssid+0x1e4>)
 800298c:	4413      	add	r3, r2
 800298e:	460a      	mov	r2, r1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		wifi_ssid[2][4*i+2]=(temp>>8)&0xff;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0a1a      	lsrs	r2, r3, #8
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	b2d1      	uxtb	r1, r2
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <read_ssid+0x1e4>)
 80029a2:	4413      	add	r3, r2
 80029a4:	460a      	mov	r2, r1
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		wifi_ssid[2][4*i+3]=temp&0xff;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3303      	adds	r3, #3
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	b2d1      	uxtb	r1, r2
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <read_ssid+0x1e4>)
 80029b6:	4413      	add	r3, r2
 80029b8:	460a      	mov	r2, r1
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for(int i=0; i<((ip_len+3)/4); i++){
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	3303      	adds	r3, #3
 80029c8:	089a      	lsrs	r2, r3, #2
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8c5      	bhi.n	800295c <read_ssid+0x108>
	}
	for(int i=ssid_len;i<33;i++){
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	e007      	b.n	80029e6 <read_ssid+0x192>
		wifi_ssid[0][i]='\0';
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <read_ssid+0x1e4>)
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
	for(int i=ssid_len;i<33;i++){
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	3301      	adds	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	ddf4      	ble.n	80029d6 <read_ssid+0x182>
	}
	for(int i=pass_len;i<33;i++){
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e008      	b.n	8002a04 <read_ssid+0x1b0>
		wifi_ssid[1][i]='\0';
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <read_ssid+0x1e4>)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	4413      	add	r3, r2
 80029f8:	3321      	adds	r3, #33	; 0x21
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
	for(int i=pass_len;i<33;i++){
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	ddf3      	ble.n	80029f2 <read_ssid+0x19e>
	}
	for(int i=ip_len;i<33;i++){
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	e008      	b.n	8002a22 <read_ssid+0x1ce>
		wifi_ssid[2][i]='\0';
 8002a10:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <read_ssid+0x1e4>)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	4413      	add	r3, r2
 8002a16:	3342      	adds	r3, #66	; 0x42
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
	for(int i=ip_len;i<33;i++){
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	ddf3      	ble.n	8002a10 <read_ssid+0x1bc>
	}

}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3738      	adds	r7, #56	; 0x38
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20001050 	.word	0x20001050
 8002a38:	20000ad0 	.word	0x20000ad0

08002a3c <load_msg>:
-wifi_reset- to reset ESP8266 device, used between changes of working mode and in case of communication failure
-chabge_wifi- to change from direct mode to indirect and to switch between AP's in direct mode
*/

//communication thought local wi-fi network
void load_msg(){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0

	tab_polecenie[0].time_init= 0;
 8002a40:	4ba5      	ldr	r3, [pc, #660]	; (8002cd8 <load_msg+0x29c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]
	sprintf(tab_polecenie[0].msg,"AT+CWMODE=1\r\n");
 8002a46:	49a5      	ldr	r1, [pc, #660]	; (8002cdc <load_msg+0x2a0>)
 8002a48:	48a5      	ldr	r0, [pc, #660]	; (8002ce0 <load_msg+0x2a4>)
 8002a4a:	f008 fd91 	bl	800b570 <siprintf>
	tab_polecenie[0].time_response = 4000;
 8002a4e:	4ba2      	ldr	r3, [pc, #648]	; (8002cd8 <load_msg+0x29c>)
 8002a50:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002a54:	87da      	strh	r2, [r3, #62]	; 0x3e
	sprintf(tab_polecenie[0].rsp,"OK\r");
 8002a56:	49a3      	ldr	r1, [pc, #652]	; (8002ce4 <load_msg+0x2a8>)
 8002a58:	48a3      	ldr	r0, [pc, #652]	; (8002ce8 <load_msg+0x2ac>)
 8002a5a:	f008 fd89 	bl	800b570 <siprintf>
	tab_polecenie[0].powrot.etap =0;
 8002a5e:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <load_msg+0x29c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	tab_polecenie[0].powrot.krok =0;
 8002a66:	4b9c      	ldr	r3, [pc, #624]	; (8002cd8 <load_msg+0x29c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	tab_polecenie[0].time_exit =0;
 8002a6e:	4b9a      	ldr	r3, [pc, #616]	; (8002cd8 <load_msg+0x29c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	tab_polecenie[0].iter =2;
 8002a76:	4b98      	ldr	r3, [pc, #608]	; (8002cd8 <load_msg+0x29c>)
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	tab_polecenie[0].terminate =0;
 8002a7e:	4b96      	ldr	r3, [pc, #600]	; (8002cd8 <load_msg+0x29c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	tab_polecenie[1].time_init=0;
 8002a86:	4b94      	ldr	r3, [pc, #592]	; (8002cd8 <load_msg+0x29c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sprintf(tab_polecenie[1].msg,"AT+CIPMUX=1\r\n");
 8002a8e:	4997      	ldr	r1, [pc, #604]	; (8002cec <load_msg+0x2b0>)
 8002a90:	4897      	ldr	r0, [pc, #604]	; (8002cf0 <load_msg+0x2b4>)
 8002a92:	f008 fd6d 	bl	800b570 <siprintf>
	tab_polecenie[1].time_response = 4000;
 8002a96:	4b90      	ldr	r3, [pc, #576]	; (8002cd8 <load_msg+0x29c>)
 8002a98:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002a9c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	sprintf(tab_polecenie[1].rsp,"OK\r");
 8002aa0:	4990      	ldr	r1, [pc, #576]	; (8002ce4 <load_msg+0x2a8>)
 8002aa2:	4894      	ldr	r0, [pc, #592]	; (8002cf4 <load_msg+0x2b8>)
 8002aa4:	f008 fd64 	bl	800b570 <siprintf>
	tab_polecenie[1].powrot.etap = 0;
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <load_msg+0x29c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	tab_polecenie[1].powrot.krok = 0;
 8002ab0:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <load_msg+0x29c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
	tab_polecenie[1].time_exit = 0;
 8002ab8:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <load_msg+0x29c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	tab_polecenie[1].iter =3;
 8002ac0:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <load_msg+0x29c>)
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tab_polecenie[1].terminate =0;
 8002ac8:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <load_msg+0x29c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7

	tab_polecenie[2].time_init=200;
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <load_msg+0x29c>)
 8002ad2:	22c8      	movs	r2, #200	; 0xc8
 8002ad4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	sprintf(tab_polecenie[2].msg,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", wifi_ssid[0], wifi_ssid[1]);
 8002ad8:	4b87      	ldr	r3, [pc, #540]	; (8002cf8 <load_msg+0x2bc>)
 8002ada:	4a88      	ldr	r2, [pc, #544]	; (8002cfc <load_msg+0x2c0>)
 8002adc:	4988      	ldr	r1, [pc, #544]	; (8002d00 <load_msg+0x2c4>)
 8002ade:	4889      	ldr	r0, [pc, #548]	; (8002d04 <load_msg+0x2c8>)
 8002ae0:	f008 fd46 	bl	800b570 <siprintf>
	tab_polecenie[2].time_response = 24000;
 8002ae4:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <load_msg+0x29c>)
 8002ae6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8002aea:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	sprintf(tab_polecenie[2].rsp,"OK\r");
 8002aee:	497d      	ldr	r1, [pc, #500]	; (8002ce4 <load_msg+0x2a8>)
 8002af0:	4885      	ldr	r0, [pc, #532]	; (8002d08 <load_msg+0x2cc>)
 8002af2:	f008 fd3d 	bl	800b570 <siprintf>
	tab_polecenie[2].powrot.etap = 2;
 8002af6:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <load_msg+0x29c>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	tab_polecenie[2].powrot.krok = 0;
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <load_msg+0x29c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
	tab_polecenie[2].time_exit = 500;
 8002b06:	4b74      	ldr	r3, [pc, #464]	; (8002cd8 <load_msg+0x29c>)
 8002b08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b0c:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	tab_polecenie[2].iter =3;
 8002b10:	4b71      	ldr	r3, [pc, #452]	; (8002cd8 <load_msg+0x29c>)
 8002b12:	2203      	movs	r2, #3
 8002b14:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	tab_polecenie[2].terminate =0;
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <load_msg+0x29c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113


	tab_polecenie[3].time_init=0;
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <load_msg+0x29c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	sprintf(tab_polecenie[3].msg,"AT+CIPSTART=0,\"TCP\",\"%s\",80\r\n", wifi_ssid[2]);
 8002b28:	4a78      	ldr	r2, [pc, #480]	; (8002d0c <load_msg+0x2d0>)
 8002b2a:	4979      	ldr	r1, [pc, #484]	; (8002d10 <load_msg+0x2d4>)
 8002b2c:	4879      	ldr	r0, [pc, #484]	; (8002d14 <load_msg+0x2d8>)
 8002b2e:	f008 fd1f 	bl	800b570 <siprintf>
	tab_polecenie[3].time_response =10000;
 8002b32:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <load_msg+0x29c>)
 8002b34:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b38:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
	sprintf(tab_polecenie[3].rsp,"CON");
 8002b3c:	4976      	ldr	r1, [pc, #472]	; (8002d18 <load_msg+0x2dc>)
 8002b3e:	4877      	ldr	r0, [pc, #476]	; (8002d1c <load_msg+0x2e0>)
 8002b40:	f008 fd16 	bl	800b570 <siprintf>
	tab_polecenie[3].powrot.etap =2;
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <load_msg+0x29c>)
 8002b46:	2202      	movs	r2, #2
 8002b48:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	tab_polecenie[3].powrot.krok =0;
 8002b4c:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <load_msg+0x29c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tab_polecenie[3].time_exit =0;
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <load_msg+0x29c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	tab_polecenie[3].iter =3;
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <load_msg+0x29c>)
 8002b5e:	2203      	movs	r2, #3
 8002b60:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
	tab_polecenie[3].terminate =0;
 8002b64:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <load_msg+0x29c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f

	tab_polecenie[4].time_init= 8000;
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <load_msg+0x29c>)
 8002b6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b72:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
	//sprintf(tab_polecenie[4].msg,"AT+CIPSEND=%d,%i\r\n");
	tab_polecenie[4].time_response = 8000;
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <load_msg+0x29c>)
 8002b78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b7c:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
	sprintf(tab_polecenie[4].rsp,"OK\r");
 8002b80:	4958      	ldr	r1, [pc, #352]	; (8002ce4 <load_msg+0x2a8>)
 8002b82:	4867      	ldr	r0, [pc, #412]	; (8002d20 <load_msg+0x2e4>)
 8002b84:	f008 fcf4 	bl	800b570 <siprintf>
	tab_polecenie[4].powrot.etap =2;
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <load_msg+0x29c>)
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	tab_polecenie[4].powrot.krok =0;
 8002b90:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <load_msg+0x29c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	tab_polecenie[4].time_exit =0;
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <load_msg+0x29c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
	tab_polecenie[4].iter =2;
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <load_msg+0x29c>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tab_polecenie[4].terminate =0;
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <load_msg+0x29c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb

	tab_polecenie[5].time_init=0;
 8002bb0:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <load_msg+0x29c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	//sprintf(tab_polecenie[5].msg,"%s:W%s:T%s:P\r\n");
	tab_polecenie[5].time_response = 15000;
 8002bb8:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <load_msg+0x29c>)
 8002bba:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002bbe:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	sprintf(tab_polecenie[5].rsp,"GIT");
 8002bc2:	4958      	ldr	r1, [pc, #352]	; (8002d24 <load_msg+0x2e8>)
 8002bc4:	4858      	ldr	r0, [pc, #352]	; (8002d28 <load_msg+0x2ec>)
 8002bc6:	f008 fcd3 	bl	800b570 <siprintf>
	tab_polecenie[5].powrot.etap = 2;
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <load_msg+0x29c>)
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
	tab_polecenie[5].powrot.krok = 0;
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <load_msg+0x29c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
	tab_polecenie[5].time_exit = 200;
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <load_msg+0x29c>)
 8002bdc:	22c8      	movs	r2, #200	; 0xc8
 8002bde:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	tab_polecenie[5].iter =3;
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <load_msg+0x29c>)
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
	tab_polecenie[5].terminate =0;
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <load_msg+0x29c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227

	tab_polecenie[6].time_init=0;
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <load_msg+0x29c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
	//sprintf(tab_polecenie[6].msg,"AT+CIPCLOSE=%d\r\n");
	tab_polecenie[6].time_response =6000;
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <load_msg+0x29c>)
 8002bfc:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c00:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
	sprintf(tab_polecenie[6].rsp,"OK\r");
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <load_msg+0x2a8>)
 8002c06:	4849      	ldr	r0, [pc, #292]	; (8002d2c <load_msg+0x2f0>)
 8002c08:	f008 fcb2 	bl	800b570 <siprintf>
	tab_polecenie[6].powrot.etap =3;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <load_msg+0x29c>)
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	tab_polecenie[6].powrot.krok =0;
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <load_msg+0x29c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
	tab_polecenie[6].time_exit =500;
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <load_msg+0x29c>)
 8002c1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c22:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	tab_polecenie[6].iter =20;
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <load_msg+0x29c>)
 8002c28:	2214      	movs	r2, #20
 8002c2a:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
	tab_polecenie[6].terminate =1;
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <load_msg+0x29c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283

	if(wifi_set){
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <load_msg+0x2f4>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04a      	beq.n	8002cd4 <load_msg+0x298>

		tab_polecenie[6].time_init=0;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <load_msg+0x29c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
		sprintf(tab_polecenie[6].msg,"AT+CIPSEND=0,3\r\n");
 8002c46:	493b      	ldr	r1, [pc, #236]	; (8002d34 <load_msg+0x2f8>)
 8002c48:	483b      	ldr	r0, [pc, #236]	; (8002d38 <load_msg+0x2fc>)
 8002c4a:	f008 fc91 	bl	800b570 <siprintf>
		tab_polecenie[6].time_response =6000;
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <load_msg+0x29c>)
 8002c50:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c54:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
		sprintf(tab_polecenie[6].rsp,"OK\r");
 8002c58:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <load_msg+0x2a8>)
 8002c5a:	4834      	ldr	r0, [pc, #208]	; (8002d2c <load_msg+0x2f0>)
 8002c5c:	f008 fc88 	bl	800b570 <siprintf>
		tab_polecenie[6].powrot.etap =3;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <load_msg+0x29c>)
 8002c62:	2203      	movs	r2, #3
 8002c64:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
		tab_polecenie[6].powrot.krok =0;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <load_msg+0x29c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
		tab_polecenie[6].time_exit =100;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <load_msg+0x29c>)
 8002c72:	2264      	movs	r2, #100	; 0x64
 8002c74:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
		tab_polecenie[6].iter =1;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <load_msg+0x29c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		tab_polecenie[6].terminate =0;
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <load_msg+0x29c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283

		tab_polecenie[7].time_init=0;
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <load_msg+0x29c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
		sprintf(tab_polecenie[7].msg,"#GT\r\n");
 8002c90:	492a      	ldr	r1, [pc, #168]	; (8002d3c <load_msg+0x300>)
 8002c92:	482b      	ldr	r0, [pc, #172]	; (8002d40 <load_msg+0x304>)
 8002c94:	f008 fc6c 	bl	800b570 <siprintf>
		tab_polecenie[7].time_response =30000;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <load_msg+0x29c>)
 8002c9a:	f247 5230 	movw	r2, #30000	; 0x7530
 8002c9e:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
		sprintf(tab_polecenie[7].rsp,"OK\r");
 8002ca2:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <load_msg+0x2a8>)
 8002ca4:	4827      	ldr	r0, [pc, #156]	; (8002d44 <load_msg+0x308>)
 8002ca6:	f008 fc63 	bl	800b570 <siprintf>
		tab_polecenie[7].powrot.etap =2;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <load_msg+0x29c>)
 8002cac:	2202      	movs	r2, #2
 8002cae:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
		tab_polecenie[7].powrot.krok =0;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <load_msg+0x29c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
		tab_polecenie[7].time_exit =500;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <load_msg+0x29c>)
 8002cbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cc0:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
		tab_polecenie[7].iter =2;
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <load_msg+0x29c>)
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
		tab_polecenie[7].terminate =1;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <load_msg+0x29c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
	}

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000b60 	.word	0x20000b60
 8002cdc:	0800dbb0 	.word	0x0800dbb0
 8002ce0:	20000b62 	.word	0x20000b62
 8002ce4:	0800dbc0 	.word	0x0800dbc0
 8002ce8:	20000ba0 	.word	0x20000ba0
 8002cec:	0800dbc4 	.word	0x0800dbc4
 8002cf0:	20000bbe 	.word	0x20000bbe
 8002cf4:	20000bfc 	.word	0x20000bfc
 8002cf8:	20000af1 	.word	0x20000af1
 8002cfc:	20000ad0 	.word	0x20000ad0
 8002d00:	0800dbd4 	.word	0x0800dbd4
 8002d04:	20000c1a 	.word	0x20000c1a
 8002d08:	20000c58 	.word	0x20000c58
 8002d0c:	20000b12 	.word	0x20000b12
 8002d10:	0800dbf0 	.word	0x0800dbf0
 8002d14:	20000c76 	.word	0x20000c76
 8002d18:	0800dc10 	.word	0x0800dc10
 8002d1c:	20000cb4 	.word	0x20000cb4
 8002d20:	20000d10 	.word	0x20000d10
 8002d24:	0800dc14 	.word	0x0800dc14
 8002d28:	20000d6c 	.word	0x20000d6c
 8002d2c:	20000dc8 	.word	0x20000dc8
 8002d30:	20000a68 	.word	0x20000a68
 8002d34:	0800dc18 	.word	0x0800dc18
 8002d38:	20000d8a 	.word	0x20000d8a
 8002d3c:	0800dc2c 	.word	0x0800dc2c
 8002d40:	20000de6 	.word	0x20000de6
 8002d44:	20000e24 	.word	0x20000e24

08002d48 <load_hotspot>:

//direct communication to control unit AP

void load_hotspot(){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

 	tab_polecenie[0].time_init= 0;
 8002d4c:	4ba4      	ldr	r3, [pc, #656]	; (8002fe0 <load_hotspot+0x298>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	801a      	strh	r2, [r3, #0]
 	sprintf(tab_polecenie[0].msg,"AT+CWMODE=1\r\n");
 8002d52:	49a4      	ldr	r1, [pc, #656]	; (8002fe4 <load_hotspot+0x29c>)
 8002d54:	48a4      	ldr	r0, [pc, #656]	; (8002fe8 <load_hotspot+0x2a0>)
 8002d56:	f008 fc0b 	bl	800b570 <siprintf>
 	tab_polecenie[0].time_response = 4000;
 8002d5a:	4ba1      	ldr	r3, [pc, #644]	; (8002fe0 <load_hotspot+0x298>)
 8002d5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 	sprintf(tab_polecenie[0].rsp,"OK\r");
 8002d62:	49a2      	ldr	r1, [pc, #648]	; (8002fec <load_hotspot+0x2a4>)
 8002d64:	48a2      	ldr	r0, [pc, #648]	; (8002ff0 <load_hotspot+0x2a8>)
 8002d66:	f008 fc03 	bl	800b570 <siprintf>
 	tab_polecenie[0].powrot.etap =0;
 8002d6a:	4b9d      	ldr	r3, [pc, #628]	; (8002fe0 <load_hotspot+0x298>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 	tab_polecenie[0].powrot.krok =0;
 8002d72:	4b9b      	ldr	r3, [pc, #620]	; (8002fe0 <load_hotspot+0x298>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 	tab_polecenie[0].time_exit =200;
 8002d7a:	4b99      	ldr	r3, [pc, #612]	; (8002fe0 <load_hotspot+0x298>)
 8002d7c:	22c8      	movs	r2, #200	; 0xc8
 8002d7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	tab_polecenie[0].iter =2;
 8002d82:	4b97      	ldr	r3, [pc, #604]	; (8002fe0 <load_hotspot+0x298>)
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	tab_polecenie[0].terminate =0;
 8002d8a:	4b95      	ldr	r3, [pc, #596]	; (8002fe0 <load_hotspot+0x298>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

 	tab_polecenie[1].time_init=0;
 8002d92:	4b93      	ldr	r3, [pc, #588]	; (8002fe0 <load_hotspot+0x298>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 	sprintf(tab_polecenie[1].msg,"AT+CIPMUX=1\r\n");
 8002d9a:	4996      	ldr	r1, [pc, #600]	; (8002ff4 <load_hotspot+0x2ac>)
 8002d9c:	4896      	ldr	r0, [pc, #600]	; (8002ff8 <load_hotspot+0x2b0>)
 8002d9e:	f008 fbe7 	bl	800b570 <siprintf>
 	tab_polecenie[1].time_response = 4000;
 8002da2:	4b8f      	ldr	r3, [pc, #572]	; (8002fe0 <load_hotspot+0x298>)
 8002da4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002da8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 	sprintf(tab_polecenie[1].rsp,"OK\r");
 8002dac:	498f      	ldr	r1, [pc, #572]	; (8002fec <load_hotspot+0x2a4>)
 8002dae:	4893      	ldr	r0, [pc, #588]	; (8002ffc <load_hotspot+0x2b4>)
 8002db0:	f008 fbde 	bl	800b570 <siprintf>
 	tab_polecenie[1].powrot.etap = 0;
 8002db4:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <load_hotspot+0x298>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 	tab_polecenie[1].powrot.krok = 0;
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <load_hotspot+0x298>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 	tab_polecenie[1].time_exit = 200;
 8002dc4:	4b86      	ldr	r3, [pc, #536]	; (8002fe0 <load_hotspot+0x298>)
 8002dc6:	22c8      	movs	r2, #200	; 0xc8
 8002dc8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	tab_polecenie[1].iter =2;
 8002dcc:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <load_hotspot+0x298>)
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tab_polecenie[1].terminate =0;
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <load_hotspot+0x298>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7

 	tab_polecenie[2].time_init=2000;
 8002ddc:	4b80      	ldr	r3, [pc, #512]	; (8002fe0 <load_hotspot+0x298>)
 8002dde:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002de2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 	sprintf(tab_polecenie[2].msg,"AT+CWJAP_CUR=\"ESP82661\",\"1234567890\"\r\n");
 8002de6:	4986      	ldr	r1, [pc, #536]	; (8003000 <load_hotspot+0x2b8>)
 8002de8:	4886      	ldr	r0, [pc, #536]	; (8003004 <load_hotspot+0x2bc>)
 8002dea:	f008 fbc1 	bl	800b570 <siprintf>
 	tab_polecenie[2].time_response =60000;
 8002dee:	4b7c      	ldr	r3, [pc, #496]	; (8002fe0 <load_hotspot+0x298>)
 8002df0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002df4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 	sprintf(tab_polecenie[2].rsp,"OK\r");
 8002df8:	497c      	ldr	r1, [pc, #496]	; (8002fec <load_hotspot+0x2a4>)
 8002dfa:	4883      	ldr	r0, [pc, #524]	; (8003008 <load_hotspot+0x2c0>)
 8002dfc:	f008 fbb8 	bl	800b570 <siprintf>
 	tab_polecenie[2].powrot.etap =2;
 8002e00:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <load_hotspot+0x298>)
 8002e02:	2202      	movs	r2, #2
 8002e04:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 	tab_polecenie[2].powrot.krok =0;
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <load_hotspot+0x298>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 	tab_polecenie[2].time_exit =200;
 8002e10:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <load_hotspot+0x298>)
 8002e12:	22c8      	movs	r2, #200	; 0xc8
 8002e14:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	tab_polecenie[2].iter =2;
 8002e18:	4b71      	ldr	r3, [pc, #452]	; (8002fe0 <load_hotspot+0x298>)
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	tab_polecenie[2].terminate =0;
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <load_hotspot+0x298>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	tab_polecenie[3].time_init=500;
 8002e28:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <load_hotspot+0x298>)
 8002e2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e2e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	sprintf(tab_polecenie[3].msg,"AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",80\r\n");
 8002e32:	4976      	ldr	r1, [pc, #472]	; (800300c <load_hotspot+0x2c4>)
 8002e34:	4876      	ldr	r0, [pc, #472]	; (8003010 <load_hotspot+0x2c8>)
 8002e36:	f008 fb9b 	bl	800b570 <siprintf>
	tab_polecenie[3].time_response =10000;
 8002e3a:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <load_hotspot+0x298>)
 8002e3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e40:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
	sprintf(tab_polecenie[3].rsp,"OK\r");
 8002e44:	4969      	ldr	r1, [pc, #420]	; (8002fec <load_hotspot+0x2a4>)
 8002e46:	4873      	ldr	r0, [pc, #460]	; (8003014 <load_hotspot+0x2cc>)
 8002e48:	f008 fb92 	bl	800b570 <siprintf>
	tab_polecenie[3].powrot.etap =2;
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <load_hotspot+0x298>)
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	tab_polecenie[3].powrot.krok =0;
 8002e54:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <load_hotspot+0x298>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tab_polecenie[3].time_exit =0;
 8002e5c:	4b60      	ldr	r3, [pc, #384]	; (8002fe0 <load_hotspot+0x298>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	tab_polecenie[3].iter =2;
 8002e64:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <load_hotspot+0x298>)
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
	tab_polecenie[3].terminate =0;
 8002e6c:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <load_hotspot+0x298>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f

	tab_polecenie[4].time_init= 200;
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <load_hotspot+0x298>)
 8002e76:	22c8      	movs	r2, #200	; 0xc8
 8002e78:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
	//sprintf(tab_polecenie[4].msg,"AT+CIPSEND=%d,%i\r\n");
	tab_polecenie[4].time_response = 8000;
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <load_hotspot+0x298>)
 8002e7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e82:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
	sprintf(tab_polecenie[4].rsp,"OK\r");
 8002e86:	4959      	ldr	r1, [pc, #356]	; (8002fec <load_hotspot+0x2a4>)
 8002e88:	4863      	ldr	r0, [pc, #396]	; (8003018 <load_hotspot+0x2d0>)
 8002e8a:	f008 fb71 	bl	800b570 <siprintf>
	tab_polecenie[4].powrot.etap =2;
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <load_hotspot+0x298>)
 8002e90:	2202      	movs	r2, #2
 8002e92:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	tab_polecenie[4].powrot.krok =0;
 8002e96:	4b52      	ldr	r3, [pc, #328]	; (8002fe0 <load_hotspot+0x298>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	tab_polecenie[4].time_exit =0;
 8002e9e:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <load_hotspot+0x298>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
	tab_polecenie[4].iter =2;
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <load_hotspot+0x298>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tab_polecenie[4].terminate =0;
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <load_hotspot+0x298>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb

	tab_polecenie[5].time_init=0;
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <load_hotspot+0x298>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	//sprintf(tab_polecenie[5].msg,"%s:W%s:T%s:P\r\n");
	tab_polecenie[5].time_response = 15000;
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <load_hotspot+0x298>)
 8002ec0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002ec4:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	sprintf(tab_polecenie[5].rsp,"GIT");
 8002ec8:	4954      	ldr	r1, [pc, #336]	; (800301c <load_hotspot+0x2d4>)
 8002eca:	4855      	ldr	r0, [pc, #340]	; (8003020 <load_hotspot+0x2d8>)
 8002ecc:	f008 fb50 	bl	800b570 <siprintf>
	tab_polecenie[5].powrot.etap = 2;
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <load_hotspot+0x298>)
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
	tab_polecenie[5].powrot.krok = 0;
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <load_hotspot+0x298>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
	tab_polecenie[5].time_exit = 500;
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <load_hotspot+0x298>)
 8002ee2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ee6:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	tab_polecenie[5].iter =2;
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <load_hotspot+0x298>)
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
	tab_polecenie[5].terminate =0;
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <load_hotspot+0x298>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227

	tab_polecenie[6].time_init=0;
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <load_hotspot+0x298>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
	//sprintf(tab_polecenie[6].msg,"AT+CIPCLOSE=%d\r\n");
	tab_polecenie[6].time_response =30000;
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <load_hotspot+0x298>)
 8002f04:	f247 5230 	movw	r2, #30000	; 0x7530
 8002f08:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
	sprintf(tab_polecenie[6].rsp,"OK\r");
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <load_hotspot+0x2a4>)
 8002f0e:	4845      	ldr	r0, [pc, #276]	; (8003024 <load_hotspot+0x2dc>)
 8002f10:	f008 fb2e 	bl	800b570 <siprintf>
	tab_polecenie[6].powrot.etap =2;
 8002f14:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <load_hotspot+0x298>)
 8002f16:	2202      	movs	r2, #2
 8002f18:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	tab_polecenie[6].powrot.krok =0;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <load_hotspot+0x298>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
	tab_polecenie[6].time_exit =500;
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <load_hotspot+0x298>)
 8002f26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f2a:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	tab_polecenie[6].iter =2;
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <load_hotspot+0x298>)
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
	tab_polecenie[6].terminate =1;
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <load_hotspot+0x298>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283

	if(wifi_set){
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <load_hotspot+0x2e0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04a      	beq.n	8002fdc <load_hotspot+0x294>
		tab_polecenie[6].time_init=0;
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <load_hotspot+0x298>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
		sprintf(tab_polecenie[6].msg,"AT+CIPSEND=0,3\r\n");
 8002f4e:	4937      	ldr	r1, [pc, #220]	; (800302c <load_hotspot+0x2e4>)
 8002f50:	4837      	ldr	r0, [pc, #220]	; (8003030 <load_hotspot+0x2e8>)
 8002f52:	f008 fb0d 	bl	800b570 <siprintf>
		tab_polecenie[6].time_response =6000;
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <load_hotspot+0x298>)
 8002f58:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f5c:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
		sprintf(tab_polecenie[6].rsp,"OK\r");
 8002f60:	4922      	ldr	r1, [pc, #136]	; (8002fec <load_hotspot+0x2a4>)
 8002f62:	4830      	ldr	r0, [pc, #192]	; (8003024 <load_hotspot+0x2dc>)
 8002f64:	f008 fb04 	bl	800b570 <siprintf>
		tab_polecenie[6].powrot.etap =3;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <load_hotspot+0x298>)
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
		tab_polecenie[6].powrot.krok =0;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <load_hotspot+0x298>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
		tab_polecenie[6].time_exit =100;
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <load_hotspot+0x298>)
 8002f7a:	2264      	movs	r2, #100	; 0x64
 8002f7c:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
		tab_polecenie[6].iter =1;
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <load_hotspot+0x298>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		tab_polecenie[6].terminate =0;
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <load_hotspot+0x298>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283

		tab_polecenie[7].time_init=0;
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <load_hotspot+0x298>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
		sprintf(tab_polecenie[7].msg,"#GT\r\n");
 8002f98:	4926      	ldr	r1, [pc, #152]	; (8003034 <load_hotspot+0x2ec>)
 8002f9a:	4827      	ldr	r0, [pc, #156]	; (8003038 <load_hotspot+0x2f0>)
 8002f9c:	f008 fae8 	bl	800b570 <siprintf>
		tab_polecenie[7].time_response =30000;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <load_hotspot+0x298>)
 8002fa2:	f247 5230 	movw	r2, #30000	; 0x7530
 8002fa6:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
		sprintf(tab_polecenie[7].rsp,"OK\r");
 8002faa:	4910      	ldr	r1, [pc, #64]	; (8002fec <load_hotspot+0x2a4>)
 8002fac:	4823      	ldr	r0, [pc, #140]	; (800303c <load_hotspot+0x2f4>)
 8002fae:	f008 fadf 	bl	800b570 <siprintf>
		tab_polecenie[7].powrot.etap =2;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <load_hotspot+0x298>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
		tab_polecenie[7].powrot.krok =0;
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <load_hotspot+0x298>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
		tab_polecenie[7].time_exit =500;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <load_hotspot+0x298>)
 8002fc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fc8:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
		tab_polecenie[7].iter =2;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <load_hotspot+0x298>)
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
		tab_polecenie[7].terminate =1;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <load_hotspot+0x298>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
	}
 }
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000b60 	.word	0x20000b60
 8002fe4:	0800dbb0 	.word	0x0800dbb0
 8002fe8:	20000b62 	.word	0x20000b62
 8002fec:	0800dbc0 	.word	0x0800dbc0
 8002ff0:	20000ba0 	.word	0x20000ba0
 8002ff4:	0800dbc4 	.word	0x0800dbc4
 8002ff8:	20000bbe 	.word	0x20000bbe
 8002ffc:	20000bfc 	.word	0x20000bfc
 8003000:	0800dc34 	.word	0x0800dc34
 8003004:	20000c1a 	.word	0x20000c1a
 8003008:	20000c58 	.word	0x20000c58
 800300c:	0800dc5c 	.word	0x0800dc5c
 8003010:	20000c76 	.word	0x20000c76
 8003014:	20000cb4 	.word	0x20000cb4
 8003018:	20000d10 	.word	0x20000d10
 800301c:	0800dc14 	.word	0x0800dc14
 8003020:	20000d6c 	.word	0x20000d6c
 8003024:	20000dc8 	.word	0x20000dc8
 8003028:	20000a68 	.word	0x20000a68
 800302c:	0800dc18 	.word	0x0800dc18
 8003030:	20000d8a 	.word	0x20000d8a
 8003034:	0800dc2c 	.word	0x0800dc2c
 8003038:	20000de6 	.word	0x20000de6
 800303c:	20000e24 	.word	0x20000e24

08003040 <wifi_reset>:

//used to reset ESP8266 device

void wifi_reset(){
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	tab_polecenie[0].time_init= 0;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <wifi_reset+0x50>)
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
	sprintf(tab_polecenie[0].msg,"AT+RST\r\n");
 800304a:	4912      	ldr	r1, [pc, #72]	; (8003094 <wifi_reset+0x54>)
 800304c:	4812      	ldr	r0, [pc, #72]	; (8003098 <wifi_reset+0x58>)
 800304e:	f008 fa8f 	bl	800b570 <siprintf>
	tab_polecenie[0].time_response = 18000;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <wifi_reset+0x50>)
 8003054:	f244 6250 	movw	r2, #18000	; 0x4650
 8003058:	87da      	strh	r2, [r3, #62]	; 0x3e
	sprintf(tab_polecenie[0].rsp,"rea");
 800305a:	4910      	ldr	r1, [pc, #64]	; (800309c <wifi_reset+0x5c>)
 800305c:	4810      	ldr	r0, [pc, #64]	; (80030a0 <wifi_reset+0x60>)
 800305e:	f008 fa87 	bl	800b570 <siprintf>
	tab_polecenie[0].powrot.etap =0;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <wifi_reset+0x50>)
 8003064:	2200      	movs	r2, #0
 8003066:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	tab_polecenie[0].powrot.krok =0;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <wifi_reset+0x50>)
 800306c:	2200      	movs	r2, #0
 800306e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	tab_polecenie[0].time_exit =0;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <wifi_reset+0x50>)
 8003074:	2200      	movs	r2, #0
 8003076:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	tab_polecenie[0].iter =2;
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <wifi_reset+0x50>)
 800307c:	2202      	movs	r2, #2
 800307e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	tab_polecenie[0].terminate =1;
 8003082:	4b03      	ldr	r3, [pc, #12]	; (8003090 <wifi_reset+0x50>)
 8003084:	2201      	movs	r2, #1
 8003086:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000b60 	.word	0x20000b60
 8003094:	0800dc84 	.word	0x0800dc84
 8003098:	20000b62 	.word	0x20000b62
 800309c:	0800dc90 	.word	0x0800dc90
 80030a0:	20000ba0 	.word	0x20000ba0

080030a4 <change_wifi>:

//communication used to change intermediary AP

void change_wifi(){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	tab_polecenie[0].time_init= 0;
 80030a8:	4bc2      	ldr	r3, [pc, #776]	; (80033b4 <change_wifi+0x310>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
 	sprintf(tab_polecenie[0].msg,"AT+CWMODE=1\r\n");
 80030ae:	49c2      	ldr	r1, [pc, #776]	; (80033b8 <change_wifi+0x314>)
 80030b0:	48c2      	ldr	r0, [pc, #776]	; (80033bc <change_wifi+0x318>)
 80030b2:	f008 fa5d 	bl	800b570 <siprintf>
 	tab_polecenie[0].time_response = 4000;
 80030b6:	4bbf      	ldr	r3, [pc, #764]	; (80033b4 <change_wifi+0x310>)
 80030b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80030bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 	sprintf(tab_polecenie[0].rsp,"OK\r");
 80030be:	49c0      	ldr	r1, [pc, #768]	; (80033c0 <change_wifi+0x31c>)
 80030c0:	48c0      	ldr	r0, [pc, #768]	; (80033c4 <change_wifi+0x320>)
 80030c2:	f008 fa55 	bl	800b570 <siprintf>
 	tab_polecenie[0].powrot.etap =0;
 80030c6:	4bbb      	ldr	r3, [pc, #748]	; (80033b4 <change_wifi+0x310>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 	tab_polecenie[0].powrot.krok =0;
 80030ce:	4bb9      	ldr	r3, [pc, #740]	; (80033b4 <change_wifi+0x310>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 	tab_polecenie[0].time_exit =0;
 80030d6:	4bb7      	ldr	r3, [pc, #732]	; (80033b4 <change_wifi+0x310>)
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	tab_polecenie[0].iter =2;
 80030de:	4bb5      	ldr	r3, [pc, #724]	; (80033b4 <change_wifi+0x310>)
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	tab_polecenie[0].terminate =0;
 80030e6:	4bb3      	ldr	r3, [pc, #716]	; (80033b4 <change_wifi+0x310>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

 	tab_polecenie[1].time_init=0;
 80030ee:	4bb1      	ldr	r3, [pc, #708]	; (80033b4 <change_wifi+0x310>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 	sprintf(tab_polecenie[1].msg,"AT+CIPMUX=1\r\n");
 80030f6:	49b4      	ldr	r1, [pc, #720]	; (80033c8 <change_wifi+0x324>)
 80030f8:	48b4      	ldr	r0, [pc, #720]	; (80033cc <change_wifi+0x328>)
 80030fa:	f008 fa39 	bl	800b570 <siprintf>
 	tab_polecenie[1].time_response = 4000;
 80030fe:	4bad      	ldr	r3, [pc, #692]	; (80033b4 <change_wifi+0x310>)
 8003100:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003104:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 	sprintf(tab_polecenie[1].rsp,"OK\r");
 8003108:	49ad      	ldr	r1, [pc, #692]	; (80033c0 <change_wifi+0x31c>)
 800310a:	48b1      	ldr	r0, [pc, #708]	; (80033d0 <change_wifi+0x32c>)
 800310c:	f008 fa30 	bl	800b570 <siprintf>
 	tab_polecenie[1].powrot.etap = 0;
 8003110:	4ba8      	ldr	r3, [pc, #672]	; (80033b4 <change_wifi+0x310>)
 8003112:	2200      	movs	r2, #0
 8003114:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 	tab_polecenie[1].powrot.krok = 0;
 8003118:	4ba6      	ldr	r3, [pc, #664]	; (80033b4 <change_wifi+0x310>)
 800311a:	2200      	movs	r2, #0
 800311c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 	tab_polecenie[1].time_exit = 0;
 8003120:	4ba4      	ldr	r3, [pc, #656]	; (80033b4 <change_wifi+0x310>)
 8003122:	2200      	movs	r2, #0
 8003124:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	tab_polecenie[1].iter =2;
 8003128:	4ba2      	ldr	r3, [pc, #648]	; (80033b4 <change_wifi+0x310>)
 800312a:	2202      	movs	r2, #2
 800312c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tab_polecenie[1].terminate =0;
 8003130:	4ba0      	ldr	r3, [pc, #640]	; (80033b4 <change_wifi+0x310>)
 8003132:	2200      	movs	r2, #0
 8003134:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7

 	tab_polecenie[2].time_init=0;
 8003138:	4b9e      	ldr	r3, [pc, #632]	; (80033b4 <change_wifi+0x310>)
 800313a:	2200      	movs	r2, #0
 800313c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 	sprintf(tab_polecenie[2].msg,"AT+CWJAP_CUR=\"ESP8266_CHANGE\",\"1234567890\"\r\n");
 8003140:	49a4      	ldr	r1, [pc, #656]	; (80033d4 <change_wifi+0x330>)
 8003142:	48a5      	ldr	r0, [pc, #660]	; (80033d8 <change_wifi+0x334>)
 8003144:	f008 fa14 	bl	800b570 <siprintf>
 	tab_polecenie[2].time_response =40000;
 8003148:	4b9a      	ldr	r3, [pc, #616]	; (80033b4 <change_wifi+0x310>)
 800314a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800314e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 	sprintf(tab_polecenie[2].rsp,"OK\r");
 8003152:	499b      	ldr	r1, [pc, #620]	; (80033c0 <change_wifi+0x31c>)
 8003154:	48a1      	ldr	r0, [pc, #644]	; (80033dc <change_wifi+0x338>)
 8003156:	f008 fa0b 	bl	800b570 <siprintf>
 	tab_polecenie[2].powrot.etap =2;
 800315a:	4b96      	ldr	r3, [pc, #600]	; (80033b4 <change_wifi+0x310>)
 800315c:	2202      	movs	r2, #2
 800315e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 	tab_polecenie[2].powrot.krok =0;
 8003162:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <change_wifi+0x310>)
 8003164:	2200      	movs	r2, #0
 8003166:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 	tab_polecenie[2].time_exit =0;
 800316a:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <change_wifi+0x310>)
 800316c:	2200      	movs	r2, #0
 800316e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	tab_polecenie[2].iter =2;
 8003172:	4b90      	ldr	r3, [pc, #576]	; (80033b4 <change_wifi+0x310>)
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	tab_polecenie[2].terminate =0;
 800317a:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <change_wifi+0x310>)
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	tab_polecenie[3].time_init=500;
 8003182:	4b8c      	ldr	r3, [pc, #560]	; (80033b4 <change_wifi+0x310>)
 8003184:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003188:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	sprintf(tab_polecenie[3].msg,"AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",80\r\n");
 800318c:	4994      	ldr	r1, [pc, #592]	; (80033e0 <change_wifi+0x33c>)
 800318e:	4895      	ldr	r0, [pc, #596]	; (80033e4 <change_wifi+0x340>)
 8003190:	f008 f9ee 	bl	800b570 <siprintf>
	tab_polecenie[3].time_response =10000;
 8003194:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <change_wifi+0x310>)
 8003196:	f242 7210 	movw	r2, #10000	; 0x2710
 800319a:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
	sprintf(tab_polecenie[3].rsp,"OK\r");
 800319e:	4988      	ldr	r1, [pc, #544]	; (80033c0 <change_wifi+0x31c>)
 80031a0:	4891      	ldr	r0, [pc, #580]	; (80033e8 <change_wifi+0x344>)
 80031a2:	f008 f9e5 	bl	800b570 <siprintf>
	tab_polecenie[3].powrot.etap =2;
 80031a6:	4b83      	ldr	r3, [pc, #524]	; (80033b4 <change_wifi+0x310>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	tab_polecenie[3].powrot.krok =0;
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <change_wifi+0x310>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tab_polecenie[3].time_exit =0;
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <change_wifi+0x310>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	tab_polecenie[3].iter =2;
 80031be:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <change_wifi+0x310>)
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
	tab_polecenie[3].terminate =0;
 80031c6:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <change_wifi+0x310>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f

	tab_polecenie[4].time_init= 200;
 80031ce:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <change_wifi+0x310>)
 80031d0:	22c8      	movs	r2, #200	; 0xc8
 80031d2:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
	sprintf(tab_polecenie[4].msg,"AT+CIPSEND=0,3\r\n");
 80031d6:	4985      	ldr	r1, [pc, #532]	; (80033ec <change_wifi+0x348>)
 80031d8:	4885      	ldr	r0, [pc, #532]	; (80033f0 <change_wifi+0x34c>)
 80031da:	f008 f9c9 	bl	800b570 <siprintf>
	tab_polecenie[4].time_response = 8000;
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <change_wifi+0x310>)
 80031e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80031e4:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
	sprintf(tab_polecenie[4].rsp,"OK\r");
 80031e8:	4975      	ldr	r1, [pc, #468]	; (80033c0 <change_wifi+0x31c>)
 80031ea:	4882      	ldr	r0, [pc, #520]	; (80033f4 <change_wifi+0x350>)
 80031ec:	f008 f9c0 	bl	800b570 <siprintf>
	tab_polecenie[4].powrot.etap =2;
 80031f0:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <change_wifi+0x310>)
 80031f2:	2202      	movs	r2, #2
 80031f4:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	tab_polecenie[4].powrot.krok =0;
 80031f8:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <change_wifi+0x310>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	tab_polecenie[4].time_exit =0;
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <change_wifi+0x310>)
 8003202:	2200      	movs	r2, #0
 8003204:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
	tab_polecenie[4].iter =2;
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <change_wifi+0x310>)
 800320a:	2202      	movs	r2, #2
 800320c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tab_polecenie[4].terminate =0;
 8003210:	4b68      	ldr	r3, [pc, #416]	; (80033b4 <change_wifi+0x310>)
 8003212:	2200      	movs	r2, #0
 8003214:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb

	tab_polecenie[5].time_init=0;
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <change_wifi+0x310>)
 800321a:	2200      	movs	r2, #0
 800321c:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	sprintf(tab_polecenie[5].msg,"RDY");
 8003220:	4975      	ldr	r1, [pc, #468]	; (80033f8 <change_wifi+0x354>)
 8003222:	4876      	ldr	r0, [pc, #472]	; (80033fc <change_wifi+0x358>)
 8003224:	f008 f9a4 	bl	800b570 <siprintf>
	tab_polecenie[5].time_response = 6000;
 8003228:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <change_wifi+0x310>)
 800322a:	f241 7270 	movw	r2, #6000	; 0x1770
 800322e:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	sprintf(tab_polecenie[5].rsp,"RDY");
 8003232:	4971      	ldr	r1, [pc, #452]	; (80033f8 <change_wifi+0x354>)
 8003234:	4872      	ldr	r0, [pc, #456]	; (8003400 <change_wifi+0x35c>)
 8003236:	f008 f99b 	bl	800b570 <siprintf>
	tab_polecenie[5].powrot.etap = 2;
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <change_wifi+0x310>)
 800323c:	2202      	movs	r2, #2
 800323e:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
	tab_polecenie[5].powrot.krok = 0;
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <change_wifi+0x310>)
 8003244:	2200      	movs	r2, #0
 8003246:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
	tab_polecenie[5].time_exit = 0;
 800324a:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <change_wifi+0x310>)
 800324c:	2200      	movs	r2, #0
 800324e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	tab_polecenie[5].iter =2;
 8003252:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <change_wifi+0x310>)
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
	tab_polecenie[5].terminate =0;
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <change_wifi+0x310>)
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227

	tab_polecenie[6].time_init=0;
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <change_wifi+0x310>)
 8003264:	2200      	movs	r2, #0
 8003266:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
	sprintf(tab_polecenie[6].msg,"AT\r\n");
 800326a:	4966      	ldr	r1, [pc, #408]	; (8003404 <change_wifi+0x360>)
 800326c:	4866      	ldr	r0, [pc, #408]	; (8003408 <change_wifi+0x364>)
 800326e:	f008 f97f 	bl	800b570 <siprintf>
	tab_polecenie[6].time_response =30000;
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <change_wifi+0x310>)
 8003274:	f247 5230 	movw	r2, #30000	; 0x7530
 8003278:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
	sprintf(tab_polecenie[6].rsp,"SSI");
 800327c:	4963      	ldr	r1, [pc, #396]	; (800340c <change_wifi+0x368>)
 800327e:	4864      	ldr	r0, [pc, #400]	; (8003410 <change_wifi+0x36c>)
 8003280:	f008 f976 	bl	800b570 <siprintf>
	tab_polecenie[6].powrot.etap =2;
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <change_wifi+0x310>)
 8003286:	2202      	movs	r2, #2
 8003288:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	tab_polecenie[6].powrot.krok =0;
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <change_wifi+0x310>)
 800328e:	2200      	movs	r2, #0
 8003290:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
	tab_polecenie[6].time_exit =500;
 8003294:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <change_wifi+0x310>)
 8003296:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800329a:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	tab_polecenie[6].iter =2;
 800329e:	4b45      	ldr	r3, [pc, #276]	; (80033b4 <change_wifi+0x310>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
	tab_polecenie[6].terminate =0;
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <change_wifi+0x310>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283

	tab_polecenie[7].time_init=0;
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <change_wifi+0x310>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	sprintf(tab_polecenie[7].msg,"AT\r\n");
 80032b6:	4953      	ldr	r1, [pc, #332]	; (8003404 <change_wifi+0x360>)
 80032b8:	4856      	ldr	r0, [pc, #344]	; (8003414 <change_wifi+0x370>)
 80032ba:	f008 f959 	bl	800b570 <siprintf>
	tab_polecenie[7].time_response =30000;
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <change_wifi+0x310>)
 80032c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80032c4:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
	sprintf(tab_polecenie[7].rsp,"IPI");
 80032c8:	4953      	ldr	r1, [pc, #332]	; (8003418 <change_wifi+0x374>)
 80032ca:	4854      	ldr	r0, [pc, #336]	; (800341c <change_wifi+0x378>)
 80032cc:	f008 f950 	bl	800b570 <siprintf>
	tab_polecenie[7].powrot.etap =2;
 80032d0:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <change_wifi+0x310>)
 80032d2:	2202      	movs	r2, #2
 80032d4:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
	tab_polecenie[7].powrot.krok =0;
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <change_wifi+0x310>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
	tab_polecenie[7].time_exit =1000;
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <change_wifi+0x310>)
 80032e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e6:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	tab_polecenie[7].iter =2;
 80032ea:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <change_wifi+0x310>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
	tab_polecenie[7].terminate=0;
 80032f2:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <change_wifi+0x310>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df

	tab_polecenie[8].time_init=0;
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <change_wifi+0x310>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
	sprintf(tab_polecenie[8].msg,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", wifi_list[0], wifi_list[1]);
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <change_wifi+0x37c>)
 8003304:	4a47      	ldr	r2, [pc, #284]	; (8003424 <change_wifi+0x380>)
 8003306:	4948      	ldr	r1, [pc, #288]	; (8003428 <change_wifi+0x384>)
 8003308:	4848      	ldr	r0, [pc, #288]	; (800342c <change_wifi+0x388>)
 800330a:	f008 f931 	bl	800b570 <siprintf>
	tab_polecenie[8].time_response =40000;
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <change_wifi+0x310>)
 8003310:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003314:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
	sprintf(tab_polecenie[8].rsp,"OK\r");
 8003318:	4929      	ldr	r1, [pc, #164]	; (80033c0 <change_wifi+0x31c>)
 800331a:	4845      	ldr	r0, [pc, #276]	; (8003430 <change_wifi+0x38c>)
 800331c:	f008 f928 	bl	800b570 <siprintf>
	tab_polecenie[8].powrot.etap =8;
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <change_wifi+0x310>)
 8003322:	2208      	movs	r2, #8
 8003324:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	tab_polecenie[8].powrot.krok =0;
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <change_wifi+0x310>)
 800332a:	2200      	movs	r2, #0
 800332c:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
	tab_polecenie[8].time_exit =1000;
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <change_wifi+0x310>)
 8003332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003336:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	tab_polecenie[8].iter =2;
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <change_wifi+0x310>)
 800333c:	2202      	movs	r2, #2
 800333e:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
	tab_polecenie[8].terminate =0;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <change_wifi+0x310>)
 8003344:	2200      	movs	r2, #0
 8003346:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b

	tab_polecenie[9].time_init=500;
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <change_wifi+0x310>)
 800334c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003350:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	sprintf(tab_polecenie[9].msg,"AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", wifi_list[2]);
 8003354:	4a37      	ldr	r2, [pc, #220]	; (8003434 <change_wifi+0x390>)
 8003356:	4938      	ldr	r1, [pc, #224]	; (8003438 <change_wifi+0x394>)
 8003358:	4838      	ldr	r0, [pc, #224]	; (800343c <change_wifi+0x398>)
 800335a:	f008 f909 	bl	800b570 <siprintf>
	tab_polecenie[9].time_response =20000;
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <change_wifi+0x310>)
 8003360:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003364:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
	sprintf(tab_polecenie[9].rsp,"OK\r");
 8003368:	4915      	ldr	r1, [pc, #84]	; (80033c0 <change_wifi+0x31c>)
 800336a:	4835      	ldr	r0, [pc, #212]	; (8003440 <change_wifi+0x39c>)
 800336c:	f008 f900 	bl	800b570 <siprintf>
	tab_polecenie[9].powrot.etap =8;
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <change_wifi+0x310>)
 8003372:	2208      	movs	r2, #8
 8003374:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
	tab_polecenie[9].powrot.krok =0;
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <change_wifi+0x310>)
 800337a:	2200      	movs	r2, #0
 800337c:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
	tab_polecenie[9].time_exit =0;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <change_wifi+0x310>)
 8003382:	2200      	movs	r2, #0
 8003384:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	tab_polecenie[9].iter =3;
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <change_wifi+0x310>)
 800338a:	2203      	movs	r2, #3
 800338c:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
	tab_polecenie[9].terminate =0;
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <change_wifi+0x310>)
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397

	tab_polecenie[10].time_init= 200;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <change_wifi+0x310>)
 800339a:	22c8      	movs	r2, #200	; 0xc8
 800339c:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
	sprintf(tab_polecenie[10].msg,"AT+CIPSEND=1,3\r\n");
 80033a0:	4928      	ldr	r1, [pc, #160]	; (8003444 <change_wifi+0x3a0>)
 80033a2:	4829      	ldr	r0, [pc, #164]	; (8003448 <change_wifi+0x3a4>)
 80033a4:	f008 f8e4 	bl	800b570 <siprintf>
	tab_polecenie[10].time_response = 8000;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <change_wifi+0x310>)
 80033aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80033ae:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
 80033b2:	e04b      	b.n	800344c <change_wifi+0x3a8>
 80033b4:	20000b60 	.word	0x20000b60
 80033b8:	0800dbb0 	.word	0x0800dbb0
 80033bc:	20000b62 	.word	0x20000b62
 80033c0:	0800dbc0 	.word	0x0800dbc0
 80033c4:	20000ba0 	.word	0x20000ba0
 80033c8:	0800dbc4 	.word	0x0800dbc4
 80033cc:	20000bbe 	.word	0x20000bbe
 80033d0:	20000bfc 	.word	0x20000bfc
 80033d4:	0800dc94 	.word	0x0800dc94
 80033d8:	20000c1a 	.word	0x20000c1a
 80033dc:	20000c58 	.word	0x20000c58
 80033e0:	0800dc5c 	.word	0x0800dc5c
 80033e4:	20000c76 	.word	0x20000c76
 80033e8:	20000cb4 	.word	0x20000cb4
 80033ec:	0800dc18 	.word	0x0800dc18
 80033f0:	20000cd2 	.word	0x20000cd2
 80033f4:	20000d10 	.word	0x20000d10
 80033f8:	0800dcc4 	.word	0x0800dcc4
 80033fc:	20000d2e 	.word	0x20000d2e
 8003400:	20000d6c 	.word	0x20000d6c
 8003404:	0800dcc8 	.word	0x0800dcc8
 8003408:	20000d8a 	.word	0x20000d8a
 800340c:	0800dcd0 	.word	0x0800dcd0
 8003410:	20000dc8 	.word	0x20000dc8
 8003414:	20000de6 	.word	0x20000de6
 8003418:	0800dcd4 	.word	0x0800dcd4
 800341c:	20000e24 	.word	0x20000e24
 8003420:	20000a8d 	.word	0x20000a8d
 8003424:	20000a6c 	.word	0x20000a6c
 8003428:	0800dbd4 	.word	0x0800dbd4
 800342c:	20000e42 	.word	0x20000e42
 8003430:	20000e80 	.word	0x20000e80
 8003434:	20000aae 	.word	0x20000aae
 8003438:	0800dcd8 	.word	0x0800dcd8
 800343c:	20000e9e 	.word	0x20000e9e
 8003440:	20000edc 	.word	0x20000edc
 8003444:	0800dcf8 	.word	0x0800dcf8
 8003448:	20000efa 	.word	0x20000efa
	sprintf(tab_polecenie[10].rsp,"OK\r");
 800344c:	491f      	ldr	r1, [pc, #124]	; (80034cc <change_wifi+0x428>)
 800344e:	4820      	ldr	r0, [pc, #128]	; (80034d0 <change_wifi+0x42c>)
 8003450:	f008 f88e 	bl	800b570 <siprintf>
	tab_polecenie[10].powrot.etap =8;
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <change_wifi+0x430>)
 8003456:	2208      	movs	r2, #8
 8003458:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	tab_polecenie[10].powrot.krok =0;
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <change_wifi+0x430>)
 800345e:	2200      	movs	r2, #0
 8003460:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
	tab_polecenie[10].time_exit =0;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <change_wifi+0x430>)
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	tab_polecenie[10].iter =3;
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <change_wifi+0x430>)
 800346e:	2203      	movs	r2, #3
 8003470:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
	tab_polecenie[10].terminate =0;
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <change_wifi+0x430>)
 8003476:	2200      	movs	r2, #0
 8003478:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

	tab_polecenie[11].time_init=0;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <change_wifi+0x430>)
 800347e:	2200      	movs	r2, #0
 8003480:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	sprintf(tab_polecenie[11].msg,"##G");
 8003484:	4914      	ldr	r1, [pc, #80]	; (80034d8 <change_wifi+0x434>)
 8003486:	4815      	ldr	r0, [pc, #84]	; (80034dc <change_wifi+0x438>)
 8003488:	f008 f872 	bl	800b570 <siprintf>
	tab_polecenie[11].time_response = 6000;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <change_wifi+0x430>)
 800348e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003492:	f8a3 2432 	strh.w	r2, [r3, #1074]	; 0x432
	sprintf(tab_polecenie[11].rsp,"OK\r");
 8003496:	490d      	ldr	r1, [pc, #52]	; (80034cc <change_wifi+0x428>)
 8003498:	4811      	ldr	r0, [pc, #68]	; (80034e0 <change_wifi+0x43c>)
 800349a:	f008 f869 	bl	800b570 <siprintf>
	tab_polecenie[11].powrot.etap = 8;
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <change_wifi+0x430>)
 80034a0:	2208      	movs	r2, #8
 80034a2:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
	tab_polecenie[11].powrot.krok = 0;
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <change_wifi+0x430>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a
	tab_polecenie[11].time_exit = 0;
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <change_wifi+0x430>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	tab_polecenie[11].iter =3;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <change_wifi+0x430>)
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
	tab_polecenie[11].terminate =1;
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <change_wifi+0x430>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	0800dbc0 	.word	0x0800dbc0
 80034d0:	20000f38 	.word	0x20000f38
 80034d4:	20000b60 	.word	0x20000b60
 80034d8:	0800dd0c 	.word	0x0800dd0c
 80034dc:	20000f56 	.word	0x20000f56
 80034e0:	20000f94 	.word	0x20000f94
 80034e4:	00000000 	.word	0x00000000

080034e8 <GP2Y_measure>:
 *      Author: Filip
 */
#include <fr_GP2Y.h>

//mesure data from GP2Y1010AU0F sensor using PA6 pin
int GP2Y_measure(){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
	float density, voltage;
	int adcvalue;

	//change ADC to PA6
	ADC_Select_CH6();
 80034ee:	f000 f8c7 	bl	8003680 <ADC_Select_CH6>

	//start measurment with ILED pin
	HAL_GPIO_WritePin(ILED_GPIO_Port, ILED_Pin, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
 80034f4:	2101      	movs	r1, #1
 80034f6:	4840      	ldr	r0, [pc, #256]	; (80035f8 <GP2Y_measure+0x110>)
 80034f8:	f002 fe34 	bl	8006164 <HAL_GPIO_WritePin>

	//delay to take measure
	delay(280);
 80034fc:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003500:	f000 f886 	bl	8003610 <delay>

	//adc measurement
	HAL_ADC_Start(&hadc1);
 8003504:	483d      	ldr	r0, [pc, #244]	; (80035fc <GP2Y_measure+0x114>)
 8003506:	f001 fbf7 	bl	8004cf8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800350a:	2101      	movs	r1, #1
 800350c:	483b      	ldr	r0, [pc, #236]	; (80035fc <GP2Y_measure+0x114>)
 800350e:	f001 fcda 	bl	8004ec6 <HAL_ADC_PollForConversion>
	adcvalue = HAL_ADC_GetValue(&hadc1);
 8003512:	483a      	ldr	r0, [pc, #232]	; (80035fc <GP2Y_measure+0x114>)
 8003514:	f001 fd62 	bl	8004fdc <HAL_ADC_GetValue>
 8003518:	4603      	mov	r3, r0
 800351a:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800351c:	4837      	ldr	r0, [pc, #220]	; (80035fc <GP2Y_measure+0x114>)
 800351e:	f001 fc9f 	bl	8004e60 <HAL_ADC_Stop>

	//end measurement
	HAL_GPIO_WritePin(ILED_GPIO_Port, ILED_Pin, GPIO_PIN_RESET);
 8003522:	2200      	movs	r2, #0
 8003524:	2101      	movs	r1, #1
 8003526:	4834      	ldr	r0, [pc, #208]	; (80035f8 <GP2Y_measure+0x110>)
 8003528:	f002 fe1c 	bl	8006164 <HAL_GPIO_WritePin>

	//calculate voltage from 1:10 voltage divider
 	voltage = (SYS_VOLTAGE / 4096.0) * adcvalue * 11;
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fd f801 	bl	8000534 <__aeabi_i2d>
 8003532:	a32d      	add	r3, pc, #180	; (adr r3, 80035e8 <GP2Y_measure+0x100>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f866 	bl	8000608 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <GP2Y_measure+0x118>)
 800354a:	f7fd f85d 	bl	8000608 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fb4f 	bl	8000bf8 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	60bb      	str	r3, [r7, #8]

 	//convert measrement to ppm/~(mg/m3)
	if (voltage >= NO_DUST_VOLTAGE)
 800355e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003562:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003604 <GP2Y_measure+0x11c>
 8003566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	db23      	blt.n	80035b8 <GP2Y_measure+0xd0>
    {
        voltage -= NO_DUST_VOLTAGE;
 8003570:	edd7 7a02 	vldr	s15, [r7, #8]
 8003574:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003604 <GP2Y_measure+0x11c>
 8003578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800357c:	edc7 7a02 	vstr	s15, [r7, #8]
        if(voltage>3600){
 8003580:	edd7 7a02 	vldr	s15, [r7, #8]
 8003584:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003608 <GP2Y_measure+0x120>
 8003588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	dd01      	ble.n	8003596 <GP2Y_measure+0xae>
        	voltage=3600;
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <GP2Y_measure+0x124>)
 8003594:	60bb      	str	r3, [r7, #8]
        }
        density = voltage * COV_RATIO;
 8003596:	68b8      	ldr	r0, [r7, #8]
 8003598:	f7fc ffde 	bl	8000558 <__aeabi_f2d>
 800359c:	a314      	add	r3, pc, #80	; (adr r3, 80035f0 <GP2Y_measure+0x108>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fd f831 	bl	8000608 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e002      	b.n	80035be <GP2Y_measure+0xd6>
    }
    else{
    	density = 0;
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
    }

    return floor(density);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7fc ffca 	bl	8000558 <__aeabi_f2d>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	ec43 2b10 	vmov	d0, r2, r3
 80035cc:	f00a fa3c 	bl	800da48 <floor>
 80035d0:	ec53 2b10 	vmov	r2, r3, d0
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7fd fac6 	bl	8000b68 <__aeabi_d2iz>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	00000000 	.word	0x00000000
 80035ec:	3fe9c800 	.word	0x3fe9c800
 80035f0:	9999999a 	.word	0x9999999a
 80035f4:	3fc99999 	.word	0x3fc99999
 80035f8:	40020400 	.word	0x40020400
 80035fc:	20000fb4 	.word	0x20000fb4
 8003600:	40260000 	.word	0x40260000
 8003604:	447a0000 	.word	0x447a0000
 8003608:	45610000 	.word	0x45610000
 800360c:	45610000 	.word	0x45610000

08003610 <delay>:


//us  delay function
void delay(uint32_t time){
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <delay+0x2c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < time){
 8003620:	bf00      	nop
 8003622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d8f9      	bhi.n	8003622 <delay+0x12>
	}

}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	20001070 	.word	0x20001070

08003640 <ADC_Select_CH4>:
 */

#include <fr_adc.h>

void ADC_Select_CH4(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003646:	463b      	mov	r3, r7
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
	  // Configure for the selected ADC
	  sConfig.Channel = ADC_CHANNEL_4;
 8003652:	2304      	movs	r3, #4
 8003654:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800365a:	2301      	movs	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800365e:	463b      	mov	r3, r7
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <ADC_Select_CH4+0x3c>)
 8003664:	f001 fcc8 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 800366e:	f000 fea8 	bl	80043c2 <Error_Handler>
	  }
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000fb4 	.word	0x20000fb4

08003680 <ADC_Select_CH6>:

void ADC_Select_CH6(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003686:	463b      	mov	r3, r7
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
	  // Configure for the selected ADC
	  sConfig.Channel = ADC_CHANNEL_6;
 8003692:	2306      	movs	r3, #6
 8003694:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800369a:	2301      	movs	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800369e:	463b      	mov	r3, r7
 80036a0:	4619      	mov	r1, r3
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <ADC_Select_CH6+0x3c>)
 80036a4:	f001 fca8 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <ADC_Select_CH6+0x32>
	  {
	    Error_Handler();
 80036ae:	f000 fe88 	bl	80043c2 <Error_Handler>
	  }
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000fb4 	.word	0x20000fb4

080036c0 <measure_battery>:
 *      Author: Filip
 */
#include <fr_battery.h>

// Measures the battery voltage and calculates the battery level
void measure_battery(void){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
 80036c4:	af00      	add	r7, sp, #0
    // The battery level data array
	uint16_t bat_lvl_tab[20];
	double voltage;
	ADC_Select_CH4();
 80036c6:	f7ff ffbb 	bl	8003640 <ADC_Select_CH4>

    // Measure battery level 20 times
	for(int i=0; i<20;i++){
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
 80036ce:	e01f      	b.n	8003710 <measure_battery+0x50>
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 80036d0:	487f      	ldr	r0, [pc, #508]	; (80038d0 <measure_battery+0x210>)
 80036d2:	f001 fb11 	bl	8004cf8 <HAL_ADC_Start>
        // Poll ADC for conversion
        HAL_ADC_PollForConversion(&hadc1, 20);
 80036d6:	2114      	movs	r1, #20
 80036d8:	487d      	ldr	r0, [pc, #500]	; (80038d0 <measure_battery+0x210>)
 80036da:	f001 fbf4 	bl	8004ec6 <HAL_ADC_PollForConversion>
        // Get the converted value and add to total
        AD_BAT += HAL_ADC_GetValue(&hadc1);
 80036de:	487c      	ldr	r0, [pc, #496]	; (80038d0 <measure_battery+0x210>)
 80036e0:	f001 fc7c 	bl	8004fdc <HAL_ADC_GetValue>
 80036e4:	4603      	mov	r3, r0
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <measure_battery+0x214>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <measure_battery+0x214>)
 80036f2:	801a      	strh	r2, [r3, #0]
        // Stop the ADC conversion
        HAL_ADC_Stop(&hadc1);
 80036f4:	4876      	ldr	r0, [pc, #472]	; (80038d0 <measure_battery+0x210>)
 80036f6:	f001 fbb3 	bl	8004e60 <HAL_ADC_Stop>
        // Store individual measurement to array
        bat_lvl_tab[i] = AD_BAT;
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <measure_battery+0x214>)
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	3338      	adds	r3, #56	; 0x38
 8003704:	443b      	add	r3, r7
 8003706:	f823 2c38 	strh.w	r2, [r3, #-56]
	for(int i=0; i<20;i++){
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	3301      	adds	r3, #1
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	2b13      	cmp	r3, #19
 8003714:	dddc      	ble.n	80036d0 <measure_battery+0x10>
	}

    // Calculate the average of the 20 measurements
    AD_BAT /= 20;
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <measure_battery+0x214>)
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	4a6f      	ldr	r2, [pc, #444]	; (80038d8 <measure_battery+0x218>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <measure_battery+0x214>)
 8003726:	801a      	strh	r2, [r3, #0]
    // Calculate the battery voltage based on the ADC value
    voltage = ((AD_BAT / 4096.0) * 3100) * 2;
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <measure_battery+0x214>)
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fc ff01 	bl	8000534 <__aeabi_i2d>
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <measure_battery+0x21c>)
 8003738:	f7fd f890 	bl	800085c <__aeabi_ddiv>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	a356      	add	r3, pc, #344	; (adr r3, 80038a0 <measure_battery+0x1e0>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc ff5d 	bl	8000608 <__aeabi_dmul>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	f7fc fd9f 	bl	800029c <__adddf3>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    // Determine battery level based on voltage
    if(voltage > 4200){
 8003766:	a350      	add	r3, pc, #320	; (adr r3, 80038a8 <measure_battery+0x1e8>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003770:	f7fd f9da 	bl	8000b28 <__aeabi_dcmpgt>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <measure_battery+0xc8>
        // If voltage is more than 4.2V, battery level is 100%
        bat_lvl = 100;
 800377a:	4959      	ldr	r1, [pc, #356]	; (80038e0 <measure_battery+0x220>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <measure_battery+0x224>)
 8003782:	e9c1 2300 	strd	r2, r3, [r1]
 8003786:	e061      	b.n	800384c <measure_battery+0x18c>
    }
    else if(voltage < 3300){
 8003788:	a349      	add	r3, pc, #292	; (adr r3, 80038b0 <measure_battery+0x1f0>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003792:	f7fd f9ab 	bl	8000aec <__aeabi_dcmplt>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <measure_battery+0xec>
        // If voltage is less than 3.3V, battery level is 0%
        bat_lvl = 0;
 800379c:	4950      	ldr	r1, [pc, #320]	; (80038e0 <measure_battery+0x220>)
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9c1 2300 	strd	r2, r3, [r1]
 80037aa:	e04f      	b.n	800384c <measure_battery+0x18c>
    }
    else{
        // If voltage is between 3.3V and 4.2V, calculate battery level accordingly
        if(voltage > 3650){
 80037ac:	a342      	add	r3, pc, #264	; (adr r3, 80038b8 <measure_battery+0x1f8>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037b6:	f7fd f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d027      	beq.n	8003810 <measure_battery+0x150>
            bat_lvl = ((((voltage - 3550.0) / (4200 - 3550)) * 80) / 1) + 20;
 80037c0:	a33f      	add	r3, pc, #252	; (adr r3, 80038c0 <measure_battery+0x200>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ca:	f7fc fd65 	bl	8000298 <__aeabi_dsub>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <measure_battery+0x228>)
 80037dc:	f7fd f83e 	bl	800085c <__aeabi_ddiv>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <measure_battery+0x22c>)
 80037ee:	f7fc ff0b 	bl	8000608 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <measure_battery+0x230>)
 8003800:	f7fc fd4c 	bl	800029c <__adddf3>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4935      	ldr	r1, [pc, #212]	; (80038e0 <measure_battery+0x220>)
 800380a:	e9c1 2300 	strd	r2, r3, [r1]
 800380e:	e01d      	b.n	800384c <measure_battery+0x18c>
        }
        else{
            bat_lvl = ((((voltage - 3200.0) / (3650.0 - 3200)) * 20) / 1);
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <measure_battery+0x234>)
 8003816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800381a:	f7fc fd3d 	bl	8000298 <__aeabi_dsub>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	a328      	add	r3, pc, #160	; (adr r3, 80038c8 <measure_battery+0x208>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fd f816 	bl	800085c <__aeabi_ddiv>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <measure_battery+0x230>)
 800383e:	f7fc fee3 	bl	8000608 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4926      	ldr	r1, [pc, #152]	; (80038e0 <measure_battery+0x220>)
 8003848:	e9c1 2300 	strd	r2, r3, [r1]
        }
    }
    // Convert battery level to integer
    bat_lvl_int = (uint32_t)bat_lvl;
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <measure_battery+0x220>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f7fd f9af 	bl	8000bb8 <__aeabi_d2uiz>
 800385a:	4603      	mov	r3, r0
 800385c:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <measure_battery+0x238>)
 800385e:	6013      	str	r3, [r2, #0]
    // If current battery level is higher than previous but the increase is less than 4 (and not zero), set it to previous level
    if((bat_lvl_int > bat_lvl_pre) && (bat_lvl_int - bat_lvl_pre < 4) && (bat_lvl_pre != 0)){
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <measure_battery+0x238>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <measure_battery+0x23c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d90e      	bls.n	800388a <measure_battery+0x1ca>
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <measure_battery+0x238>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <measure_battery+0x23c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d807      	bhi.n	800388a <measure_battery+0x1ca>
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <measure_battery+0x23c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <measure_battery+0x1ca>
        bat_lvl_int = bat_lvl_pre;
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <measure_battery+0x23c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <measure_battery+0x238>)
 8003888:	6013      	str	r3, [r2, #0]
    }

    // Format battery level to string
    sprintf(bat_lvl_lb,"bat lvl:%4u%\r\n", bat_lvl_int);
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <measure_battery+0x238>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	491b      	ldr	r1, [pc, #108]	; (8003900 <measure_battery+0x240>)
 8003892:	481c      	ldr	r0, [pc, #112]	; (8003904 <measure_battery+0x244>)
 8003894:	f007 fe6c 	bl	800b570 <siprintf>
}
 8003898:	bf00      	nop
 800389a:	3738      	adds	r7, #56	; 0x38
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	00000000 	.word	0x00000000
 80038a4:	40a83800 	.word	0x40a83800
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40b06800 	.word	0x40b06800
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40a9c800 	.word	0x40a9c800
 80038b8:	00000000 	.word	0x00000000
 80038bc:	40ac8400 	.word	0x40ac8400
 80038c0:	00000000 	.word	0x00000000
 80038c4:	40abbc00 	.word	0x40abbc00
 80038c8:	00000000 	.word	0x00000000
 80038cc:	407c2000 	.word	0x407c2000
 80038d0:	20000fb4 	.word	0x20000fb4
 80038d4:	20000b58 	.word	0x20000b58
 80038d8:	cccccccd 	.word	0xcccccccd
 80038dc:	40b00000 	.word	0x40b00000
 80038e0:	20000b38 	.word	0x20000b38
 80038e4:	40590000 	.word	0x40590000
 80038e8:	40845000 	.word	0x40845000
 80038ec:	40540000 	.word	0x40540000
 80038f0:	40340000 	.word	0x40340000
 80038f4:	40a90000 	.word	0x40a90000
 80038f8:	20000b54 	.word	0x20000b54
 80038fc:	20000b5c 	.word	0x20000b5c
 8003900:	0800dd10 	.word	0x0800dd10
 8003904:	20000b40 	.word	0x20000b40

08003908 <sleep>:
 */
#include "fr_stm32.h"


// Function to put the device in standby mode
void sleep(){
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
    // Backup WiFi mode state
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR18, tryb_wifi);
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <sleep+0x58>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	2112      	movs	r1, #18
 8003914:	4813      	ldr	r0, [pc, #76]	; (8003964 <sleep+0x5c>)
 8003916:	f005 fad1 	bl	8008ebc <HAL_RTCEx_BKUPWrite>

    // Disable wake up pin
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800391a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800391e:	f003 ff0b 	bl	8007738 <HAL_PWR_DisableWakeUpPin>

    // Deactivate wake up timer
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003922:	4810      	ldr	r0, [pc, #64]	; (8003964 <sleep+0x5c>)
 8003924:	f005 fa72 	bl	8008e0c <HAL_RTCEx_DeactivateWakeUpTimer>

    // Deactivate RTC alarm
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800392c:	480d      	ldr	r0, [pc, #52]	; (8003964 <sleep+0x5c>)
 800392e:	f005 f923 	bl	8008b78 <HAL_RTC_DeactivateAlarm>

    // Clear power wake up flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <sleep+0x60>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <sleep+0x60>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6013      	str	r3, [r2, #0]

    // Clear RTC alarm flag
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <sleep+0x5c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <sleep+0x5c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800394e:	60da      	str	r2, [r3, #12]

    // Get current time
    pobierz_czas();
 8003950:	f000 f80c 	bl	800396c <pobierz_czas>

    // Set the next alarm
    SetNextAlarm();
 8003954:	f000 f81e 	bl	8003994 <SetNextAlarm>

    // Enter standby mode
    HAL_PWR_EnterSTANDBYMode();
 8003958:	f003 ff02 	bl	8007760 <HAL_PWR_EnterSTANDBYMode>
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000244 	.word	0x20000244
 8003964:	20001050 	.word	0x20001050
 8003968:	40007000 	.word	0x40007000

0800396c <pobierz_czas>:

// Function to get the current time
void pobierz_czas(){
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    // Get current time
    HAL_RTC_GetTime(&hrtc, &time_get, RTC_FORMAT_BIN);
 8003970:	2200      	movs	r2, #0
 8003972:	4905      	ldr	r1, [pc, #20]	; (8003988 <pobierz_czas+0x1c>)
 8003974:	4805      	ldr	r0, [pc, #20]	; (800398c <pobierz_czas+0x20>)
 8003976:	f004 fd61 	bl	800843c <HAL_RTC_GetTime>

    // Get current date
    HAL_RTC_GetDate(&hrtc, &data_get, RTC_FORMAT_BIN);
 800397a:	2200      	movs	r2, #0
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <pobierz_czas+0x24>)
 800397e:	4803      	ldr	r0, [pc, #12]	; (800398c <pobierz_czas+0x20>)
 8003980:	f004 fe3e 	bl	8008600 <HAL_RTC_GetDate>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000a50 	.word	0x20000a50
 800398c:	20001050 	.word	0x20001050
 8003990:	20000a64 	.word	0x20000a64

08003994 <SetNextAlarm>:

// Function to set the next alarm
void SetNextAlarm(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0
    RTC_AlarmTypeDef sAlarm = {0}; // RTC alarm structure to store the next alarm setting
 800399a:	463b      	mov	r3, r7
 800399c:	2228      	movs	r2, #40	; 0x28
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f007 f973 	bl	800ac8c <memset>

    // If the current time is 23:59, set the alarm hour to 0 (midnight)
    // Otherwise, set the alarm hour to the current hour plus 1
    if((time_get.Hours + ((time_get.Minutes + 1) / 60)) == 24){
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <SetNextAlarm+0xc8>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <SetNextAlarm+0xc8>)
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <SetNextAlarm+0xcc>)
 80039b4:	fb82 0203 	smull	r0, r2, r2, r3
 80039b8:	441a      	add	r2, r3
 80039ba:	1152      	asrs	r2, r2, #5
 80039bc:	17db      	asrs	r3, r3, #31
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	440b      	add	r3, r1
 80039c2:	2b18      	cmp	r3, #24
 80039c4:	d102      	bne.n	80039cc <SetNextAlarm+0x38>
        sAlarm.AlarmTime.Hours = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	703b      	strb	r3, [r7, #0]
 80039ca:	e00f      	b.n	80039ec <SetNextAlarm+0x58>
    }
    else{
        sAlarm.AlarmTime.Hours = time_get.Hours + ((time_get.Minutes + 1) / 60);
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <SetNextAlarm+0xc8>)
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <SetNextAlarm+0xc8>)
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4922      	ldr	r1, [pc, #136]	; (8003a60 <SetNextAlarm+0xcc>)
 80039d8:	fb81 0103 	smull	r0, r1, r1, r3
 80039dc:	4419      	add	r1, r3
 80039de:	1149      	asrs	r1, r1, #5
 80039e0:	17db      	asrs	r3, r3, #31
 80039e2:	1acb      	subs	r3, r1, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	703b      	strb	r3, [r7, #0]
    }

    // Set the alarm minute to the current minute plus 1, wrapping around to 0 if it exceeds 59
    sAlarm.AlarmTime.Minutes = (time_get.Minutes + 1) % 60;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <SetNextAlarm+0xc8>)
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <SetNextAlarm+0xcc>)
 80039f4:	fb83 1302 	smull	r1, r3, r3, r2
 80039f8:	4413      	add	r3, r2
 80039fa:	1159      	asrs	r1, r3, #5
 80039fc:	17d3      	asrs	r3, r2, #31
 80039fe:	1ac9      	subs	r1, r1, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a5b      	subs	r3, r3, r1
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	1ad1      	subs	r1, r2, r3
 8003a0a:	b2cb      	uxtb	r3, r1
 8003a0c:	707b      	strb	r3, [r7, #1]

    // Set the alarm seconds to the current seconds
    sAlarm.AlarmTime.Seconds = time_get.Seconds;
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <SetNextAlarm+0xc8>)
 8003a10:	789b      	ldrb	r3, [r3, #2]
 8003a12:	70bb      	strb	r3, [r7, #2]

    // Set the sub-seconds, daylight saving, store operation, alarm mask, sub-second mask, weekday select, date, and alarm A
    sAlarm.AlarmTime.SubSeconds = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8003a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a24:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmDateWeekDay = data_get.Date;
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <SetNextAlarm+0xd0>)
 8003a30:	789b      	ldrb	r3, [r3, #2]
 8003a32:	f887 3020 	strb.w	r3, [r7, #32]
    sAlarm.Alarm = RTC_ALARM_A;
 8003a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

    // Set the alarm
    // If setting the alarm fails, call the error handler
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4809      	ldr	r0, [pc, #36]	; (8003a68 <SetNextAlarm+0xd4>)
 8003a44:	f004 ff56 	bl	80088f4 <HAL_RTC_SetAlarm_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <SetNextAlarm+0xbe>
    {
        Error_Handler();
 8003a4e:	f000 fcb8 	bl	80043c2 <Error_Handler>
    }
}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000a50 	.word	0x20000a50
 8003a60:	88888889 	.word	0x88888889
 8003a64:	20000a64 	.word	0x20000a64
 8003a68:	20001050 	.word	0x20001050

08003a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a70:	f001 f858 	bl	8004b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a74:	f000 f8a4 	bl	8003bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a78:	f000 fb7c 	bl	8004174 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a7c:	f000 fb3c 	bl	80040f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003a80:	f000 fae6 	bl	8004050 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003a84:	f000 fb0e 	bl	80040a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003a88:	f000 fa48 	bl	8003f1c <MX_TIM2_Init>
  MX_TIM4_Init();
 8003a8c:	f000 fa92 	bl	8003fb4 <MX_TIM4_Init>
  MX_RTC_Init();
 8003a90:	f000 f982 	bl	8003d98 <MX_RTC_Init>
  MX_I2C1_Init();
 8003a94:	f000 f952 	bl	8003d3c <MX_I2C1_Init>
  MX_ADC1_Init();
 8003a98:	f000 f8fe 	bl	8003c98 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //turn on work indicator LED
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aa2:	483a      	ldr	r0, [pc, #232]	; (8003b8c <main+0x120>)
 8003aa4:	f002 fb5e 	bl	8006164 <HAL_GPIO_WritePin>

  //battery level measurement
  measure_battery();
 8003aa8:	f7ff fe0a 	bl	80036c0 <measure_battery>
  //configure BME280 sensor

  if(BME280_Config(OSRS_2, OSRS_16, OSRS_1, IIR_OFF)==-1){
 8003aac:	2300      	movs	r3, #0
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2105      	movs	r1, #5
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f7fd fba4 	bl	8001200 <BME280_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d105      	bne.n	8003acc <main+0x60>
	  HAL_UART_Transmit(&huart2, "Error in configuration of BME280\r\n", strlen("Error in configuration of BME280\r\n"), 200);
 8003ac0:	23c8      	movs	r3, #200	; 0xc8
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	4932      	ldr	r1, [pc, #200]	; (8003b90 <main+0x124>)
 8003ac6:	4833      	ldr	r0, [pc, #204]	; (8003b94 <main+0x128>)
 8003ac8:	f005 fd71 	bl	80095ae <HAL_UART_Transmit>
  }
  BME280_WakeUP();
 8003acc:	f7fd fcb6 	bl	800143c <BME280_WakeUP>
  //reset ESP8266
  ESP_Server_Init();
 8003ad0:	f7fe f980 	bl	8001dd4 <ESP_Server_Init>

  //initialize USART DMA in receive until IDLE mode
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8003ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad8:	492f      	ldr	r1, [pc, #188]	; (8003b98 <main+0x12c>)
 8003ada:	4830      	ldr	r0, [pc, #192]	; (8003b9c <main+0x130>)
 8003adc:	f005 fef7 	bl	80098ce <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <main+0x134>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <main+0x134>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0208 	bic.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]

  load_hotspot();
 8003af0:	f7ff f92a 	bl	8002d48 <load_hotspot>

  //initialize timers
  //timer for us delay
  HAL_TIM_Base_Start(&htim2);
 8003af4:	482b      	ldr	r0, [pc, #172]	; (8003ba4 <main+0x138>)
 8003af6:	f005 fa63 	bl	8008fc0 <HAL_TIM_Base_Start>

  //timer for ESP8266 communication timing
  HAL_TIM_Base_Start(&htim4);
 8003afa:	482b      	ldr	r0, [pc, #172]	; (8003ba8 <main+0x13c>)
 8003afc:	f005 fa60 	bl	8008fc0 <HAL_TIM_Base_Start>

  //enable debugging in standby mode
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003b00:	f001 f8a6 	bl	8004c50 <HAL_DBGMCU_EnableDBGStandbyMode>

  while (1)
  {
	//ESP8266 communication handle
	if(PomiarFlag){
 8003b04:	4b29      	ldr	r3, [pc, #164]	; (8003bac <main+0x140>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d028      	beq.n	8003b5e <main+0xf2>
		switch(tryb_wifi){
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <main+0x144>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d821      	bhi.n	8003b58 <main+0xec>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <main+0xb0>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b35 	.word	0x08003b35
 8003b20:	08003b3b 	.word	0x08003b3b
 8003b24:	08003b47 	.word	0x08003b47
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b53 	.word	0x08003b53
 8003b30:	08003b41 	.word	0x08003b41
		case HOTSPOT:
			load_hotspot();
 8003b34:	f7ff f908 	bl	8002d48 <load_hotspot>
		break;
 8003b38:	e00e      	b.n	8003b58 <main+0xec>
		case ROUTER_MODE:
			load_msg();
 8003b3a:	f7fe ff7f 	bl	8002a3c <load_msg>
		break;
 8003b3e:	e00b      	b.n	8003b58 <main+0xec>
		case RESET_TO_WIFI_CHANGE:
			wifi_reset();
 8003b40:	f7ff fa7e 	bl	8003040 <wifi_reset>
		break;
 8003b44:	e008      	b.n	8003b58 <main+0xec>
		case WIFI_CHANGE:
			change_wifi();
 8003b46:	f7ff faad 	bl	80030a4 <change_wifi>
		break;
 8003b4a:	e005      	b.n	8003b58 <main+0xec>
		case RESET_MODE_TO_HOTSPOT:
			wifi_reset();
 8003b4c:	f7ff fa78 	bl	8003040 <wifi_reset>
		break;
 8003b50:	e002      	b.n	8003b58 <main+0xec>
		case RESET_MODE_TO_ROUTER:
			wifi_reset();
 8003b52:	f7ff fa75 	bl	8003040 <wifi_reset>
		break;
 8003b56:	bf00      	nop
		}
		send_msg();
 8003b58:	f7fe fb42 	bl	80021e0 <send_msg>
 8003b5c:	e001      	b.n	8003b62 <main+0xf6>
	}
	else{
		sleep();
 8003b5e:	f7ff fed3 	bl	8003908 <sleep>
	}


	//check if circural buffor is not full and transfer data from to USART2
	if((USART2->SR & USART_SR_TC) && (ogon!=glowa)&&(ogon<1000)){
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <main+0x148>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ca      	beq.n	8003b04 <main+0x98>
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <main+0x14c>)
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <main+0x150>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d0c4      	beq.n	8003b04 <main+0x98>
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <main+0x14c>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b82:	d2bf      	bcs.n	8003b04 <main+0x98>
		transfer_bufor();
 8003b84:	f7fe f934 	bl	8001df0 <transfer_bufor>
	if(PomiarFlag){
 8003b88:	e7bc      	b.n	8003b04 <main+0x98>
 8003b8a:	bf00      	nop
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	0800dd20 	.word	0x0800dd20
 8003b94:	20001144 	.word	0x20001144
 8003b98:	20000278 	.word	0x20000278
 8003b9c:	20001100 	.word	0x20001100
 8003ba0:	20001188 	.word	0x20001188
 8003ba4:	20001070 	.word	0x20001070
 8003ba8:	200010b8 	.word	0x200010b8
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000244 	.word	0x20000244
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	20000a48 	.word	0x20000a48
 8003bbc:	20000a4a 	.word	0x20000a4a

08003bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b094      	sub	sp, #80	; 0x50
 8003bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bc6:	f107 0320 	add.w	r3, r7, #32
 8003bca:	2230      	movs	r2, #48	; 0x30
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f007 f85c 	bl	800ac8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <SystemClock_Config+0xd0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <SystemClock_Config+0xd0>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <SystemClock_Config+0xd0>)
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c00:	2300      	movs	r3, #0
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <SystemClock_Config+0xd4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c0c:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <SystemClock_Config+0xd4>)
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <SystemClock_Config+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003c20:	2306      	movs	r3, #6
 8003c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c24:	2301      	movs	r3, #1
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c30:	2302      	movs	r3, #2
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c38:	2308      	movs	r3, #8
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003c3c:	2348      	movs	r3, #72	; 0x48
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c40:	2302      	movs	r3, #2
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c44:	2304      	movs	r3, #4
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c48:	f107 0320 	add.w	r3, r7, #32
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 fd9f 	bl	8007790 <HAL_RCC_OscConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003c58:	f000 fbb3 	bl	80043c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c60:	2302      	movs	r3, #2
 8003c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f004 f801 	bl	8007c80 <HAL_RCC_ClockConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003c84:	f000 fb9d 	bl	80043c2 <Error_Handler>
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3750      	adds	r7, #80	; 0x50
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000

08003c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cac:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <MX_ADC1_Init+0x9c>)
 8003cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cd8:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <MX_ADC1_Init+0xa0>)
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cf6:	480e      	ldr	r0, [pc, #56]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003cf8:	f000 ffba 	bl	8004c70 <HAL_ADC_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003d02:	f000 fb5e 	bl	80043c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003d06:	2304      	movs	r3, #4
 8003d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d12:	463b      	mov	r3, r7
 8003d14:	4619      	mov	r1, r3
 8003d16:	4806      	ldr	r0, [pc, #24]	; (8003d30 <MX_ADC1_Init+0x98>)
 8003d18:	f001 f96e 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003d22:	f000 fb4e 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000fb4 	.word	0x20000fb4
 8003d34:	40012000 	.word	0x40012000
 8003d38:	0f000001 	.word	0x0f000001

08003d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <MX_I2C1_Init+0x54>)
 8003d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <MX_I2C1_Init+0x58>)
 8003d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <MX_I2C1_Init+0x50>)
 8003d7a:	f002 fa0d 	bl	8006198 <HAL_I2C_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d84:	f000 fb1d 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000ffc 	.word	0x20000ffc
 8003d90:	40005400 	.word	0x40005400
 8003d94:	000186a0 	.word	0x000186a0

08003d98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b090      	sub	sp, #64	; 0x40
 8003d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003dae:	2300      	movs	r3, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003db2:	463b      	mov	r3, r7
 8003db4:	2228      	movs	r2, #40	; 0x28
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f006 ff67 	bl	800ac8c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003dbe:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dc0:	4a50      	ldr	r2, [pc, #320]	; (8003f04 <MX_RTC_Init+0x16c>)
 8003dc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003dca:	4b4d      	ldr	r3, [pc, #308]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dcc:	227f      	movs	r2, #127	; 0x7f
 8003dce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ddc:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <MX_RTC_Init+0x168>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003de8:	4845      	ldr	r0, [pc, #276]	; (8003f00 <MX_RTC_Init+0x168>)
 8003dea:	f004 fa17 	bl	800821c <HAL_RTC_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003df4:	f000 fae5 	bl	80043c2 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
 8003df8:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <MX_RTC_Init+0x170>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d124      	bne.n	8003e4e <MX_RTC_Init+0xb6>
   	    if(__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF)){
 8003e04:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <MX_RTC_Init+0x168>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <MX_RTC_Init+0x8a>
   			  HAL_UART_Transmit(&huart2, "ALRAF=1\r\n", strlen("ALRAF=1\r\n"), 500);
 8003e12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e16:	2209      	movs	r2, #9
 8003e18:	493c      	ldr	r1, [pc, #240]	; (8003f0c <MX_RTC_Init+0x174>)
 8003e1a:	483d      	ldr	r0, [pc, #244]	; (8003f10 <MX_RTC_Init+0x178>)
 8003e1c:	f005 fbc7 	bl	80095ae <HAL_UART_Transmit>
 8003e20:	e006      	b.n	8003e30 <MX_RTC_Init+0x98>
   	    }
   	    else{
   			  HAL_UART_Transmit(&huart2, "ALRAF=0\r\n", strlen("ALRAF=0\r\n"), 500);
 8003e22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e26:	2209      	movs	r2, #9
 8003e28:	493a      	ldr	r1, [pc, #232]	; (8003f14 <MX_RTC_Init+0x17c>)
 8003e2a:	4839      	ldr	r0, [pc, #228]	; (8003f10 <MX_RTC_Init+0x178>)
 8003e2c:	f005 fbbf 	bl	80095ae <HAL_UART_Transmit>
   	    }
   		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <MX_RTC_Init+0x170>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a34      	ldr	r2, [pc, #208]	; (8003f08 <MX_RTC_Init+0x170>)
 8003e36:	f043 0308 	orr.w	r3, r3, #8
 8003e3a:	6013      	str	r3, [r2, #0]
    	tryb_wifi= HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR18);
 8003e3c:	2112      	movs	r1, #18
 8003e3e:	4830      	ldr	r0, [pc, #192]	; (8003f00 <MX_RTC_Init+0x168>)
 8003e40:	f005 f856 	bl	8008ef0 <HAL_RTCEx_BKUPRead>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <MX_RTC_Init+0x180>)
 8003e48:	6013      	str	r3, [r2, #0]
		read_ssid();
 8003e4a:	f7fe fd03 	bl	8002854 <read_ssid>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4823      	ldr	r0, [pc, #140]	; (8003f00 <MX_RTC_Init+0x168>)
 8003e72:	f004 fa49 	bl	8008308 <HAL_RTC_SetTime>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8003e7c:	f000 faa1 	bl	80043c2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4817      	ldr	r0, [pc, #92]	; (8003f00 <MX_RTC_Init+0x168>)
 8003ea2:	f004 fb29 	bl	80084f8 <HAL_RTC_SetDate>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_RTC_Init+0x118>
  {
    Error_Handler();
 8003eac:	f000 fa89 	bl	80043c2 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4806      	ldr	r0, [pc, #24]	; (8003f00 <MX_RTC_Init+0x168>)
 8003ee8:	f004 fbd9 	bl	800869e <HAL_RTC_SetAlarm>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_RTC_Init+0x15e>
  {
    Error_Handler();
 8003ef2:	f000 fa66 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	3740      	adds	r7, #64	; 0x40
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20001050 	.word	0x20001050
 8003f04:	40002800 	.word	0x40002800
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	0800dd44 	.word	0x0800dd44
 8003f10:	20001144 	.word	0x20001144
 8003f14:	0800dd50 	.word	0x0800dd50
 8003f18:	20000244 	.word	0x20000244

08003f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f30:	463b      	mov	r3, r7
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f42:	2247      	movs	r2, #71	; 0x47
 8003f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f54:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f60:	4813      	ldr	r0, [pc, #76]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f62:	f004 ffdd 	bl	8008f20 <HAL_TIM_Base_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f6c:	f000 fa29 	bl	80043c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f7e:	f005 f879 	bl	8009074 <HAL_TIM_ConfigClockSource>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f88:	f000 fa1b 	bl	80043c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f94:	463b      	mov	r3, r7
 8003f96:	4619      	mov	r1, r3
 8003f98:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f9a:	f005 fa4d 	bl	8009438 <HAL_TIMEx_MasterConfigSynchronization>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003fa4:	f000 fa0d 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20001070 	.word	0x20001070

08003fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc8:	463b      	mov	r3, r7
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <MX_TIM4_Init+0x94>)
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <MX_TIM4_Init+0x98>)
 8003fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35000;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <MX_TIM4_Init+0x94>)
 8003fd8:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8003fdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <MX_TIM4_Init+0x94>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <MX_TIM4_Init+0x94>)
 8003fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <MX_TIM4_Init+0x94>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <MX_TIM4_Init+0x94>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ff8:	4813      	ldr	r0, [pc, #76]	; (8004048 <MX_TIM4_Init+0x94>)
 8003ffa:	f004 ff91 	bl	8008f20 <HAL_TIM_Base_Init>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004004:	f000 f9dd 	bl	80043c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800400c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	4619      	mov	r1, r3
 8004014:	480c      	ldr	r0, [pc, #48]	; (8004048 <MX_TIM4_Init+0x94>)
 8004016:	f005 f82d 	bl	8009074 <HAL_TIM_ConfigClockSource>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004020:	f000 f9cf 	bl	80043c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800402c:	463b      	mov	r3, r7
 800402e:	4619      	mov	r1, r3
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <MX_TIM4_Init+0x94>)
 8004032:	f005 fa01 	bl	8009438 <HAL_TIMEx_MasterConfigSynchronization>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800403c:	f000 f9c1 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	200010b8 	.word	0x200010b8
 800404c:	40000800 	.word	0x40000800

08004050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <MX_USART1_UART_Init+0x50>)
 8004058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800405c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004064:	2200      	movs	r2, #0
 8004066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800406a:	2200      	movs	r2, #0
 800406c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004070:	2200      	movs	r2, #0
 8004072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004076:	220c      	movs	r2, #12
 8004078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800407c:	2200      	movs	r2, #0
 800407e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004082:	2200      	movs	r2, #0
 8004084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004088:	f005 fa44 	bl	8009514 <HAL_UART_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004092:	f000 f996 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20001100 	.word	0x20001100
 80040a0:	40011000 	.word	0x40011000

080040a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <MX_USART2_UART_Init+0x50>)
 80040ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040ca:	220c      	movs	r2, #12
 80040cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_USART2_UART_Init+0x4c>)
 80040dc:	f005 fa1a 	bl	8009514 <HAL_UART_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040e6:	f000 f96c 	bl	80043c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20001144 	.word	0x20001144
 80040f4:	40004400 	.word	0x40004400

080040f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <MX_DMA_Init+0x78>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <MX_DMA_Init+0x78>)
 8004108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <MX_DMA_Init+0x78>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <MX_DMA_Init+0x78>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <MX_DMA_Init+0x78>)
 8004124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <MX_DMA_Init+0x78>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2011      	movs	r0, #17
 800413c:	f001 fa55 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004140:	2011      	movs	r0, #17
 8004142:	f001 fa6e 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	203a      	movs	r0, #58	; 0x3a
 800414c:	f001 fa4d 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004150:	203a      	movs	r0, #58	; 0x3a
 8004152:	f001 fa66 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004156:	2200      	movs	r2, #0
 8004158:	2100      	movs	r1, #0
 800415a:	2046      	movs	r0, #70	; 0x46
 800415c:	f001 fa45 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004160:	2046      	movs	r0, #70	; 0x46
 8004162:	f001 fa5e 	bl	8005622 <HAL_NVIC_EnableIRQ>

}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <MX_GPIO_Init+0x10c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a3b      	ldr	r2, [pc, #236]	; (8004280 <MX_GPIO_Init+0x10c>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <MX_GPIO_Init+0x10c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	4b35      	ldr	r3, [pc, #212]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a34      	ldr	r2, [pc, #208]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b32      	ldr	r3, [pc, #200]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <MX_GPIO_Init+0x10c>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 80041de:	2200      	movs	r2, #0
 80041e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041e4:	4827      	ldr	r0, [pc, #156]	; (8004284 <MX_GPIO_Init+0x110>)
 80041e6:	f001 ffbd 	bl	8006164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILED_Pin|ESP_RESET_Pin|ESP_ENABLEB4_Pin|ESP_RESETB6_Pin, GPIO_PIN_RESET);
 80041ea:	2200      	movs	r2, #0
 80041ec:	f241 0151 	movw	r1, #4177	; 0x1051
 80041f0:	4825      	ldr	r0, [pc, #148]	; (8004288 <MX_GPIO_Init+0x114>)
 80041f2:	f001 ffb7 	bl	8006164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fc:	4823      	ldr	r0, [pc, #140]	; (800428c <MX_GPIO_Init+0x118>)
 80041fe:	f001 ffb1 	bl	8006164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8004202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004208:	2301      	movs	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	4619      	mov	r1, r3
 800421a:	481a      	ldr	r0, [pc, #104]	; (8004284 <MX_GPIO_Init+0x110>)
 800421c:	f001 fe1e 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ILED_Pin ESP_RESET_Pin ESP_RESETB6_Pin */
  GPIO_InitStruct.Pin = ILED_Pin|ESP_RESET_Pin|ESP_RESETB6_Pin;
 8004220:	f241 0341 	movw	r3, #4161	; 0x1041
 8004224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004226:	2301      	movs	r3, #1
 8004228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004232:	f107 030c 	add.w	r3, r7, #12
 8004236:	4619      	mov	r1, r3
 8004238:	4813      	ldr	r0, [pc, #76]	; (8004288 <MX_GPIO_Init+0x114>)
 800423a:	f001 fe0f 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_ENABLE_Pin */
  GPIO_InitStruct.Pin = ESP_ENABLE_Pin;
 800423e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004244:	2301      	movs	r3, #1
 8004246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	4619      	mov	r1, r3
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <MX_GPIO_Init+0x118>)
 8004258:	f001 fe00 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_ENABLEB4_Pin */
  GPIO_InitStruct.Pin = ESP_ENABLEB4_Pin;
 800425c:	2310      	movs	r3, #16
 800425e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004260:	2301      	movs	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004264:	2302      	movs	r3, #2
 8004266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESP_ENABLEB4_GPIO_Port, &GPIO_InitStruct);
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	4619      	mov	r1, r3
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <MX_GPIO_Init+0x114>)
 8004274:	f001 fdf2 	bl	8005e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004278:	bf00      	nop
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	40020800 	.word	0x40020800
 8004288:	40020400 	.word	0x40020400
 800428c:	40020000 	.word	0x40020000

08004290 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_UART_TxCpltCallback+0x30>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d107      	bne.n	80042b2 <HAL_UART_TxCpltCallback+0x22>
		if(ogon==1000){
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_UART_TxCpltCallback+0x34>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042aa:	d102      	bne.n	80042b2 <HAL_UART_TxCpltCallback+0x22>
			ogon=0;
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_UART_TxCpltCallback+0x34>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40004400 	.word	0x40004400
 80042c4:	20000a48 	.word	0x20000a48

080042c8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <HAL_UART_ErrorCallback+0x4c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_UART_ErrorCallback+0x14>
		{
		__NOP();
 80042da:	bf00      	nop
		}
	if (huart->Instance == USART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <HAL_UART_ErrorCallback+0x50>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <HAL_UART_ErrorCallback+0x42>
		{
		__NOP();
 80042e6:	bf00      	nop
		HAL_UART_DMAStop(&huart1);
 80042e8:	480c      	ldr	r0, [pc, #48]	; (800431c <HAL_UART_ErrorCallback+0x54>)
 80042ea:	f005 fa71 	bl	80097d0 <HAL_UART_DMAStop>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_UART_ErrorCallback+0x58>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_UART_ErrorCallback+0x58>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 80042fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <HAL_UART_ErrorCallback+0x5c>)
 8004304:	4805      	ldr	r0, [pc, #20]	; (800431c <HAL_UART_ErrorCallback+0x54>)
 8004306:	f005 fae2 	bl	80098ce <HAL_UARTEx_ReceiveToIdle_DMA>
		}
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40004400 	.word	0x40004400
 8004318:	40011000 	.word	0x40011000
 800431c:	20001100 	.word	0x20001100
 8004320:	20001188 	.word	0x20001188
 8004324:	20000278 	.word	0x20000278

08004328 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_UARTEx_RxEventCallback+0x70>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d125      	bne.n	800438a <HAL_UARTEx_RxEventCallback+0x62>
		{
		uint16_t remain = huart1.RxXferCount;
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_UARTEx_RxEventCallback+0x74>)
 8004340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004342:	827b      	strh	r3, [r7, #18]
			int i;
			int temp;
			for(i=Size;i>0;i--){
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e012      	b.n	8004370 <HAL_UARTEx_RxEventCallback+0x48>
					temp=RxMainBuf_SIZE-remain-i;
 800434a:	8a7b      	ldrh	r3, [r7, #18]
 800434c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	60fb      	str	r3, [r7, #12]
					MainBuf[temp]=RxBuf[temp];
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <HAL_UARTEx_RxEventCallback+0x78>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2d9      	uxtb	r1, r3
 8004360:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	460a      	mov	r2, r1
 8004368:	701a      	strb	r2, [r3, #0]
			for(i=Size;i>0;i--){
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3b01      	subs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	dce9      	bgt.n	800434a <HAL_UARTEx_RxEventCallback+0x22>
				}
			glowa=RxMainBuf_SIZE-remain-i;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	b29a      	uxth	r2, r3
 800437a:	8a7b      	ldrh	r3, [r7, #18]
 800437c:	4413      	add	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004384:	b29a      	uxth	r2, r3
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_UARTEx_RxEventCallback+0x80>)
 8004388:	801a      	strh	r2, [r3, #0]
		}

}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40011000 	.word	0x40011000
 800439c:	20001100 	.word	0x20001100
 80043a0:	20000278 	.word	0x20000278
 80043a4:	20000660 	.word	0x20000660
 80043a8:	20000a4a 	.word	0x20000a4a

080043ac <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	__NOP();
 80043b4:	bf00      	nop
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c6:	b672      	cpsid	i
}
 80043c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043ca:	e7fe      	b.n	80043ca <Error_Handler+0x8>

080043cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_MspInit+0x4c>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <HAL_MspInit+0x4c>)
 80043dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_MspInit+0x4c>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_MspInit+0x4c>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <HAL_MspInit+0x4c>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_MspInit+0x4c>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <HAL_ADC_MspInit+0x7c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d127      	bne.n	800448e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_ADC_MspInit+0x80>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_ADC_MspInit+0x80>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_ADC_MspInit+0x80>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_ADC_MspInit+0x80>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <HAL_ADC_MspInit+0x80>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_ADC_MspInit+0x80>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8004476:	2350      	movs	r3, #80	; 0x50
 8004478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800447a:	2303      	movs	r3, #3
 800447c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	4619      	mov	r1, r3
 8004488:	4805      	ldr	r0, [pc, #20]	; (80044a0 <HAL_ADC_MspInit+0x84>)
 800448a:	f001 fce7 	bl	8005e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800448e:	bf00      	nop
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40012000 	.word	0x40012000
 800449c:	40023800 	.word	0x40023800
 80044a0:	40020000 	.word	0x40020000

080044a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_I2C_MspInit+0x94>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d134      	bne.n	8004530 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_I2C_MspInit+0x98>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_I2C_MspInit+0x98>)
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_I2C_MspInit+0x98>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044e8:	2312      	movs	r3, #18
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f0:	2303      	movs	r3, #3
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044f4:	2304      	movs	r3, #4
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	4810      	ldr	r0, [pc, #64]	; (8004540 <HAL_I2C_MspInit+0x9c>)
 8004500:	f001 fcac 	bl	8005e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_I2C_MspInit+0x98>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a0b      	ldr	r2, [pc, #44]	; (800453c <HAL_I2C_MspInit+0x98>)
 800450e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_I2C_MspInit+0x98>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004520:	2200      	movs	r2, #0
 8004522:	2100      	movs	r1, #0
 8004524:	2020      	movs	r0, #32
 8004526:	f001 f860 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800452a:	2020      	movs	r0, #32
 800452c:	f001 f879 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004530:	bf00      	nop
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40005400 	.word	0x40005400
 800453c:	40023800 	.word	0x40023800
 8004540:	40020400 	.word	0x40020400

08004544 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <HAL_RTC_MspInit+0x50>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d111      	bne.n	800458a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004566:	2302      	movs	r3, #2
 8004568:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800456a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800456e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4618      	mov	r0, r3
 8004576:	f003 fd63 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004580:	f7ff ff1f 	bl	80043c2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <HAL_RTC_MspInit+0x54>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800458a:	bf00      	nop
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40002800 	.word	0x40002800
 8004598:	42470e3c 	.word	0x42470e3c

0800459c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80045ca:	e012      	b.n	80045f2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_TIM_Base_MspInit+0x68>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10d      	bne.n	80045f2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_TIM_Base_MspInit+0x64>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40000800 	.word	0x40000800

08004608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 031c 	add.w	r3, r7, #28
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a81      	ldr	r2, [pc, #516]	; (800482c <HAL_UART_MspInit+0x224>)
 8004626:	4293      	cmp	r3, r2
 8004628:	f040 8094 	bne.w	8004754 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	4b7f      	ldr	r3, [pc, #508]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	4a7e      	ldr	r2, [pc, #504]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004636:	f043 0310 	orr.w	r3, r3, #16
 800463a:	6453      	str	r3, [r2, #68]	; 0x44
 800463c:	4b7c      	ldr	r3, [pc, #496]	; (8004830 <HAL_UART_MspInit+0x228>)
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	4b78      	ldr	r3, [pc, #480]	; (8004830 <HAL_UART_MspInit+0x228>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	4a77      	ldr	r2, [pc, #476]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6313      	str	r3, [r2, #48]	; 0x30
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <HAL_UART_MspInit+0x228>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004664:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466a:	2302      	movs	r3, #2
 800466c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004672:	2303      	movs	r3, #3
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004676:	2307      	movs	r3, #7
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	f107 031c 	add.w	r3, r7, #28
 800467e:	4619      	mov	r1, r3
 8004680:	486c      	ldr	r0, [pc, #432]	; (8004834 <HAL_UART_MspInit+0x22c>)
 8004682:	f001 fbeb 	bl	8005e5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004686:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <HAL_UART_MspInit+0x230>)
 8004688:	4a6c      	ldr	r2, [pc, #432]	; (800483c <HAL_UART_MspInit+0x234>)
 800468a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800468c:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <HAL_UART_MspInit+0x230>)
 800468e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004692:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004694:	4b68      	ldr	r3, [pc, #416]	; (8004838 <HAL_UART_MspInit+0x230>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800469a:	4b67      	ldr	r3, [pc, #412]	; (8004838 <HAL_UART_MspInit+0x230>)
 800469c:	2200      	movs	r2, #0
 800469e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046a0:	4b65      	ldr	r3, [pc, #404]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046a8:	4b63      	ldr	r3, [pc, #396]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046ae:	4b62      	ldr	r3, [pc, #392]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046b4:	4b60      	ldr	r3, [pc, #384]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046c4:	4b5c      	ldr	r3, [pc, #368]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046ca:	485b      	ldr	r0, [pc, #364]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046cc:	f000 ffc4 	bl	8005658 <HAL_DMA_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80046d6:	f7ff fe74 	bl	80043c2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
 80046e0:	4a55      	ldr	r2, [pc, #340]	; (8004838 <HAL_UART_MspInit+0x230>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_UART_MspInit+0x238>)
 80046e8:	4a56      	ldr	r2, [pc, #344]	; (8004844 <HAL_UART_MspInit+0x23c>)
 80046ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80046ec:	4b54      	ldr	r3, [pc, #336]	; (8004840 <HAL_UART_MspInit+0x238>)
 80046ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046f4:	4b52      	ldr	r3, [pc, #328]	; (8004840 <HAL_UART_MspInit+0x238>)
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fa:	4b51      	ldr	r3, [pc, #324]	; (8004840 <HAL_UART_MspInit+0x238>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004700:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <HAL_UART_MspInit+0x238>)
 8004702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004706:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004708:	4b4d      	ldr	r3, [pc, #308]	; (8004840 <HAL_UART_MspInit+0x238>)
 800470a:	2200      	movs	r2, #0
 800470c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800470e:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_UART_MspInit+0x238>)
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004714:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <HAL_UART_MspInit+0x238>)
 8004716:	2200      	movs	r2, #0
 8004718:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800471a:	4b49      	ldr	r3, [pc, #292]	; (8004840 <HAL_UART_MspInit+0x238>)
 800471c:	2200      	movs	r2, #0
 800471e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004720:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_UART_MspInit+0x238>)
 8004722:	2200      	movs	r2, #0
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004726:	4846      	ldr	r0, [pc, #280]	; (8004840 <HAL_UART_MspInit+0x238>)
 8004728:	f000 ff96 	bl	8005658 <HAL_DMA_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004732:	f7ff fe46 	bl	80043c2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a41      	ldr	r2, [pc, #260]	; (8004840 <HAL_UART_MspInit+0x238>)
 800473a:	635a      	str	r2, [r3, #52]	; 0x34
 800473c:	4a40      	ldr	r2, [pc, #256]	; (8004840 <HAL_UART_MspInit+0x238>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	2025      	movs	r0, #37	; 0x25
 8004748:	f000 ff4f 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800474c:	2025      	movs	r0, #37	; 0x25
 800474e:	f000 ff68 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004752:	e066      	b.n	8004822 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_UART_MspInit+0x240>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d161      	bne.n	8004822 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	4b33      	ldr	r3, [pc, #204]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a32      	ldr	r2, [pc, #200]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b30      	ldr	r3, [pc, #192]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <HAL_UART_MspInit+0x228>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_UART_MspInit+0x228>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004796:	230c      	movs	r3, #12
 8004798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047a6:	2307      	movs	r3, #7
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4820      	ldr	r0, [pc, #128]	; (8004834 <HAL_UART_MspInit+0x22c>)
 80047b2:	f001 fb53 	bl	8005e5c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80047b6:	4b25      	ldr	r3, [pc, #148]	; (800484c <HAL_UART_MspInit+0x244>)
 80047b8:	4a25      	ldr	r2, [pc, #148]	; (8004850 <HAL_UART_MspInit+0x248>)
 80047ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_UART_MspInit+0x244>)
 80047be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_UART_MspInit+0x244>)
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_UART_MspInit+0x244>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_UART_MspInit+0x244>)
 80047d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_UART_MspInit+0x244>)
 80047da:	2200      	movs	r2, #0
 80047dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_UART_MspInit+0x244>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_UART_MspInit+0x244>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_UART_MspInit+0x244>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_UART_MspInit+0x244>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047f6:	4815      	ldr	r0, [pc, #84]	; (800484c <HAL_UART_MspInit+0x244>)
 80047f8:	f000 ff2e 	bl	8005658 <HAL_DMA_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8004802:	f7ff fdde 	bl	80043c2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <HAL_UART_MspInit+0x244>)
 800480a:	635a      	str	r2, [r3, #52]	; 0x34
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_UART_MspInit+0x244>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	2026      	movs	r0, #38	; 0x26
 8004818:	f000 fee7 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800481c:	2026      	movs	r0, #38	; 0x26
 800481e:	f000 ff00 	bl	8005622 <HAL_NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3730      	adds	r7, #48	; 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40023800 	.word	0x40023800
 8004834:	40020000 	.word	0x40020000
 8004838:	20001188 	.word	0x20001188
 800483c:	40026440 	.word	0x40026440
 8004840:	200011e8 	.word	0x200011e8
 8004844:	400264b8 	.word	0x400264b8
 8004848:	40004400 	.word	0x40004400
 800484c:	20001248 	.word	0x20001248
 8004850:	400260a0 	.word	0x400260a0

08004854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004858:	e7fe      	b.n	8004858 <NMI_Handler+0x4>

0800485a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800485e:	e7fe      	b.n	800485e <HardFault_Handler+0x4>

08004860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004864:	e7fe      	b.n	8004864 <MemManage_Handler+0x4>

08004866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486a:	e7fe      	b.n	800486a <BusFault_Handler+0x4>

0800486c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004870:	e7fe      	b.n	8004870 <UsageFault_Handler+0x4>

08004872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f000 f992 	bl	8004bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <DMA1_Stream6_IRQHandler+0x10>)
 80048ae:	f001 f86b 	bl	8005988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20001248 	.word	0x20001248

080048bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <I2C1_ER_IRQHandler+0x10>)
 80048c2:	f002 f8cd 	bl	8006a60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000ffc 	.word	0x20000ffc

080048d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <USART1_IRQHandler+0x10>)
 80048d6:	f005 f85f 	bl	8009998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20001100 	.word	0x20001100

080048e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <USART2_IRQHandler+0x10>)
 80048ea:	f005 f855 	bl	8009998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20001144 	.word	0x20001144

080048f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <DMA2_Stream2_IRQHandler+0x10>)
 80048fe:	f001 f843 	bl	8005988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20001188 	.word	0x20001188

0800490c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <DMA2_Stream7_IRQHandler+0x10>)
 8004912:	f001 f839 	bl	8005988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200011e8 	.word	0x200011e8

08004920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return 1;
 8004924:	2301      	movs	r3, #1
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <_kill>:

int _kill(int pid, int sig)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800493a:	f006 f96f 	bl	800ac1c <__errno>
 800493e:	4603      	mov	r3, r0
 8004940:	2216      	movs	r2, #22
 8004942:	601a      	str	r2, [r3, #0]
  return -1;
 8004944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_exit>:

void _exit (int status)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004958:	f04f 31ff 	mov.w	r1, #4294967295
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ffe7 	bl	8004930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004962:	e7fe      	b.n	8004962 <_exit+0x12>

08004964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e00a      	b.n	800498c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004976:	f3af 8000 	nop.w
 800497a:	4601      	mov	r1, r0
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	60ba      	str	r2, [r7, #8]
 8004982:	b2ca      	uxtb	r2, r1
 8004984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	dbf0      	blt.n	8004976 <_read+0x12>
  }

  return len;
 8004994:	687b      	ldr	r3, [r7, #4]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e009      	b.n	80049c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	60ba      	str	r2, [r7, #8]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dbf1      	blt.n	80049b0 <_write+0x12>
  }
  return len;
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_close>:

int _close(int file)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_isatty>:

int _isatty(int file)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <_sbrk+0x5c>)
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <_sbrk+0x60>)
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <_sbrk+0x64>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <_sbrk+0x64>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <_sbrk+0x68>)
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <_sbrk+0x64>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a70:	f006 f8d4 	bl	800ac1c <__errno>
 8004a74:	4603      	mov	r3, r0
 8004a76:	220c      	movs	r2, #12
 8004a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7e:	e009      	b.n	8004a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <_sbrk+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <_sbrk+0x64>)
 8004a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20010000 	.word	0x20010000
 8004aa0:	00000400 	.word	0x00000400
 8004aa4:	200012a8 	.word	0x200012a8
 8004aa8:	200012c0 	.word	0x200012c0

08004aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <SystemInit+0x20>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <SystemInit+0x20>)
 8004ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ad4:	480d      	ldr	r0, [pc, #52]	; (8004b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ad6:	490e      	ldr	r1, [pc, #56]	; (8004b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ad8:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004adc:	e002      	b.n	8004ae4 <LoopCopyDataInit>

08004ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ae2:	3304      	adds	r3, #4

08004ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae8:	d3f9      	bcc.n	8004ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aea:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004aec:	4c0b      	ldr	r4, [pc, #44]	; (8004b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af0:	e001      	b.n	8004af6 <LoopFillZerobss>

08004af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af4:	3204      	adds	r2, #4

08004af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af8:	d3fb      	bcc.n	8004af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004afa:	f7ff ffd7 	bl	8004aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004afe:	f006 f893 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b02:	f7fe ffb3 	bl	8003a6c <main>
  bx  lr    
 8004b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b10:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004b14:	0800e164 	.word	0x0800e164
  ldr r2, =_sbss
 8004b18:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004b1c:	200012c0 	.word	0x200012c0

08004b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b20:	e7fe      	b.n	8004b20 <ADC_IRQHandler>
	...

08004b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_Init+0x40>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <HAL_Init+0x40>)
 8004b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_Init+0x40>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_Init+0x40>)
 8004b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_Init+0x40>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_Init+0x40>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	f000 fd41 	bl	80055d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b52:	200f      	movs	r0, #15
 8004b54:	f000 f808 	bl	8004b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b58:	f7ff fc38 	bl	80043cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023c00 	.word	0x40023c00

08004b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_InitTick+0x54>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_InitTick+0x58>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd59 	bl	800563e <HAL_SYSTICK_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00e      	b.n	8004bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d80a      	bhi.n	8004bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	f000 fd21 	bl	80055ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <HAL_InitTick+0x5c>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000004 	.word	0x20000004
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	20000008 	.word	0x20000008

08004bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_IncTick+0x20>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_IncTick+0x24>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_IncTick+0x24>)
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c
 8004bec:	200012ac 	.word	0x200012ac

08004bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_GetTick+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200012ac 	.word	0x200012ac

08004c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7ff ffee 	bl	8004bf0 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d005      	beq.n	8004c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_Delay+0x44>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c2e:	bf00      	nop
 8004c30:	f7ff ffde 	bl	8004bf0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d8f7      	bhi.n	8004c30 <HAL_Delay+0x28>
  {
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6053      	str	r3, [r2, #4]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e0042000 	.word	0xe0042000

08004c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e033      	b.n	8004cee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fbc4 	bl	800441c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d118      	bne.n	8004ce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cb6:	f023 0302 	bic.w	r3, r3, #2
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 faba 	bl	800523c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8004cde:	e001      	b.n	8004ce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_Start+0x1a>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e097      	b.n	8004e42 <HAL_ADC_Start+0x14a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d018      	beq.n	8004d5a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d38:	4b45      	ldr	r3, [pc, #276]	; (8004e50 <HAL_ADC_Start+0x158>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a45      	ldr	r2, [pc, #276]	; (8004e54 <HAL_ADC_Start+0x15c>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0c9a      	lsrs	r2, r3, #18
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d4c:	e002      	b.n	8004d54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f9      	bne.n	8004d4e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d15f      	bne.n	8004e28 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d106      	bne.n	8004db6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	f023 0206 	bic.w	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
 8004db4:	e002      	b.n	8004dbc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dc4:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_ADC_Start+0x160>)
 8004dc6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004dd0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d129      	bne.n	8004e40 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e020      	b.n	8004e40 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <HAL_ADC_Start+0x164>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d11b      	bne.n	8004e40 <HAL_ADC_Start+0x148>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d114      	bne.n	8004e40 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e24:	609a      	str	r2, [r3, #8]
 8004e26:	e00b      	b.n	8004e40 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0210 	orr.w	r2, r3, #16
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f043 0201 	orr.w	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000004 	.word	0x20000004
 8004e54:	431bde83 	.word	0x431bde83
 8004e58:	40012300 	.word	0x40012300
 8004e5c:	40012000 	.word	0x40012000

08004e60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_ADC_Stop+0x16>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e021      	b.n	8004eba <HAL_ADC_Stop+0x5a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee2:	d113      	bne.n	8004f0c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d10b      	bne.n	8004f0c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e063      	b.n	8004fd4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f0c:	f7ff fe70 	bl	8004bf0 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f12:	e021      	b.n	8004f58 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d01d      	beq.n	8004f58 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_ADC_PollForConversion+0x6c>
 8004f22:	f7ff fe65 	bl	8004bf0 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d212      	bcs.n	8004f58 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d00b      	beq.n	8004f58 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e03d      	b.n	8004fd4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d1d6      	bne.n	8004f14 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0212 	mvn.w	r2, #18
 8004f6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11f      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d111      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e105      	b.n	8005220 <HAL_ADC_ConfigChannel+0x228>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b09      	cmp	r3, #9
 8005022:	d925      	bls.n	8005070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	3b1e      	subs	r3, #30
 800503a:	2207      	movs	r2, #7
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43da      	mvns	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	400a      	ands	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	4618      	mov	r0, r3
 800505c:	4603      	mov	r3, r0
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4403      	add	r3, r0
 8005062:	3b1e      	subs	r3, #30
 8005064:	409a      	lsls	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e022      	b.n	80050b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6919      	ldr	r1, [r3, #16]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	2207      	movs	r2, #7
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	400a      	ands	r2, r1
 8005092:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6919      	ldr	r1, [r3, #16]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4618      	mov	r0, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4403      	add	r3, r0
 80050ac:	409a      	lsls	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d824      	bhi.n	8005108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	3b05      	subs	r3, #5
 80050d0:	221f      	movs	r2, #31
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	400a      	ands	r2, r1
 80050de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4618      	mov	r0, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	3b05      	subs	r3, #5
 80050fa:	fa00 f203 	lsl.w	r2, r0, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	635a      	str	r2, [r3, #52]	; 0x34
 8005106:	e04c      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d824      	bhi.n	800515a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	3b23      	subs	r3, #35	; 0x23
 8005122:	221f      	movs	r2, #31
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43da      	mvns	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	400a      	ands	r2, r1
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	4618      	mov	r0, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	3b23      	subs	r3, #35	; 0x23
 800514c:	fa00 f203 	lsl.w	r2, r0, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
 8005158:	e023      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	3b41      	subs	r3, #65	; 0x41
 800516c:	221f      	movs	r2, #31
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	400a      	ands	r2, r1
 800517a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	4618      	mov	r0, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	3b41      	subs	r3, #65	; 0x41
 8005196:	fa00 f203 	lsl.w	r2, r0, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_ADC_ConfigChannel+0x234>)
 80051a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a21      	ldr	r2, [pc, #132]	; (8005230 <HAL_ADC_ConfigChannel+0x238>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1cc>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b12      	cmp	r3, #18
 80051b6:	d105      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_ADC_ConfigChannel+0x238>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d123      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x21e>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d003      	beq.n	80051de <HAL_ADC_ConfigChannel+0x1e6>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b11      	cmp	r3, #17
 80051dc:	d11b      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d111      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <HAL_ADC_ConfigChannel+0x23c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <HAL_ADC_ConfigChannel+0x240>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	0c9a      	lsrs	r2, r3, #18
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005208:	e002      	b.n	8005210 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3b01      	subs	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f9      	bne.n	800520a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40012300 	.word	0x40012300
 8005230:	40012000 	.word	0x40012000
 8005234:	20000004 	.word	0x20000004
 8005238:	431bde83 	.word	0x431bde83

0800523c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005244:	4b79      	ldr	r3, [pc, #484]	; (800542c <ADC_Init+0x1f0>)
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	021a      	lsls	r2, r3, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	4a58      	ldr	r2, [pc, #352]	; (8005430 <ADC_Init+0x1f4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6899      	ldr	r1, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6899      	ldr	r1, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e00f      	b.n	800533a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005338:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0202 	bic.w	r2, r2, #2
 8005348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6899      	ldr	r1, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7e1b      	ldrb	r3, [r3, #24]
 8005354:	005a      	lsls	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005376:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005386:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	3b01      	subs	r3, #1
 8005394:	035a      	lsls	r2, r3, #13
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	e007      	b.n	80053b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	051a      	lsls	r2, r3, #20
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6899      	ldr	r1, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053f2:	025a      	lsls	r2, r3, #9
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6899      	ldr	r1, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	029a      	lsls	r2, r3, #10
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40012300 	.word	0x40012300
 8005430:	0f000001 	.word	0x0f000001

08005434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800545c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005466:	4a04      	ldr	r2, [pc, #16]	; (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	60d3      	str	r3, [r2, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <__NVIC_GetPriorityGrouping+0x18>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0307 	and.w	r3, r3, #7
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db0b      	blt.n	80054c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <__NVIC_EnableIRQ+0x38>)
 80054b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	fa00 f202 	lsl.w	r2, r0, r2
 80054be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	; (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
         );
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	; 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a0:	d301      	bcc.n	80055a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055a2:	2301      	movs	r3, #1
 80055a4:	e00f      	b.n	80055c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a6:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <SysTick_Config+0x40>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ae:	210f      	movs	r1, #15
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	f7ff ff8e 	bl	80054d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <SysTick_Config+0x40>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <SysTick_Config+0x40>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010

080055d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff29 	bl	8005434 <__NVIC_SetPriorityGrouping>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055fc:	f7ff ff3e 	bl	800547c <__NVIC_GetPriorityGrouping>
 8005600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7ff ff8e 	bl	8005528 <NVIC_EncodePriority>
 800560c:	4602      	mov	r2, r0
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff5d 	bl	80054d4 <__NVIC_SetPriority>
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ff31 	bl	8005498 <__NVIC_EnableIRQ>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ffa2 	bl	8005590 <SysTick_Config>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7ff fac4 	bl	8004bf0 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e099      	b.n	80057a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005694:	e00f      	b.n	80056b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005696:	f7ff faab 	bl	8004bf0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b05      	cmp	r3, #5
 80056a2:	d908      	bls.n	80056b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e078      	b.n	80057a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e8      	bne.n	8005696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <HAL_DMA_Init+0x158>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	2b04      	cmp	r3, #4
 800570e:	d107      	bne.n	8005720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	4313      	orrs	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2b04      	cmp	r3, #4
 8005748:	d117      	bne.n	800577a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fb01 	bl	8005d64 <DMA_CheckFifoParam>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005776:	2301      	movs	r3, #1
 8005778:	e016      	b.n	80057a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fab8 	bl	8005cf8 <DMA_CalcBaseAndBitshift>
 8005788:	4603      	mov	r3, r0
 800578a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	223f      	movs	r2, #63	; 0x3f
 8005792:	409a      	lsls	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	f010803f 	.word	0xf010803f

080057b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_DMA_Start_IT+0x26>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e040      	b.n	800585c <HAL_DMA_Start_IT+0xa8>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d12f      	bne.n	800584e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fa4a 	bl	8005c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	223f      	movs	r2, #63	; 0x3f
 800580e:	409a      	lsls	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0216 	orr.w	r2, r2, #22
 8005822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0208 	orr.w	r2, r2, #8
 800583a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e005      	b.n	800585a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005856:	2302      	movs	r3, #2
 8005858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005872:	f7ff f9bd 	bl	8004bf0 <HAL_GetTick>
 8005876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d008      	beq.n	8005896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e052      	b.n	800593c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0216 	bic.w	r2, r2, #22
 80058a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <HAL_DMA_Abort+0x62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0208 	bic.w	r2, r2, #8
 80058d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058e6:	e013      	b.n	8005910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e8:	f7ff f982 	bl	8004bf0 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d90c      	bls.n	8005910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2203      	movs	r2, #3
 8005900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e015      	b.n	800593c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e4      	bne.n	80058e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005922:	223f      	movs	r2, #63	; 0x3f
 8005924:	409a      	lsls	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d004      	beq.n	8005962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e00c      	b.n	800597c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2205      	movs	r2, #5
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005994:	4b8e      	ldr	r3, [pc, #568]	; (8005bd0 <HAL_DMA_IRQHandler+0x248>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a8e      	ldr	r2, [pc, #568]	; (8005bd4 <HAL_DMA_IRQHandler+0x24c>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	2208      	movs	r2, #8
 80059b4:	409a      	lsls	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01a      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0204 	bic.w	r2, r2, #4
 80059da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	2208      	movs	r2, #8
 80059e2:	409a      	lsls	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	2201      	movs	r2, #1
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	2201      	movs	r2, #1
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	f043 0202 	orr.w	r2, r3, #2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2e:	2204      	movs	r2, #4
 8005a30:	409a      	lsls	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d012      	beq.n	8005a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	f043 0204 	orr.w	r2, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	2210      	movs	r2, #16
 8005a66:	409a      	lsls	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d043      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03c      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	2210      	movs	r2, #16
 8005a84:	409a      	lsls	r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d024      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
 8005ab6:	e01f      	b.n	8005af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
 8005ac8:	e016      	b.n	8005af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d107      	bne.n	8005ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0208 	bic.w	r2, r2, #8
 8005ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	2220      	movs	r2, #32
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 808f 	beq.w	8005c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8087 	beq.w	8005c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1e:	2220      	movs	r2, #32
 8005b20:	409a      	lsls	r2, r3
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d136      	bne.n	8005ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0216 	bic.w	r2, r2, #22
 8005b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_DMA_IRQHandler+0x1da>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0208 	bic.w	r2, r2, #8
 8005b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	223f      	movs	r2, #63	; 0x3f
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d07e      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
        }
        return;
 8005b9e:	e079      	b.n	8005c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01d      	beq.n	8005bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10d      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d031      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e02c      	b.n	8005c28 <HAL_DMA_IRQHandler+0x2a0>
 8005bce:	bf00      	nop
 8005bd0:	20000004 	.word	0x20000004
 8005bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d023      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
 8005be8:	e01e      	b.n	8005c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10f      	bne.n	8005c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0210 	bic.w	r2, r2, #16
 8005c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d032      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d022      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2205      	movs	r2, #5
 8005c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d307      	bcc.n	8005c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f2      	bne.n	8005c54 <HAL_DMA_IRQHandler+0x2cc>
 8005c6e:	e000      	b.n	8005c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
 8005c92:	e000      	b.n	8005c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c94:	bf00      	nop
    }
  }
}
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d108      	bne.n	8005cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cda:	e007      	b.n	8005cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	3b10      	subs	r3, #16
 8005d08:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <DMA_CalcBaseAndBitshift+0x64>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d12:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <DMA_CalcBaseAndBitshift+0x68>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d909      	bls.n	8005d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	; 0x58
 8005d38:	e007      	b.n	8005d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	aaaaaaab 	.word	0xaaaaaaab
 8005d60:	0800dd74 	.word	0x0800dd74

08005d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11f      	bne.n	8005dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d856      	bhi.n	8005e32 <DMA_CheckFifoParam+0xce>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <DMA_CheckFifoParam+0x28>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005d9d 	.word	0x08005d9d
 8005d98:	08005e33 	.word	0x08005e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d046      	beq.n	8005e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dac:	e043      	b.n	8005e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005db6:	d140      	bne.n	8005e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dbc:	e03d      	b.n	8005e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc6:	d121      	bne.n	8005e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d837      	bhi.n	8005e3e <DMA_CheckFifoParam+0xda>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <DMA_CheckFifoParam+0x70>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005deb 	.word	0x08005deb
 8005ddc:	08005de5 	.word	0x08005de5
 8005de0:	08005dfd 	.word	0x08005dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e030      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d025      	beq.n	8005e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dfa:	e022      	b.n	8005e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e04:	d11f      	bne.n	8005e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e0a:	e01c      	b.n	8005e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d903      	bls.n	8005e1a <DMA_CheckFifoParam+0xb6>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d003      	beq.n	8005e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e18:	e018      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1e:	e015      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e00b      	b.n	8005e4a <DMA_CheckFifoParam+0xe6>
      break;
 8005e32:	bf00      	nop
 8005e34:	e00a      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e36:	bf00      	nop
 8005e38:	e008      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e006      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e004      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b089      	sub	sp, #36	; 0x24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e159      	b.n	800612c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	f040 8148 	bne.w	8006126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d005      	beq.n	8005eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d130      	bne.n	8005f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 0201 	and.w	r2, r3, #1
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d017      	beq.n	8005f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	2203      	movs	r2, #3
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d123      	bne.n	8005fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	08da      	lsrs	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	220f      	movs	r2, #15
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	2203      	movs	r2, #3
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0203 	and.w	r2, r3, #3
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80a2 	beq.w	8006126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	4b57      	ldr	r3, [pc, #348]	; (8006144 <HAL_GPIO_Init+0x2e8>)
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	4a56      	ldr	r2, [pc, #344]	; (8006144 <HAL_GPIO_Init+0x2e8>)
 8005fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff2:	4b54      	ldr	r3, [pc, #336]	; (8006144 <HAL_GPIO_Init+0x2e8>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ffe:	4a52      	ldr	r2, [pc, #328]	; (8006148 <HAL_GPIO_Init+0x2ec>)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	089b      	lsrs	r3, r3, #2
 8006004:	3302      	adds	r3, #2
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a49      	ldr	r2, [pc, #292]	; (800614c <HAL_GPIO_Init+0x2f0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d019      	beq.n	800605e <HAL_GPIO_Init+0x202>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a48      	ldr	r2, [pc, #288]	; (8006150 <HAL_GPIO_Init+0x2f4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_GPIO_Init+0x1fe>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a47      	ldr	r2, [pc, #284]	; (8006154 <HAL_GPIO_Init+0x2f8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00d      	beq.n	8006056 <HAL_GPIO_Init+0x1fa>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a46      	ldr	r2, [pc, #280]	; (8006158 <HAL_GPIO_Init+0x2fc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <HAL_GPIO_Init+0x1f6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a45      	ldr	r2, [pc, #276]	; (800615c <HAL_GPIO_Init+0x300>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_GPIO_Init+0x1f2>
 800604a:	2304      	movs	r3, #4
 800604c:	e008      	b.n	8006060 <HAL_GPIO_Init+0x204>
 800604e:	2307      	movs	r3, #7
 8006050:	e006      	b.n	8006060 <HAL_GPIO_Init+0x204>
 8006052:	2303      	movs	r3, #3
 8006054:	e004      	b.n	8006060 <HAL_GPIO_Init+0x204>
 8006056:	2302      	movs	r3, #2
 8006058:	e002      	b.n	8006060 <HAL_GPIO_Init+0x204>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_GPIO_Init+0x204>
 800605e:	2300      	movs	r3, #0
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	f002 0203 	and.w	r2, r2, #3
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	4093      	lsls	r3, r2
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006070:	4935      	ldr	r1, [pc, #212]	; (8006148 <HAL_GPIO_Init+0x2ec>)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	3302      	adds	r3, #2
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800607e:	4b38      	ldr	r3, [pc, #224]	; (8006160 <HAL_GPIO_Init+0x304>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060a2:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060a8:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060cc:	4a24      	ldr	r2, [pc, #144]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060f6:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060fc:	4b18      	ldr	r3, [pc, #96]	; (8006160 <HAL_GPIO_Init+0x304>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006120:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <HAL_GPIO_Init+0x304>)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	3301      	adds	r3, #1
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b0f      	cmp	r3, #15
 8006130:	f67f aea2 	bls.w	8005e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	40013800 	.word	0x40013800
 800614c:	40020000 	.word	0x40020000
 8006150:	40020400 	.word	0x40020400
 8006154:	40020800 	.word	0x40020800
 8006158:	40020c00 	.word	0x40020c00
 800615c:	40021000 	.word	0x40021000
 8006160:	40013c00 	.word	0x40013c00

08006164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
 8006170:	4613      	mov	r3, r2
 8006172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006174:	787b      	ldrb	r3, [r7, #1]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800617a:	887a      	ldrh	r2, [r7, #2]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006180:	e003      	b.n	800618a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006182:	887b      	ldrh	r3, [r7, #2]
 8006184:	041a      	lsls	r2, r3, #16
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	619a      	str	r2, [r3, #24]
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e12b      	b.n	8006402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe f970 	bl	80044a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061fc:	f001 fef8 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 8006200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4a81      	ldr	r2, [pc, #516]	; (800640c <HAL_I2C_Init+0x274>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d807      	bhi.n	800621c <HAL_I2C_Init+0x84>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a80      	ldr	r2, [pc, #512]	; (8006410 <HAL_I2C_Init+0x278>)
 8006210:	4293      	cmp	r3, r2
 8006212:	bf94      	ite	ls
 8006214:	2301      	movls	r3, #1
 8006216:	2300      	movhi	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e006      	b.n	800622a <HAL_I2C_Init+0x92>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a7d      	ldr	r2, [pc, #500]	; (8006414 <HAL_I2C_Init+0x27c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	bf94      	ite	ls
 8006224:	2301      	movls	r3, #1
 8006226:	2300      	movhi	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0e7      	b.n	8006402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a78      	ldr	r2, [pc, #480]	; (8006418 <HAL_I2C_Init+0x280>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	0c9b      	lsrs	r3, r3, #18
 800623c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a6a      	ldr	r2, [pc, #424]	; (800640c <HAL_I2C_Init+0x274>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d802      	bhi.n	800626c <HAL_I2C_Init+0xd4>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	3301      	adds	r3, #1
 800626a:	e009      	b.n	8006280 <HAL_I2C_Init+0xe8>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	4a69      	ldr	r2, [pc, #420]	; (800641c <HAL_I2C_Init+0x284>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	099b      	lsrs	r3, r3, #6
 800627e:	3301      	adds	r3, #1
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	430b      	orrs	r3, r1
 8006286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	495c      	ldr	r1, [pc, #368]	; (800640c <HAL_I2C_Init+0x274>)
 800629c:	428b      	cmp	r3, r1
 800629e:	d819      	bhi.n	80062d4 <HAL_I2C_Init+0x13c>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1e59      	subs	r1, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062b4:	400b      	ands	r3, r1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_I2C_Init+0x138>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1e59      	subs	r1, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80062c8:	3301      	adds	r3, #1
 80062ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ce:	e051      	b.n	8006374 <HAL_I2C_Init+0x1dc>
 80062d0:	2304      	movs	r3, #4
 80062d2:	e04f      	b.n	8006374 <HAL_I2C_Init+0x1dc>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d111      	bne.n	8006300 <HAL_I2C_Init+0x168>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1e58      	subs	r0, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6859      	ldr	r1, [r3, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	440b      	add	r3, r1
 80062ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ee:	3301      	adds	r3, #1
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e012      	b.n	8006326 <HAL_I2C_Init+0x18e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1e58      	subs	r0, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	0099      	lsls	r1, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	fbb0 f3f3 	udiv	r3, r0, r3
 8006316:	3301      	adds	r3, #1
 8006318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_I2C_Init+0x196>
 800632a:	2301      	movs	r3, #1
 800632c:	e022      	b.n	8006374 <HAL_I2C_Init+0x1dc>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10e      	bne.n	8006354 <HAL_I2C_Init+0x1bc>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1e58      	subs	r0, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6859      	ldr	r1, [r3, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	440b      	add	r3, r1
 8006344:	fbb0 f3f3 	udiv	r3, r0, r3
 8006348:	3301      	adds	r3, #1
 800634a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006352:	e00f      	b.n	8006374 <HAL_I2C_Init+0x1dc>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1e58      	subs	r0, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	0099      	lsls	r1, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	fbb0 f3f3 	udiv	r3, r0, r3
 800636a:	3301      	adds	r3, #1
 800636c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	6809      	ldr	r1, [r1, #0]
 8006378:	4313      	orrs	r3, r2
 800637a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6911      	ldr	r1, [r2, #16]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	4311      	orrs	r1, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	000186a0 	.word	0x000186a0
 8006410:	001e847f 	.word	0x001e847f
 8006414:	003d08ff 	.word	0x003d08ff
 8006418:	431bde83 	.word	0x431bde83
 800641c:	10624dd3 	.word	0x10624dd3

08006420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	460b      	mov	r3, r1
 8006434:	813b      	strh	r3, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800643a:	f7fe fbd9 	bl	8004bf0 <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	f040 80d9 	bne.w	8006600 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2319      	movs	r3, #25
 8006454:	2201      	movs	r2, #1
 8006456:	496d      	ldr	r1, [pc, #436]	; (800660c <HAL_I2C_Mem_Write+0x1ec>)
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 ff8f 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
 8006466:	e0cc      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_I2C_Mem_Write+0x56>
 8006472:	2302      	movs	r3, #2
 8006474:	e0c5      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d007      	beq.n	800649c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	; 0x21
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a4d      	ldr	r2, [pc, #308]	; (8006610 <HAL_I2C_Mem_Write+0x1f0>)
 80064dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064de:	88f8      	ldrh	r0, [r7, #6]
 80064e0:	893a      	ldrh	r2, [r7, #8]
 80064e2:	8979      	ldrh	r1, [r7, #10]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	4603      	mov	r3, r0
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fd1e 	bl	8006f30 <I2C_RequestMemoryWrite>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d052      	beq.n	80065a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e081      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f001 f810 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00d      	beq.n	800652a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b04      	cmp	r3, #4
 8006514:	d107      	bne.n	8006526 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e06b      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d11b      	bne.n	80065a0 <HAL_I2C_Mem_Write+0x180>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656c:	2b00      	cmp	r3, #0
 800656e:	d017      	beq.n	80065a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1aa      	bne.n	80064fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fffc 	bl	80075aa <I2C_WaitOnBTFFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d107      	bne.n	80065d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e016      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	00100002 	.word	0x00100002
 8006610:	ffff0000 	.word	0xffff0000

08006614 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08c      	sub	sp, #48	; 0x30
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4603      	mov	r3, r0
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	460b      	mov	r3, r1
 8006628:	813b      	strh	r3, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800662e:	f7fe fadf 	bl	8004bf0 <HAL_GetTick>
 8006632:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	f040 8208 	bne.w	8006a52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2319      	movs	r3, #25
 8006648:	2201      	movs	r2, #1
 800664a:	497b      	ldr	r1, [pc, #492]	; (8006838 <HAL_I2C_Mem_Read+0x224>)
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fe95 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
 800665a:	e1fb      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_I2C_Mem_Read+0x56>
 8006666:	2302      	movs	r3, #2
 8006668:	e1f4      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d007      	beq.n	8006690 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2222      	movs	r2, #34	; 0x22
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2240      	movs	r2, #64	; 0x40
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a5b      	ldr	r2, [pc, #364]	; (800683c <HAL_I2C_Mem_Read+0x228>)
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066d2:	88f8      	ldrh	r0, [r7, #6]
 80066d4:	893a      	ldrh	r2, [r7, #8]
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4603      	mov	r3, r0
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fcba 	bl	800705c <I2C_RequestMemoryRead>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e1b0      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d113      	bne.n	8006722 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e184      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	2b01      	cmp	r3, #1
 8006728:	d11b      	bne.n	8006762 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e164      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	2b02      	cmp	r3, #2
 8006768:	d11b      	bne.n	80067a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006778:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	e144      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067b8:	e138      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067be:	2b03      	cmp	r3, #3
 80067c0:	f200 80f1 	bhi.w	80069a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d123      	bne.n	8006814 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 ff2b 	bl	800762c <I2C_WaitOnRXNEFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e139      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006812:	e10b      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	2b02      	cmp	r3, #2
 800681a:	d14e      	bne.n	80068ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2200      	movs	r2, #0
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <HAL_I2C_Mem_Read+0x22c>)
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fda8 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e10e      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
 8006836:	bf00      	nop
 8006838:	00100002 	.word	0x00100002
 800683c:	ffff0000 	.word	0xffff0000
 8006840:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068b8:	e0b8      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2200      	movs	r2, #0
 80068c2:	4966      	ldr	r1, [pc, #408]	; (8006a5c <HAL_I2C_Mem_Read+0x448>)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fd59 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0bf      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2200      	movs	r2, #0
 800691e:	494f      	ldr	r1, [pc, #316]	; (8006a5c <HAL_I2C_Mem_Read+0x448>)
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fd2b 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e091      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069a4:	e042      	b.n	8006a2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fe3e 	bl	800762c <I2C_WaitOnRXNEFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e04c      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d118      	bne.n	8006a2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f aec2 	bne.w	80067ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e000      	b.n	8006a54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a52:	2302      	movs	r3, #2
  }
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3728      	adds	r7, #40	; 0x28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	00010004 	.word	0x00010004

08006a60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a82:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <HAL_I2C_ER_IRQHandler+0x4e>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	0a5b      	lsrs	r3, r3, #9
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_I2C_ER_IRQHandler+0x78>
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006ad6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	0a9b      	lsrs	r3, r3, #10
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d03f      	beq.n	8006b64 <HAL_I2C_ER_IRQHandler+0x104>
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d039      	beq.n	8006b64 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006af0:	7efb      	ldrb	r3, [r7, #27]
 8006af2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b0a:	7ebb      	ldrb	r3, [r7, #26]
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d112      	bne.n	8006b36 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10f      	bne.n	8006b36 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b16:	7cfb      	ldrb	r3, [r7, #19]
 8006b18:	2b21      	cmp	r3, #33	; 0x21
 8006b1a:	d008      	beq.n	8006b2e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	2b29      	cmp	r3, #41	; 0x29
 8006b20:	d005      	beq.n	8006b2e <HAL_I2C_ER_IRQHandler+0xce>
 8006b22:	7cfb      	ldrb	r3, [r7, #19]
 8006b24:	2b28      	cmp	r3, #40	; 0x28
 8006b26:	d106      	bne.n	8006b36 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b21      	cmp	r3, #33	; 0x21
 8006b2c:	d103      	bne.n	8006b36 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f85c 	bl	8006bec <I2C_Slave_AF>
 8006b34:	e016      	b.n	8006b64 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b3e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b48:	7efb      	ldrb	r3, [r7, #27]
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d002      	beq.n	8006b54 <HAL_I2C_ER_IRQHandler+0xf4>
 8006b4e:	7efb      	ldrb	r3, [r7, #27]
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d107      	bne.n	8006b64 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b62:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	0adb      	lsrs	r3, r3, #11
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <HAL_I2C_ER_IRQHandler+0x12e>
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f043 0308 	orr.w	r3, r3, #8
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006b8c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f893 	bl	8006ccc <I2C_ITError>
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3728      	adds	r7, #40	; 0x28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d002      	beq.n	8006c0e <I2C_Slave_AF+0x22>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d129      	bne.n	8006c62 <I2C_Slave_AF+0x76>
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b28      	cmp	r3, #40	; 0x28
 8006c12:	d126      	bne.n	8006c62 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <I2C_Slave_AF+0xdc>)
 8006c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c28:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c32:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c42:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff ffb1 	bl	8006bc2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006c60:	e02e      	b.n	8006cc0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b21      	cmp	r3, #33	; 0x21
 8006c66:	d126      	bne.n	8006cb6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <I2C_Slave_AF+0xdc>)
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2221      	movs	r2, #33	; 0x21
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c92:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c9c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ff7d 	bl	8006bae <HAL_I2C_SlaveTxCpltCallback>
}
 8006cb4:	e004      	b.n	8006cc0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cbe:	615a      	str	r2, [r3, #20]
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	ffff0000 	.word	0xffff0000

08006ccc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d002      	beq.n	8006cf0 <I2C_ITError+0x24>
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d10a      	bne.n	8006d06 <I2C_ITError+0x3a>
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	d107      	bne.n	8006d06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d0c:	2b28      	cmp	r3, #40	; 0x28
 8006d0e:	d107      	bne.n	8006d20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2228      	movs	r2, #40	; 0x28
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d1e:	e015      	b.n	8006d4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2e:	d00a      	beq.n	8006d46 <I2C_ITError+0x7a>
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b60      	cmp	r3, #96	; 0x60
 8006d34:	d007      	beq.n	8006d46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5a:	d162      	bne.n	8006e22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d020      	beq.n	8006dbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	4a6a      	ldr	r2, [pc, #424]	; (8006f28 <I2C_ITError+0x25c>)
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fddc 	bl	8005944 <HAL_DMA_Abort_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8089 	beq.w	8006ea6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006db6:	4610      	mov	r0, r2
 8006db8:	4798      	blx	r3
 8006dba:	e074      	b.n	8006ea6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	4a59      	ldr	r2, [pc, #356]	; (8006f28 <I2C_ITError+0x25c>)
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fdbb 	bl	8005944 <HAL_DMA_Abort_IT>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d068      	beq.n	8006ea6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d10b      	bne.n	8006dfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	e041      	b.n	8006ea6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b60      	cmp	r3, #96	; 0x60
 8006e2c:	d125      	bne.n	8006e7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d10b      	bne.n	8006e62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff feaf 	bl	8006bd6 <HAL_I2C_AbortCpltCallback>
 8006e78:	e015      	b.n	8006ea6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d10b      	bne.n	8006ea0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fd fa83 	bl	80043ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10e      	bne.n	8006ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ee2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d113      	bne.n	8006f20 <I2C_ITError+0x254>
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b28      	cmp	r3, #40	; 0x28
 8006efc:	d110      	bne.n	8006f20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <I2C_ITError+0x260>)
 8006f02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fe51 	bl	8006bc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	0800722d 	.word	0x0800722d
 8006f2c:	ffff0000 	.word	0xffff0000

08006f30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	817b      	strh	r3, [r7, #10]
 8006f42:	460b      	mov	r3, r1
 8006f44:	813b      	strh	r3, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fa08 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f80:	d103      	bne.n	8006f8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e05f      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	492d      	ldr	r1, [pc, #180]	; (8007058 <I2C_RequestMemoryWrite+0x128>)
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fa40 	bl	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e04c      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fcc:	6a39      	ldr	r1, [r7, #32]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 faaa 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d107      	bne.n	8006ff2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e02b      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	e021      	b.n	800704c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007008:	893b      	ldrh	r3, [r7, #8]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007018:	6a39      	ldr	r1, [r7, #32]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fa84 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b04      	cmp	r3, #4
 800702c:	d107      	bne.n	800703e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e005      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	00010002 	.word	0x00010002

0800705c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	4608      	mov	r0, r1
 8007066:	4611      	mov	r1, r2
 8007068:	461a      	mov	r2, r3
 800706a:	4603      	mov	r3, r0
 800706c:	817b      	strh	r3, [r7, #10]
 800706e:	460b      	mov	r3, r1
 8007070:	813b      	strh	r3, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007084:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f96a 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070bc:	d103      	bne.n	80070c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e0aa      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	4952      	ldr	r1, [pc, #328]	; (8007228 <I2C_RequestMemoryRead+0x1cc>)
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f9a2 	bl	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e097      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fa0c 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e076      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	611a      	str	r2, [r3, #16]
 8007142:	e021      	b.n	8007188 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007154:	6a39      	ldr	r1, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f9e6 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	2b04      	cmp	r3, #4
 8007168:	d107      	bne.n	800717a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e050      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	6a39      	ldr	r1, [r7, #32]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f9cb 	bl	8007528 <I2C_WaitOnTXEFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	2b04      	cmp	r3, #4
 800719e:	d107      	bne.n	80071b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e035      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f8d3 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ea:	d103      	bne.n	80071f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e013      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071f8:	897b      	ldrh	r3, [r7, #10]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	b2da      	uxtb	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	4906      	ldr	r1, [pc, #24]	; (8007228 <I2C_RequestMemoryRead+0x1cc>)
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f90b 	bl	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	00010002 	.word	0x00010002

0800722c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007244:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007246:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <I2C_DMAAbort+0x148>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	08db      	lsrs	r3, r3, #3
 800724c:	4a4a      	ldr	r2, [pc, #296]	; (8007378 <I2C_DMAAbort+0x14c>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	0a1a      	lsrs	r2, r3, #8
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	00da      	lsls	r2, r3, #3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007272:	e00a      	b.n	800728a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b01      	subs	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007288:	d0ea      	beq.n	8007260 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	2200      	movs	r2, #0
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	2200      	movs	r2, #0
 80072a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2200      	movs	r2, #0
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	2200      	movs	r2, #0
 80072ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	2200      	movs	r2, #0
 80072de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d10e      	bne.n	800731a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2200      	movs	r2, #0
 8007310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007312:	6978      	ldr	r0, [r7, #20]
 8007314:	f7ff fc5f 	bl	8006bd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007318:	e027      	b.n	800736a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800731a:	7cfb      	ldrb	r3, [r7, #19]
 800731c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007320:	2b28      	cmp	r3, #40	; 0x28
 8007322:	d117      	bne.n	8007354 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007342:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2228      	movs	r2, #40	; 0x28
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007352:	e007      	b.n	8007364 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007364:	6978      	ldr	r0, [r7, #20]
 8007366:	f7fd f821 	bl	80043ac <HAL_I2C_ErrorCallback>
}
 800736a:	bf00      	nop
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000004 	.word	0x20000004
 8007378:	14f8b589 	.word	0x14f8b589

0800737c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800738c:	e025      	b.n	80073da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d021      	beq.n	80073da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fd fc2b 	bl	8004bf0 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d116      	bne.n	80073da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e023      	b.n	8007422 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10d      	bne.n	8007400 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	43da      	mvns	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4013      	ands	r3, r2
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf0c      	ite	eq
 80073f6:	2301      	moveq	r3, #1
 80073f8:	2300      	movne	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	e00c      	b.n	800741a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	43da      	mvns	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d0b6      	beq.n	800738e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007438:	e051      	b.n	80074de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007448:	d123      	bne.n	8007492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007458:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007462:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f043 0204 	orr.w	r2, r3, #4
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e046      	b.n	8007520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d021      	beq.n	80074de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749a:	f7fd fba9 	bl	8004bf0 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d116      	bne.n	80074de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e020      	b.n	8007520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d10c      	bne.n	8007502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	43da      	mvns	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e00b      	b.n	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	43da      	mvns	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	4013      	ands	r3, r2
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d18d      	bne.n	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007534:	e02d      	b.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f8ce 	bl	80076d8 <I2C_IsAcknowledgeFailed>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e02d      	b.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d021      	beq.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754e:	f7fd fb4f 	bl	8004bf0 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	d302      	bcc.n	8007564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d116      	bne.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f043 0220 	orr.w	r2, r3, #32
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e007      	b.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d1ca      	bne.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075b6:	e02d      	b.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f88d 	bl	80076d8 <I2C_IsAcknowledgeFailed>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e02d      	b.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d021      	beq.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d0:	f7fd fb0e 	bl	8004bf0 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f043 0220 	orr.w	r2, r3, #32
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e007      	b.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d1ca      	bne.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007638:	e042      	b.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b10      	cmp	r3, #16
 8007646:	d119      	bne.n	800767c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0210 	mvn.w	r2, #16
 8007650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e029      	b.n	80076d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767c:	f7fd fab8 	bl	8004bf0 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d302      	bcc.n	8007692 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d116      	bne.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f043 0220 	orr.w	r2, r3, #32
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e007      	b.n	80076d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d1b5      	bne.n	800763a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ee:	d11b      	bne.n	8007728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	f043 0204 	orr.w	r2, r3, #4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <HAL_PWR_DisableWakeUpPin+0x24>)
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	43db      	mvns	r3, r3
 8007748:	4904      	ldr	r1, [pc, #16]	; (800775c <HAL_PWR_DisableWakeUpPin+0x24>)
 800774a:	4013      	ands	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40007000 	.word	0x40007000

08007760 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a07      	ldr	r2, [pc, #28]	; (8007788 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800776a:	f043 0302 	orr.w	r3, r3, #2
 800776e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	4a05      	ldr	r2, [pc, #20]	; (800778c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007776:	f043 0304 	orr.w	r3, r3, #4
 800777a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800777c:	bf30      	wfi
}
 800777e:	bf00      	nop
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40007000 	.word	0x40007000
 800778c:	e000ed00 	.word	0xe000ed00

08007790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e267      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d075      	beq.n	800789a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ae:	4b88      	ldr	r3, [pc, #544]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d00c      	beq.n	80077d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ba:	4b85      	ldr	r3, [pc, #532]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d112      	bne.n	80077ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077c6:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d2:	d10b      	bne.n	80077ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d4:	4b7e      	ldr	r3, [pc, #504]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d05b      	beq.n	8007898 <HAL_RCC_OscConfig+0x108>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d157      	bne.n	8007898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e242      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f4:	d106      	bne.n	8007804 <HAL_RCC_OscConfig+0x74>
 80077f6:	4b76      	ldr	r3, [pc, #472]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a75      	ldr	r2, [pc, #468]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e01d      	b.n	8007840 <HAL_RCC_OscConfig+0xb0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0x98>
 800780e:	4b70      	ldr	r3, [pc, #448]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6f      	ldr	r2, [pc, #444]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4b6d      	ldr	r3, [pc, #436]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6c      	ldr	r2, [pc, #432]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e00b      	b.n	8007840 <HAL_RCC_OscConfig+0xb0>
 8007828:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a68      	ldr	r2, [pc, #416]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b66      	ldr	r3, [pc, #408]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a65      	ldr	r2, [pc, #404]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800783a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d013      	beq.n	8007870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007848:	f7fd f9d2 	bl	8004bf0 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fd f9ce 	bl	8004bf0 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e207      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007862:	4b5b      	ldr	r3, [pc, #364]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0xc0>
 800786e:	e014      	b.n	800789a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007870:	f7fd f9be 	bl	8004bf0 <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007878:	f7fd f9ba 	bl	8004bf0 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b64      	cmp	r3, #100	; 0x64
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e1f3      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800788a:	4b51      	ldr	r3, [pc, #324]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0xe8>
 8007896:	e000      	b.n	800789a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d063      	beq.n	800796e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078a6:	4b4a      	ldr	r3, [pc, #296]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078b2:	4b47      	ldr	r3, [pc, #284]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d11c      	bne.n	80078f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078be:	4b44      	ldr	r3, [pc, #272]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d116      	bne.n	80078f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	4b41      	ldr	r3, [pc, #260]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_RCC_OscConfig+0x152>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d001      	beq.n	80078e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e1c7      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e2:	4b3b      	ldr	r3, [pc, #236]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4937      	ldr	r1, [pc, #220]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078f6:	e03a      	b.n	800796e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007900:	4b34      	ldr	r3, [pc, #208]	; (80079d4 <HAL_RCC_OscConfig+0x244>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007906:	f7fd f973 	bl	8004bf0 <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800790c:	e008      	b.n	8007920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800790e:	f7fd f96f 	bl	8004bf0 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e1a8      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0f0      	beq.n	800790e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792c:	4b28      	ldr	r3, [pc, #160]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	4925      	ldr	r1, [pc, #148]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	e015      	b.n	800796e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <HAL_RCC_OscConfig+0x244>)
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007948:	f7fd f952 	bl	8004bf0 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007950:	f7fd f94e 	bl	8004bf0 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e187      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007962:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d036      	beq.n	80079e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d016      	beq.n	80079b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <HAL_RCC_OscConfig+0x248>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007988:	f7fd f932 	bl	8004bf0 <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007990:	f7fd f92e 	bl	8004bf0 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e167      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80079a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f0      	beq.n	8007990 <HAL_RCC_OscConfig+0x200>
 80079ae:	e01b      	b.n	80079e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_RCC_OscConfig+0x248>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b6:	f7fd f91b 	bl	8004bf0 <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079bc:	e00e      	b.n	80079dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079be:	f7fd f917 	bl	8004bf0 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d907      	bls.n	80079dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e150      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
 80079d0:	40023800 	.word	0x40023800
 80079d4:	42470000 	.word	0x42470000
 80079d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079dc:	4b88      	ldr	r3, [pc, #544]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ea      	bne.n	80079be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8097 	beq.w	8007b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079fa:	4b81      	ldr	r3, [pc, #516]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10f      	bne.n	8007a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	4b7d      	ldr	r3, [pc, #500]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	4a7c      	ldr	r2, [pc, #496]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6413      	str	r3, [r2, #64]	; 0x40
 8007a16:	4b7a      	ldr	r3, [pc, #488]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a26:	4b77      	ldr	r3, [pc, #476]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d118      	bne.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a32:	4b74      	ldr	r3, [pc, #464]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a73      	ldr	r2, [pc, #460]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a3e:	f7fd f8d7 	bl	8004bf0 <HAL_GetTick>
 8007a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a46:	f7fd f8d3 	bl	8004bf0 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e10c      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a58:	4b6a      	ldr	r3, [pc, #424]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCC_OscConfig+0x2ea>
 8007a6c:	4b64      	ldr	r3, [pc, #400]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	4a63      	ldr	r2, [pc, #396]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6713      	str	r3, [r2, #112]	; 0x70
 8007a78:	e01c      	b.n	8007ab4 <HAL_RCC_OscConfig+0x324>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x30c>
 8007a82:	4b5f      	ldr	r3, [pc, #380]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	4a5e      	ldr	r2, [pc, #376]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a88:	f043 0304 	orr.w	r3, r3, #4
 8007a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8e:	4b5c      	ldr	r3, [pc, #368]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4a5b      	ldr	r2, [pc, #364]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9a:	e00b      	b.n	8007ab4 <HAL_RCC_OscConfig+0x324>
 8007a9c:	4b58      	ldr	r3, [pc, #352]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	4a57      	ldr	r2, [pc, #348]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa8:	4b55      	ldr	r3, [pc, #340]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	4a54      	ldr	r2, [pc, #336]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aae:	f023 0304 	bic.w	r3, r3, #4
 8007ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d015      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abc:	f7fd f898 	bl	8004bf0 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fd f894 	bl	8004bf0 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0cb      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ada:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0ee      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x334>
 8007ae6:	e014      	b.n	8007b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fd f882 	bl	8004bf0 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aee:	e00a      	b.n	8007b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af0:	f7fd f87e 	bl	8004bf0 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e0b5      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b06:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ee      	bne.n	8007af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b18:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	4a38      	ldr	r2, [pc, #224]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a1 	beq.w	8007c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b2e:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d05c      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d141      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b42:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b48:	f7fd f852 	bl	8004bf0 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b50:	f7fd f84e 	bl	8004bf0 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e087      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69da      	ldr	r2, [r3, #28]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	019b      	lsls	r3, r3, #6
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	3b01      	subs	r3, #1
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	491b      	ldr	r1, [pc, #108]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9e:	f7fd f827 	bl	8004bf0 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fd f823 	bl	8004bf0 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e05c      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x416>
 8007bc4:	e054      	b.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7fd f810 	bl	8004bf0 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd4:	f7fd f80c 	bl	8004bf0 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e045      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x444>
 8007bf2:	e03d      	b.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e038      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40007000 	.word	0x40007000
 8007c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <HAL_RCC_OscConfig+0x4ec>)
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d028      	beq.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d121      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d11a      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d111      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	3b01      	subs	r3, #1
 8007c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d001      	beq.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800

08007c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0cc      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c94:	4b68      	ldr	r3, [pc, #416]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d90c      	bls.n	8007cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ca2:	4b65      	ldr	r3, [pc, #404]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007caa:	4b63      	ldr	r3, [pc, #396]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d001      	beq.n	8007cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0b8      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d020      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4a58      	ldr	r2, [pc, #352]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cec:	4b53      	ldr	r3, [pc, #332]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4a52      	ldr	r2, [pc, #328]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cf8:	4b50      	ldr	r3, [pc, #320]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	494d      	ldr	r1, [pc, #308]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d044      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1e:	4b47      	ldr	r3, [pc, #284]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e07f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d003      	beq.n	8007d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3e:	4b3f      	ldr	r3, [pc, #252]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e06f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4e:	4b3b      	ldr	r3, [pc, #236]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e067      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d5e:	4b37      	ldr	r3, [pc, #220]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f023 0203 	bic.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4934      	ldr	r1, [pc, #208]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d70:	f7fc ff3e 	bl	8004bf0 <HAL_GetTick>
 8007d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d78:	f7fc ff3a 	bl	8004bf0 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e04f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8e:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 020c 	and.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1eb      	bne.n	8007d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d20c      	bcs.n	8007dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d001      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e032      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dd4:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4916      	ldr	r1, [pc, #88]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007df2:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	490e      	ldr	r1, [pc, #56]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e06:	f000 f821 	bl	8007e4c <HAL_RCC_GetSysClockFreq>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	091b      	lsrs	r3, r3, #4
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	490a      	ldr	r1, [pc, #40]	; (8007e40 <HAL_RCC_ClockConfig+0x1c0>)
 8007e18:	5ccb      	ldrb	r3, [r1, r3]
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <HAL_RCC_ClockConfig+0x1c4>)
 8007e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fc fe9e 	bl	8004b68 <HAL_InitTick>

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40023c00 	.word	0x40023c00
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	0800dd5c 	.word	0x0800dd5c
 8007e44:	20000004 	.word	0x20000004
 8007e48:	20000008 	.word	0x20000008

08007e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e50:	b090      	sub	sp, #64	; 0x40
 8007e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e64:	4b59      	ldr	r3, [pc, #356]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d00d      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0x40>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	f200 80a1 	bhi.w	8007fb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <HAL_RCC_GetSysClockFreq+0x34>
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d003      	beq.n	8007e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e7e:	e09b      	b.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e80:	4b53      	ldr	r3, [pc, #332]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007e84:	e09b      	b.n	8007fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e86:	4b53      	ldr	r3, [pc, #332]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e8a:	e098      	b.n	8007fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e8c:	4b4f      	ldr	r3, [pc, #316]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e96:	4b4d      	ldr	r3, [pc, #308]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d028      	beq.n	8007ef4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea2:	4b4a      	ldr	r3, [pc, #296]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	623b      	str	r3, [r7, #32]
 8007eac:	627a      	str	r2, [r7, #36]	; 0x24
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4b47      	ldr	r3, [pc, #284]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007eb8:	fb03 f201 	mul.w	r2, r3, r1
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	fb00 f303 	mul.w	r3, r0, r3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	4a43      	ldr	r2, [pc, #268]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ec6:	fba0 1202 	umull	r1, r2, r0, r2
 8007eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ecc:	460a      	mov	r2, r1
 8007ece:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed2:	4413      	add	r3, r2
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	2200      	movs	r2, #0
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	61fa      	str	r2, [r7, #28]
 8007ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ee6:	f7f8 ff27 	bl	8000d38 <__aeabi_uldivmod>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4613      	mov	r3, r2
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	e053      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef4:	4b35      	ldr	r3, [pc, #212]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	099b      	lsrs	r3, r3, #6
 8007efa:	2200      	movs	r2, #0
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	617a      	str	r2, [r7, #20]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f06:	f04f 0b00 	mov.w	fp, #0
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	f04f 0000 	mov.w	r0, #0
 8007f12:	f04f 0100 	mov.w	r1, #0
 8007f16:	0159      	lsls	r1, r3, #5
 8007f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f1c:	0150      	lsls	r0, r2, #5
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	ebb2 080a 	subs.w	r8, r2, sl
 8007f26:	eb63 090b 	sbc.w	r9, r3, fp
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f3e:	ebb2 0408 	subs.w	r4, r2, r8
 8007f42:	eb63 0509 	sbc.w	r5, r3, r9
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	00eb      	lsls	r3, r5, #3
 8007f50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f54:	00e2      	lsls	r2, r4, #3
 8007f56:	4614      	mov	r4, r2
 8007f58:	461d      	mov	r5, r3
 8007f5a:	eb14 030a 	adds.w	r3, r4, sl
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	eb45 030b 	adc.w	r3, r5, fp
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f72:	4629      	mov	r1, r5
 8007f74:	028b      	lsls	r3, r1, #10
 8007f76:	4621      	mov	r1, r4
 8007f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	028a      	lsls	r2, r1, #10
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f86:	2200      	movs	r2, #0
 8007f88:	60bb      	str	r3, [r7, #8]
 8007f8a:	60fa      	str	r2, [r7, #12]
 8007f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f90:	f7f8 fed2 	bl	8000d38 <__aeabi_uldivmod>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4613      	mov	r3, r2
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	0c1b      	lsrs	r3, r3, #16
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fb6:	e002      	b.n	8007fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3740      	adds	r7, #64	; 0x40
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fca:	bf00      	nop
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	017d7840 	.word	0x017d7840

08007fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	; (8007fec <HAL_RCC_GetHCLKFreq+0x14>)
 8007fde:	681b      	ldr	r3, [r3, #0]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000004 	.word	0x20000004

08007ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ff4:	f7ff fff0 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	0a9b      	lsrs	r3, r3, #10
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4903      	ldr	r1, [pc, #12]	; (8008014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800800c:	4618      	mov	r0, r3
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40023800 	.word	0x40023800
 8008014:	0800dd6c 	.word	0x0800dd6c

08008018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800801c:	f7ff ffdc 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	4b05      	ldr	r3, [pc, #20]	; (8008038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0b5b      	lsrs	r3, r3, #13
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	4903      	ldr	r1, [pc, #12]	; (800803c <HAL_RCC_GetPCLK2Freq+0x24>)
 800802e:	5ccb      	ldrb	r3, [r1, r3]
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008034:	4618      	mov	r0, r3
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40023800 	.word	0x40023800
 800803c:	0800dd6c 	.word	0x0800dd6c

08008040 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008064:	2b00      	cmp	r3, #0
 8008066:	d035      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008068:	4b67      	ldr	r3, [pc, #412]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800806e:	f7fc fdbf 	bl	8004bf0 <HAL_GetTick>
 8008072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008074:	e008      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008076:	f7fc fdbb 	bl	8004bf0 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e0ba      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008088:	4b60      	ldr	r3, [pc, #384]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f0      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	019a      	lsls	r2, r3, #6
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	071b      	lsls	r3, r3, #28
 80080a0:	495a      	ldr	r1, [pc, #360]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080a8:	4b57      	ldr	r3, [pc, #348]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ae:	f7fc fd9f 	bl	8004bf0 <HAL_GetTick>
 80080b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080b4:	e008      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080b6:	f7fc fd9b 	bl	8004bf0 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e09a      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080c8:	4b50      	ldr	r3, [pc, #320]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8083 	beq.w	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	4b49      	ldr	r3, [pc, #292]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	4a48      	ldr	r2, [pc, #288]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80080ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f0:	6413      	str	r3, [r2, #64]	; 0x40
 80080f2:	4b46      	ldr	r3, [pc, #280]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080fe:	4b44      	ldr	r3, [pc, #272]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a43      	ldr	r2, [pc, #268]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008108:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800810a:	f7fc fd71 	bl	8004bf0 <HAL_GetTick>
 800810e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008110:	e008      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008112:	f7fc fd6d 	bl	8004bf0 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e06c      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008124:	4b3a      	ldr	r3, [pc, #232]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0f0      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008130:	4b36      	ldr	r3, [pc, #216]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008138:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d02f      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	d028      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008156:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008158:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800815e:	4b2d      	ldr	r3, [pc, #180]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008164:	4a29      	ldr	r2, [pc, #164]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800816a:	4b28      	ldr	r3, [pc, #160]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d114      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008176:	f7fc fd3b 	bl	8004bf0 <HAL_GetTick>
 800817a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800817c:	e00a      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800817e:	f7fc fd37 	bl	8004bf0 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	f241 3288 	movw	r2, #5000	; 0x1388
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e034      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008194:	4b1d      	ldr	r3, [pc, #116]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0ee      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ac:	d10d      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80081ae:	4b17      	ldr	r3, [pc, #92]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80081be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c2:	4912      	ldr	r1, [pc, #72]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	608b      	str	r3, [r1, #8]
 80081c8:	e005      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80081ca:	4b10      	ldr	r3, [pc, #64]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	4a0f      	ldr	r2, [pc, #60]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081d4:	6093      	str	r3, [r2, #8]
 80081d6:	4b0d      	ldr	r3, [pc, #52]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e2:	490a      	ldr	r1, [pc, #40]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7c1a      	ldrb	r2, [r3, #16]
 80081f8:	4b07      	ldr	r3, [pc, #28]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80081fa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	42470068 	.word	0x42470068
 800820c:	40023800 	.word	0x40023800
 8008210:	40007000 	.word	0x40007000
 8008214:	42470e40 	.word	0x42470e40
 8008218:	424711e0 	.word	0x424711e0

0800821c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e066      	b.n	8008300 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7f5b      	ldrb	r3, [r3, #29]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fc f97e 	bl	8004544 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	22ca      	movs	r2, #202	; 0xca
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2253      	movs	r2, #83	; 0x53
 800825c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fd3f 	bl	8008ce2 <RTC_EnterInitMode>
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d12c      	bne.n	80082c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800827c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008280:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6899      	ldr	r1, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	68d2      	ldr	r2, [r2, #12]
 80082a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6919      	ldr	r1, [r3, #16]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	041a      	lsls	r2, r3, #16
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fd46 	bl	8008d50 <RTC_ExitInitMode>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d113      	bne.n	80082f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	22ff      	movs	r2, #255	; 0xff
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	7f1b      	ldrb	r3, [r3, #28]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_RTC_SetTime+0x1c>
 8008320:	2302      	movs	r3, #2
 8008322:	e087      	b.n	8008434 <HAL_RTC_SetTime+0x12c>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2202      	movs	r2, #2
 800832e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d126      	bne.n	8008384 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2200      	movs	r2, #0
 8008348:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fd23 	bl	8008d9a <RTC_ByteToBcd2>
 8008354:	4603      	mov	r3, r0
 8008356:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fd1c 	bl	8008d9a <RTC_ByteToBcd2>
 8008362:	4603      	mov	r3, r0
 8008364:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008366:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	789b      	ldrb	r3, [r3, #2]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fd14 	bl	8008d9a <RTC_ByteToBcd2>
 8008372:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008374:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	78db      	ldrb	r3, [r3, #3]
 800837c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e018      	b.n	80083b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80083a4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80083aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	78db      	ldrb	r3, [r3, #3]
 80083b0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	22ca      	movs	r2, #202	; 0xca
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2253      	movs	r2, #83	; 0x53
 80083c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 fc8b 	bl	8008ce2 <RTC_EnterInitMode>
 80083cc:	4603      	mov	r3, r0
 80083ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80083d0:	7cfb      	ldrb	r3, [r7, #19]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d120      	bne.n	8008418 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80083e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6899      	ldr	r1, [r3, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fc9e 	bl	8008d50 <RTC_ExitInitMode>
 8008414:	4603      	mov	r3, r0
 8008416:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008418:	7cfb      	ldrb	r3, [r7, #19]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	771a      	strb	r2, [r3, #28]

  return status;
 8008432:	7cfb      	ldrb	r3, [r7, #19]
}
 8008434:	4618      	mov	r0, r3
 8008436:	371c      	adds	r7, #28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd90      	pop	{r4, r7, pc}

0800843c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800846e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008472:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800847e:	b2da      	uxtb	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	0d9b      	lsrs	r3, r3, #22
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fc89 	bl	8008dd4 <RTC_Bcd2ToByte>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fc80 	bl	8008dd4 <RTC_Bcd2ToByte>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	789b      	ldrb	r3, [r3, #2]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fc77 	bl	8008dd4 <RTC_Bcd2ToByte>
 80084e6:	4603      	mov	r3, r0
 80084e8:	461a      	mov	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	7f1b      	ldrb	r3, [r3, #28]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_RTC_SetDate+0x1c>
 8008510:	2302      	movs	r3, #2
 8008512:	e071      	b.n	80085f8 <HAL_RTC_SetDate+0x100>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2202      	movs	r2, #2
 800851e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10e      	bne.n	8008544 <HAL_RTC_SetDate+0x4c>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	f003 0310 	and.w	r3, r3, #16
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	f023 0310 	bic.w	r3, r3, #16
 800853a:	b2db      	uxtb	r3, r3
 800853c:	330a      	adds	r3, #10
 800853e:	b2da      	uxtb	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d11c      	bne.n	8008584 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	78db      	ldrb	r3, [r3, #3]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fc23 	bl	8008d9a <RTC_ByteToBcd2>
 8008554:	4603      	mov	r3, r0
 8008556:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fc1c 	bl	8008d9a <RTC_ByteToBcd2>
 8008562:	4603      	mov	r3, r0
 8008564:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008566:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	789b      	ldrb	r3, [r3, #2]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fc14 	bl	8008d9a <RTC_ByteToBcd2>
 8008572:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008574:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e00e      	b.n	80085a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	78db      	ldrb	r3, [r3, #3]
 8008588:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008590:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008596:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	22ca      	movs	r2, #202	; 0xca
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2253      	movs	r2, #83	; 0x53
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fb95 	bl	8008ce2 <RTC_EnterInitMode>
 80085b8:	4603      	mov	r3, r0
 80085ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80085bc:	7cfb      	ldrb	r3, [r7, #19]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 fbbc 	bl	8008d50 <RTC_ExitInitMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	771a      	strb	r2, [r3, #28]

  return status;
 80085f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd90      	pop	{r4, r7, pc}

08008600 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800861a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800861e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	b2da      	uxtb	r2, r3
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008642:	b2da      	uxtb	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	0b5b      	lsrs	r3, r3, #13
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	b2da      	uxtb	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d11a      	bne.n	8008694 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	78db      	ldrb	r3, [r3, #3]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fbb6 	bl	8008dd4 <RTC_Bcd2ToByte>
 8008668:	4603      	mov	r3, r0
 800866a:	461a      	mov	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fbad 	bl	8008dd4 <RTC_Bcd2ToByte>
 800867a:	4603      	mov	r3, r0
 800867c:	461a      	mov	r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	789b      	ldrb	r3, [r3, #2]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fba4 	bl	8008dd4 <RTC_Bcd2ToByte>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800869e:	b590      	push	{r4, r7, lr}
 80086a0:	b089      	sub	sp, #36	; 0x24
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	7f1b      	ldrb	r3, [r3, #28]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_RTC_SetAlarm+0x24>
 80086be:	2302      	movs	r3, #2
 80086c0:	e113      	b.n	80088ea <HAL_RTC_SetAlarm+0x24c>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2202      	movs	r2, #2
 80086cc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d137      	bne.n	8008744 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fb54 	bl	8008d9a <RTC_ByteToBcd2>
 80086f2:	4603      	mov	r3, r0
 80086f4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fb4d 	bl	8008d9a <RTC_ByteToBcd2>
 8008700:	4603      	mov	r3, r0
 8008702:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008704:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	789b      	ldrb	r3, [r3, #2]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fb45 	bl	8008d9a <RTC_ByteToBcd2>
 8008710:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008712:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800871c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fb37 	bl	8008d9a <RTC_ByteToBcd2>
 800872c:	4603      	mov	r3, r0
 800872e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008730:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800873e:	4313      	orrs	r3, r2
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e023      	b.n	800878c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008764:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800876a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	78db      	ldrb	r3, [r3, #3]
 8008770:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008772:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800877a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800877c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008782:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008788:	4313      	orrs	r3, r2
 800878a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008794:	4313      	orrs	r3, r2
 8008796:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	22ca      	movs	r2, #202	; 0xca
 800879e:	625a      	str	r2, [r3, #36]	; 0x24
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2253      	movs	r2, #83	; 0x53
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b0:	d148      	bne.n	8008844 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087c0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087d0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80087e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087e4:	f7fc fa04 	bl	8004bf0 <HAL_GetTick>
 80087e8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80087ea:	e013      	b.n	8008814 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087ec:	f7fc fa00 	bl	8004bf0 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087fa:	d90b      	bls.n	8008814 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	22ff      	movs	r2, #255	; 0xff
 8008802:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2203      	movs	r2, #3
 8008808:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e06a      	b.n	80088ea <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0e4      	beq.n	80087ec <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	e047      	b.n	80088d4 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008852:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008862:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008874:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008876:	f7fc f9bb 	bl	8004bf0 <HAL_GetTick>
 800887a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800887c:	e013      	b.n	80088a6 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800887e:	f7fc f9b7 	bl	8004bf0 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800888c:	d90b      	bls.n	80088a6 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	22ff      	movs	r2, #255	; 0xff
 8008894:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2203      	movs	r2, #3
 800889a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e021      	b.n	80088ea <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0e4      	beq.n	800887e <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3724      	adds	r7, #36	; 0x24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}
	...

080088f4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b089      	sub	sp, #36	; 0x24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008900:	4b9a      	ldr	r3, [pc, #616]	; (8008b6c <HAL_RTC_SetAlarm_IT+0x278>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a9a      	ldr	r2, [pc, #616]	; (8008b70 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008906:	fba2 2303 	umull	r2, r3, r2, r3
 800890a:	0adb      	lsrs	r3, r3, #11
 800890c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	7f1b      	ldrb	r3, [r3, #28]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_RTC_SetAlarm_IT+0x36>
 8008926:	2302      	movs	r3, #2
 8008928:	e11c      	b.n	8008b64 <HAL_RTC_SetAlarm_IT+0x270>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2202      	movs	r2, #2
 8008934:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d137      	bne.n	80089ac <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2200      	movs	r2, #0
 800894e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fa20 	bl	8008d9a <RTC_ByteToBcd2>
 800895a:	4603      	mov	r3, r0
 800895c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fa19 	bl	8008d9a <RTC_ByteToBcd2>
 8008968:	4603      	mov	r3, r0
 800896a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800896c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	789b      	ldrb	r3, [r3, #2]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fa11 	bl	8008d9a <RTC_ByteToBcd2>
 8008978:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800897a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008984:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fa03 	bl	8008d9a <RTC_ByteToBcd2>
 8008994:	4603      	mov	r3, r0
 8008996:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008998:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80089a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e023      	b.n	80089f4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80089cc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80089d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80089da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80089e4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80089ea:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80089f0:	4313      	orrs	r3, r2
 80089f2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	22ca      	movs	r2, #202	; 0xca
 8008a06:	625a      	str	r2, [r3, #36]	; 0x24
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2253      	movs	r2, #83	; 0x53
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a18:	d141      	bne.n	8008a9e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a28:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008a3a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1e5a      	subs	r2, r3, #1
 8008a40:	617a      	str	r2, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	22ff      	movs	r2, #255	; 0xff
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2203      	movs	r2, #3
 8008a52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e082      	b.n	8008b64 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0e7      	beq.n	8008a3c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a8a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a9a:	609a      	str	r2, [r3, #8]
 8008a9c:	e04b      	b.n	8008b36 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008aac:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008abe:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008ac0:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <HAL_RTC_SetAlarm_IT+0x278>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2a      	ldr	r2, [pc, #168]	; (8008b70 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aca:	0adb      	lsrs	r3, r3, #11
 8008acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	1e5a      	subs	r2, r3, #1
 8008ada:	617a      	str	r2, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2203      	movs	r2, #3
 8008aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e035      	b.n	8008b64 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0e7      	beq.n	8008ad6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b24:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b34:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008b36:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <HAL_RTC_SetAlarm_IT+0x280>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a0e      	ldr	r2, [pc, #56]	; (8008b74 <HAL_RTC_SetAlarm_IT+0x280>)
 8008b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b40:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <HAL_RTC_SetAlarm_IT+0x280>)
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4a0b      	ldr	r2, [pc, #44]	; (8008b74 <HAL_RTC_SetAlarm_IT+0x280>)
 8008b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b4c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	22ff      	movs	r2, #255	; 0xff
 8008b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3724      	adds	r7, #36	; 0x24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd90      	pop	{r4, r7, pc}
 8008b6c:	20000004 	.word	0x20000004
 8008b70:	10624dd3 	.word	0x10624dd3
 8008b74:	40013c00 	.word	0x40013c00

08008b78 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7f1b      	ldrb	r3, [r3, #28]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_RTC_DeactivateAlarm+0x1a>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e07b      	b.n	8008c8a <HAL_RTC_DeactivateAlarm+0x112>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	22ca      	movs	r2, #202	; 0xca
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2253      	movs	r2, #83	; 0x53
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb4:	d12f      	bne.n	8008c16 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bc4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bd4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bd6:	f7fc f80b 	bl	8004bf0 <HAL_GetTick>
 8008bda:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bdc:	e013      	b.n	8008c06 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008bde:	f7fc f807 	bl	8004bf0 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bec:	d90b      	bls.n	8008c06 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	22ff      	movs	r2, #255	; 0xff
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e041      	b.n	8008c8a <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0e4      	beq.n	8008bde <HAL_RTC_DeactivateAlarm+0x66>
 8008c14:	e02e      	b.n	8008c74 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c24:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c34:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c36:	f7fb ffdb 	bl	8004bf0 <HAL_GetTick>
 8008c3a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c3c:	e013      	b.n	8008c66 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c3e:	f7fb ffd7 	bl	8004bf0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4c:	d90b      	bls.n	8008c66 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	22ff      	movs	r2, #255	; 0xff
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e011      	b.n	8008c8a <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0e4      	beq.n	8008c3e <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	22ff      	movs	r2, #255	; 0xff
 8008c7a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cac:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cae:	f7fb ff9f 	bl	8004bf0 <HAL_GetTick>
 8008cb2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cb4:	e009      	b.n	8008cca <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cb6:	f7fb ff9b 	bl	8004bf0 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cc4:	d901      	bls.n	8008cca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e007      	b.n	8008cda <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0ee      	beq.n	8008cb6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d122      	bne.n	8008d46 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d10:	f7fb ff6e 	bl	8004bf0 <HAL_GetTick>
 8008d14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008d16:	e00c      	b.n	8008d32 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d18:	f7fb ff6a 	bl	8004bf0 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d26:	d904      	bls.n	8008d32 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <RTC_EnterInitMode+0x64>
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d1e8      	bne.n	8008d18 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff89 	bl	8008c92 <HAL_RTC_WaitForSynchro>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2204      	movs	r2, #4
 8008d8a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	4603      	mov	r3, r0
 8008da2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008da8:	e005      	b.n	8008db6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	3301      	adds	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	3b0a      	subs	r3, #10
 8008db4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b09      	cmp	r3, #9
 8008dba:	d8f6      	bhi.n	8008daa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	b2db      	uxtb	r3, r3
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	091b      	lsrs	r3, r3, #4
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	0092      	lsls	r2, r2, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	b2db      	uxtb	r3, r3
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7f1b      	ldrb	r3, [r3, #28]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e047      	b.n	8008eb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	22ca      	movs	r2, #202	; 0xca
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2253      	movs	r2, #83	; 0x53
 8008e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e5e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e60:	f7fb fec6 	bl	8004bf0 <HAL_GetTick>
 8008e64:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e66:	e013      	b.n	8008e90 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e68:	f7fb fec2 	bl	8004bf0 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e76:	d90b      	bls.n	8008e90 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	22ff      	movs	r2, #255	; 0xff
 8008e7e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2203      	movs	r2, #3
 8008e84:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e011      	b.n	8008eb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0e4      	beq.n	8008e68 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3350      	adds	r3, #80	; 0x50
 8008ed2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3350      	adds	r3, #80	; 0x50
 8008f04:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e041      	b.n	8008fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fb fb28 	bl	800459c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f000 f950 	bl	8009204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d001      	beq.n	8008fd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e03c      	b.n	8009052 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a1e      	ldr	r2, [pc, #120]	; (8009060 <HAL_TIM_Base_Start+0xa0>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d018      	beq.n	800901c <HAL_TIM_Base_Start+0x5c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff2:	d013      	beq.n	800901c <HAL_TIM_Base_Start+0x5c>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <HAL_TIM_Base_Start+0xa4>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00e      	beq.n	800901c <HAL_TIM_Base_Start+0x5c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a19      	ldr	r2, [pc, #100]	; (8009068 <HAL_TIM_Base_Start+0xa8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d009      	beq.n	800901c <HAL_TIM_Base_Start+0x5c>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a17      	ldr	r2, [pc, #92]	; (800906c <HAL_TIM_Base_Start+0xac>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_TIM_Base_Start+0x5c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a16      	ldr	r2, [pc, #88]	; (8009070 <HAL_TIM_Base_Start+0xb0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d111      	bne.n	8009040 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b06      	cmp	r3, #6
 800902c:	d010      	beq.n	8009050 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0201 	orr.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903e:	e007      	b.n	8009050 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40010000 	.word	0x40010000
 8009064:	40000400 	.word	0x40000400
 8009068:	40000800 	.word	0x40000800
 800906c:	40000c00 	.word	0x40000c00
 8009070:	40014000 	.word	0x40014000

08009074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_TIM_ConfigClockSource+0x1c>
 800908c:	2302      	movs	r3, #2
 800908e:	e0b4      	b.n	80091fa <HAL_TIM_ConfigClockSource+0x186>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c8:	d03e      	beq.n	8009148 <HAL_TIM_ConfigClockSource+0xd4>
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ce:	f200 8087 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 80090d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d6:	f000 8086 	beq.w	80091e6 <HAL_TIM_ConfigClockSource+0x172>
 80090da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090de:	d87f      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 80090e0:	2b70      	cmp	r3, #112	; 0x70
 80090e2:	d01a      	beq.n	800911a <HAL_TIM_ConfigClockSource+0xa6>
 80090e4:	2b70      	cmp	r3, #112	; 0x70
 80090e6:	d87b      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 80090e8:	2b60      	cmp	r3, #96	; 0x60
 80090ea:	d050      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x11a>
 80090ec:	2b60      	cmp	r3, #96	; 0x60
 80090ee:	d877      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 80090f0:	2b50      	cmp	r3, #80	; 0x50
 80090f2:	d03c      	beq.n	800916e <HAL_TIM_ConfigClockSource+0xfa>
 80090f4:	2b50      	cmp	r3, #80	; 0x50
 80090f6:	d873      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d058      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x13a>
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	d86f      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009100:	2b30      	cmp	r3, #48	; 0x30
 8009102:	d064      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x15a>
 8009104:	2b30      	cmp	r3, #48	; 0x30
 8009106:	d86b      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009108:	2b20      	cmp	r3, #32
 800910a:	d060      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x15a>
 800910c:	2b20      	cmp	r3, #32
 800910e:	d867      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d05c      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x15a>
 8009114:	2b10      	cmp	r3, #16
 8009116:	d05a      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x15a>
 8009118:	e062      	b.n	80091e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6899      	ldr	r1, [r3, #8]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f000 f965 	bl	80093f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800913c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	609a      	str	r2, [r3, #8]
      break;
 8009146:	e04f      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6899      	ldr	r1, [r3, #8]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f000 f94e 	bl	80093f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800916a:	609a      	str	r2, [r3, #8]
      break;
 800916c:	e03c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6859      	ldr	r1, [r3, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	461a      	mov	r2, r3
 800917c:	f000 f8c2 	bl	8009304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2150      	movs	r1, #80	; 0x50
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f91b 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 800918c:	e02c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6859      	ldr	r1, [r3, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	461a      	mov	r2, r3
 800919c:	f000 f8e1 	bl	8009362 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2160      	movs	r1, #96	; 0x60
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f90b 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 80091ac:	e01c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6859      	ldr	r1, [r3, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	461a      	mov	r2, r3
 80091bc:	f000 f8a2 	bl	8009304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f8fb 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 80091cc:	e00c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f000 f8f2 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 80091de:	e003      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e000      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a34      	ldr	r2, [pc, #208]	; (80092e8 <TIM_Base_SetConfig+0xe4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00f      	beq.n	800923c <TIM_Base_SetConfig+0x38>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009222:	d00b      	beq.n	800923c <TIM_Base_SetConfig+0x38>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a31      	ldr	r2, [pc, #196]	; (80092ec <TIM_Base_SetConfig+0xe8>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <TIM_Base_SetConfig+0x38>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a30      	ldr	r2, [pc, #192]	; (80092f0 <TIM_Base_SetConfig+0xec>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_Base_SetConfig+0x38>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a2f      	ldr	r2, [pc, #188]	; (80092f4 <TIM_Base_SetConfig+0xf0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d108      	bne.n	800924e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a25      	ldr	r2, [pc, #148]	; (80092e8 <TIM_Base_SetConfig+0xe4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d01b      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925c:	d017      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a22      	ldr	r2, [pc, #136]	; (80092ec <TIM_Base_SetConfig+0xe8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d013      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a21      	ldr	r2, [pc, #132]	; (80092f0 <TIM_Base_SetConfig+0xec>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00f      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a20      	ldr	r2, [pc, #128]	; (80092f4 <TIM_Base_SetConfig+0xf0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00b      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <TIM_Base_SetConfig+0xf4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d007      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a1e      	ldr	r2, [pc, #120]	; (80092fc <TIM_Base_SetConfig+0xf8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d003      	beq.n	800928e <TIM_Base_SetConfig+0x8a>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a1d      	ldr	r2, [pc, #116]	; (8009300 <TIM_Base_SetConfig+0xfc>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d108      	bne.n	80092a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <TIM_Base_SetConfig+0xe4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d103      	bne.n	80092d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	615a      	str	r2, [r3, #20]
}
 80092da:	bf00      	nop
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40000400 	.word	0x40000400
 80092f0:	40000800 	.word	0x40000800
 80092f4:	40000c00 	.word	0x40000c00
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400
 8009300:	40014800 	.word	0x40014800

08009304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800932e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4313      	orrs	r3, r2
 8009338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f023 030a 	bic.w	r3, r3, #10
 8009340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009362:	b480      	push	{r7}
 8009364:	b087      	sub	sp, #28
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f023 0210 	bic.w	r2, r3, #16
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800938c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	031b      	lsls	r3, r3, #12
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800939e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	621a      	str	r2, [r3, #32]
}
 80093b6:	bf00      	nop
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	f043 0307 	orr.w	r3, r3, #7
 80093e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	609a      	str	r2, [r3, #8]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	021a      	lsls	r2, r3, #8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	431a      	orrs	r2, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4313      	orrs	r3, r2
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	609a      	str	r2, [r3, #8]
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800944c:	2302      	movs	r3, #2
 800944e:	e050      	b.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1c      	ldr	r2, [pc, #112]	; (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d018      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949c:	d013      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a18      	ldr	r2, [pc, #96]	; (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00e      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a16      	ldr	r2, [pc, #88]	; (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d009      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a15      	ldr	r2, [pc, #84]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a13      	ldr	r2, [pc, #76]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d10c      	bne.n	80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40010000 	.word	0x40010000
 8009504:	40000400 	.word	0x40000400
 8009508:	40000800 	.word	0x40000800
 800950c:	40000c00 	.word	0x40000c00
 8009510:	40014000 	.word	0x40014000

08009514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e03f      	b.n	80095a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fb f864 	bl	8004608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2224      	movs	r2, #36	; 0x24
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 f8eb 	bl	800a734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800956c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800957c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800958c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2220      	movs	r2, #32
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b08a      	sub	sp, #40	; 0x28
 80095b2:	af02      	add	r7, sp, #8
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	603b      	str	r3, [r7, #0]
 80095ba:	4613      	mov	r3, r2
 80095bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d17c      	bne.n	80096c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_UART_Transmit+0x2c>
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e075      	b.n	80096ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_UART_Transmit+0x3e>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e06e      	b.n	80096ca <HAL_UART_Transmit+0x11c>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2221      	movs	r2, #33	; 0x21
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009602:	f7fb faf5 	bl	8004bf0 <HAL_GetTick>
 8009606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961c:	d108      	bne.n	8009630 <HAL_UART_Transmit+0x82>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e003      	b.n	8009638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009640:	e02a      	b.n	8009698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2200      	movs	r2, #0
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fda2 	bl	800a196 <UART_WaitOnFlagUntilTimeout>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e036      	b.n	80096ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3302      	adds	r3, #2
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	e007      	b.n	800968a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1cf      	bne.n	8009642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2200      	movs	r2, #0
 80096aa:	2140      	movs	r1, #64	; 0x40
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fd72 	bl	800a196 <UART_WaitOnFlagUntilTimeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e006      	b.n	80096ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	e000      	b.n	80096ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096c8:	2302      	movs	r3, #2
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d165      	bne.n	80097ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <HAL_UART_Transmit_DMA+0x26>
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e05e      	b.n	80097bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_UART_Transmit_DMA+0x38>
 8009708:	2302      	movs	r3, #2
 800970a:	e057      	b.n	80097bc <HAL_UART_Transmit_DMA+0xe8>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	88fa      	ldrh	r2, [r7, #6]
 800971e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2221      	movs	r2, #33	; 0x21
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009738:	4a22      	ldr	r2, [pc, #136]	; (80097c4 <HAL_UART_Transmit_DMA+0xf0>)
 800973a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	4a21      	ldr	r2, [pc, #132]	; (80097c8 <HAL_UART_Transmit_DMA+0xf4>)
 8009742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	4a20      	ldr	r2, [pc, #128]	; (80097cc <HAL_UART_Transmit_DMA+0xf8>)
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	2200      	movs	r2, #0
 8009752:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009754:	f107 0308 	add.w	r3, r7, #8
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	6819      	ldr	r1, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3304      	adds	r3, #4
 8009768:	461a      	mov	r2, r3
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	f7fc f822 	bl	80057b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009778:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3314      	adds	r3, #20
 8009788:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	617b      	str	r3, [r7, #20]
   return(result);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009798:	62bb      	str	r3, [r7, #40]	; 0x28
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3314      	adds	r3, #20
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	627a      	str	r2, [r7, #36]	; 0x24
 80097a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6a39      	ldr	r1, [r7, #32]
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e000      	b.n	80097bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80097ba:	2302      	movs	r3, #2
  }
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3730      	adds	r7, #48	; 0x30
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	08009ef1 	.word	0x08009ef1
 80097c8:	08009f8b 	.word	0x08009f8b
 80097cc:	0800a103 	.word	0x0800a103

080097d0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b090      	sub	sp, #64	; 0x40
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097d8:	2300      	movs	r3, #0
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	bf0c      	ite	eq
 80097ea:	2301      	moveq	r3, #1
 80097ec:	2300      	movne	r3, #0
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b21      	cmp	r3, #33	; 0x21
 80097fc:	d128      	bne.n	8009850 <HAL_UART_DMAStop+0x80>
 80097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d025      	beq.n	8009850 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3314      	adds	r3, #20
 800980a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	623b      	str	r3, [r7, #32]
   return(result);
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800981a:	63bb      	str	r3, [r7, #56]	; 0x38
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3314      	adds	r3, #20
 8009822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009824:	633a      	str	r2, [r7, #48]	; 0x30
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800982a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e5      	bne.n	8009804 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	4618      	mov	r0, r3
 8009846:	f7fc f80d 	bl	8005864 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fdb0 	bl	800a3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	bf0c      	ite	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	2300      	movne	r3, #0
 8009862:	b2db      	uxtb	r3, r3
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b22      	cmp	r3, #34	; 0x22
 8009870:	d128      	bne.n	80098c4 <HAL_UART_DMAStop+0xf4>
 8009872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d025      	beq.n	80098c4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	60fb      	str	r3, [r7, #12]
   return(result);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988e:	637b      	str	r3, [r7, #52]	; 0x34
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3314      	adds	r3, #20
 8009896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009898:	61fa      	str	r2, [r7, #28]
 800989a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	69b9      	ldr	r1, [r7, #24]
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	617b      	str	r3, [r7, #20]
   return(result);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e5      	bne.n	8009878 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d004      	beq.n	80098be <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fb ffd3 	bl	8005864 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fd9e 	bl	800a400 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3740      	adds	r7, #64	; 0x40
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b08c      	sub	sp, #48	; 0x30
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	4613      	mov	r3, r2
 80098da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d152      	bne.n	800998e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e04b      	b.n	8009990 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009902:	2302      	movs	r3, #2
 8009904:	e044      	b.n	8009990 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	461a      	mov	r2, r3
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fcaa 	bl	800a274 <UART_Start_Receive_DMA>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800992a:	2b00      	cmp	r3, #0
 800992c:	d12c      	bne.n	8009988 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	2b01      	cmp	r3, #1
 8009934:	d125      	bne.n	8009982 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009936:	2300      	movs	r3, #0
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	330c      	adds	r3, #12
 8009952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	617b      	str	r3, [r7, #20]
   return(result);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f043 0310 	orr.w	r3, r3, #16
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800996c:	627a      	str	r2, [r7, #36]	; 0x24
 800996e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	6a39      	ldr	r1, [r7, #32]
 8009972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	61fb      	str	r3, [r7, #28]
   return(result);
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e5      	bne.n	800994c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009980:	e002      	b.n	8009988 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800998c:	e000      	b.n	8009990 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3730      	adds	r7, #48	; 0x30
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b0ba      	sub	sp, #232	; 0xe8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80099d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10f      	bne.n	80099fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e2:	f003 0320 	and.w	r3, r3, #32
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_UART_IRQHandler+0x66>
 80099ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fde1 	bl	800a5be <UART_Receive_IT>
      return;
 80099fc:	e256      	b.n	8009eac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80de 	beq.w	8009bc4 <HAL_UART_IRQHandler+0x22c>
 8009a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 80d1 	beq.w	8009bc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <HAL_UART_IRQHandler+0xae>
 8009a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	f043 0201 	orr.w	r2, r3, #1
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <HAL_UART_IRQHandler+0xd2>
 8009a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d005      	beq.n	8009a6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a62:	f043 0202 	orr.w	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00b      	beq.n	8009a8e <HAL_UART_IRQHandler+0xf6>
 8009a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d005      	beq.n	8009a8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f043 0204 	orr.w	r2, r3, #4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a92:	f003 0308 	and.w	r3, r3, #8
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d011      	beq.n	8009abe <HAL_UART_IRQHandler+0x126>
 8009a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f043 0208 	orr.w	r2, r3, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 81ed 	beq.w	8009ea2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x14e>
 8009ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fd6c 	bl	800a5be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <HAL_UART_IRQHandler+0x17a>
 8009b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d04f      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fc74 	bl	800a400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	d141      	bne.n	8009baa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3314      	adds	r3, #20
 8009b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1d9      	bne.n	8009b26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d013      	beq.n	8009ba2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	4a7d      	ldr	r2, [pc, #500]	; (8009d74 <HAL_UART_IRQHandler+0x3dc>)
 8009b80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fb fedc 	bl	8005944 <HAL_DMA_Abort_IT>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d016      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba0:	e00e      	b.n	8009bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fa fb90 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba8:	e00a      	b.n	8009bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7fa fb8c 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb0:	e006      	b.n	8009bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fa fb88 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009bbe:	e170      	b.n	8009ea2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc0:	bf00      	nop
    return;
 8009bc2:	e16e      	b.n	8009ea2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	f040 814a 	bne.w	8009e62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd2:	f003 0310 	and.w	r3, r3, #16
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 8143 	beq.w	8009e62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 813c 	beq.w	8009e62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bea:	2300      	movs	r3, #0
 8009bec:	60bb      	str	r3, [r7, #8]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60bb      	str	r3, [r7, #8]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	60bb      	str	r3, [r7, #8]
 8009bfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0a:	2b40      	cmp	r3, #64	; 0x40
 8009c0c:	f040 80b4 	bne.w	8009d78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8140 	beq.w	8009ea6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	f080 8139 	bcs.w	8009ea6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c46:	f000 8088 	beq.w	8009d5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	330c      	adds	r3, #12
 8009c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	330c      	adds	r3, #12
 8009c72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1d9      	bne.n	8009c4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ca8:	f023 0301 	bic.w	r3, r3, #1
 8009cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3314      	adds	r3, #20
 8009cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009cba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e1      	bne.n	8009c96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3314      	adds	r3, #20
 8009cd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e3      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	330c      	adds	r3, #12
 8009d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2a:	f023 0310 	bic.w	r3, r3, #16
 8009d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e3      	bne.n	8009d18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fb fd85 	bl	8005864 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fa fadc 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d70:	e099      	b.n	8009ea6 <HAL_UART_IRQHandler+0x50e>
 8009d72:	bf00      	nop
 8009d74:	0800a4c7 	.word	0x0800a4c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 808b 	beq.w	8009eaa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8086 	beq.w	8009eaa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	330c      	adds	r3, #12
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009dc2:	647a      	str	r2, [r7, #68]	; 0x44
 8009dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e3      	bne.n	8009d9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3314      	adds	r3, #20
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	623b      	str	r3, [r7, #32]
   return(result);
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3314      	adds	r3, #20
 8009df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e3      	bne.n	8009dd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	330c      	adds	r3, #12
 8009e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0310 	bic.w	r3, r3, #16
 8009e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	330c      	adds	r3, #12
 8009e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e40:	61fa      	str	r2, [r7, #28]
 8009e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	69b9      	ldr	r1, [r7, #24]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e3      	bne.n	8009e1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fa fa64 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e60:	e023      	b.n	8009eaa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d009      	beq.n	8009e82 <HAL_UART_IRQHandler+0x4ea>
 8009e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fb37 	bl	800a4ee <UART_Transmit_IT>
    return;
 8009e80:	e014      	b.n	8009eac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00e      	beq.n	8009eac <HAL_UART_IRQHandler+0x514>
 8009e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fb77 	bl	800a58e <UART_EndTransmit_IT>
    return;
 8009ea0:	e004      	b.n	8009eac <HAL_UART_IRQHandler+0x514>
    return;
 8009ea2:	bf00      	nop
 8009ea4:	e002      	b.n	8009eac <HAL_UART_IRQHandler+0x514>
      return;
 8009ea6:	bf00      	nop
 8009ea8:	e000      	b.n	8009eac <HAL_UART_IRQHandler+0x514>
      return;
 8009eaa:	bf00      	nop
  }
}
 8009eac:	37e8      	adds	r7, #232	; 0xe8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop

08009eb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b090      	sub	sp, #64	; 0x40
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d137      	bne.n	8009f7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0e:	2200      	movs	r2, #0
 8009f10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3314      	adds	r3, #20
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	623b      	str	r3, [r7, #32]
   return(result);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3314      	adds	r3, #20
 8009f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f32:	633a      	str	r2, [r7, #48]	; 0x30
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e5      	bne.n	8009f12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	330c      	adds	r3, #12
 8009f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	330c      	adds	r3, #12
 8009f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f66:	61fa      	str	r2, [r7, #28]
 8009f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	69b9      	ldr	r1, [r7, #24]
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	617b      	str	r3, [r7, #20]
   return(result);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e5      	bne.n	8009f46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f7a:	e002      	b.n	8009f82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009f7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f7e:	f7fa f987 	bl	8004290 <HAL_UART_TxCpltCallback>
}
 8009f82:	bf00      	nop
 8009f84:	3740      	adds	r7, #64	; 0x40
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff ff8b 	bl	8009eb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b09c      	sub	sp, #112	; 0x70
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d172      	bne.n	800a0a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	330c      	adds	r3, #12
 8009fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fe8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e5      	bne.n	8009fc8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3314      	adds	r3, #20
 800a002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	667b      	str	r3, [r7, #100]	; 0x64
 800a014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3314      	adds	r3, #20
 800a01a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a01c:	647a      	str	r2, [r7, #68]	; 0x44
 800a01e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3314      	adds	r3, #20
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	623b      	str	r3, [r7, #32]
   return(result);
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a046:	663b      	str	r3, [r7, #96]	; 0x60
 800a048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3314      	adds	r3, #20
 800a04e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a050:	633a      	str	r2, [r7, #48]	; 0x30
 800a052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a066:	2220      	movs	r2, #32
 800a068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	2b01      	cmp	r3, #1
 800a072:	d119      	bne.n	800a0a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	60fb      	str	r3, [r7, #12]
   return(result);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0310 	bic.w	r3, r3, #16
 800a08a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	330c      	adds	r3, #12
 800a092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a094:	61fa      	str	r2, [r7, #28]
 800a096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a098:	69b9      	ldr	r1, [r7, #24]
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e5      	bne.n	800a074 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d106      	bne.n	800a0be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0b8:	f7fa f936 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0bc:	e002      	b.n	800a0c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a0be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0c0:	f7ff ff02 	bl	8009ec8 <HAL_UART_RxCpltCallback>
}
 800a0c4:	bf00      	nop
 800a0c6:	3770      	adds	r7, #112	; 0x70
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d108      	bne.n	800a0f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7fa f91b 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0f2:	e002      	b.n	800a0fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff fef1 	bl	8009edc <HAL_UART_RxHalfCpltCallback>
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11e:	2b80      	cmp	r3, #128	; 0x80
 800a120:	bf0c      	ite	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	2300      	movne	r3, #0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b21      	cmp	r3, #33	; 0x21
 800a134:	d108      	bne.n	800a148 <UART_DMAError+0x46>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2200      	movs	r2, #0
 800a140:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a142:	68b8      	ldr	r0, [r7, #8]
 800a144:	f000 f934 	bl	800a3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b40      	cmp	r3, #64	; 0x40
 800a154:	bf0c      	ite	eq
 800a156:	2301      	moveq	r3, #1
 800a158:	2300      	movne	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b22      	cmp	r3, #34	; 0x22
 800a168:	d108      	bne.n	800a17c <UART_DMAError+0x7a>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d005      	beq.n	800a17c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a176:	68b8      	ldr	r0, [r7, #8]
 800a178:	f000 f942 	bl	800a400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	f043 0210 	orr.w	r2, r3, #16
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a188:	68b8      	ldr	r0, [r7, #8]
 800a18a:	f7fa f89d 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b090      	sub	sp, #64	; 0x40
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	603b      	str	r3, [r7, #0]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1a6:	e050      	b.n	800a24a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d04c      	beq.n	800a24a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1b6:	f7fa fd1b 	bl	8004bf0 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d241      	bcs.n	800a24a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1e6:	637a      	str	r2, [r7, #52]	; 0x34
 800a1e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e5      	bne.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3314      	adds	r3, #20
 800a200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	613b      	str	r3, [r7, #16]
   return(result);
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	63bb      	str	r3, [r7, #56]	; 0x38
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3314      	adds	r3, #20
 800a218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a21a:	623a      	str	r2, [r7, #32]
 800a21c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	69f9      	ldr	r1, [r7, #28]
 800a220:	6a3a      	ldr	r2, [r7, #32]
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	61bb      	str	r3, [r7, #24]
   return(result);
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2220      	movs	r2, #32
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2220      	movs	r2, #32
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e00f      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4013      	ands	r3, r2
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	429a      	cmp	r2, r3
 800a258:	bf0c      	ite	eq
 800a25a:	2301      	moveq	r3, #1
 800a25c:	2300      	movne	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	461a      	mov	r2, r3
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	429a      	cmp	r2, r3
 800a266:	d09f      	beq.n	800a1a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3740      	adds	r7, #64	; 0x40
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b098      	sub	sp, #96	; 0x60
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4613      	mov	r3, r2
 800a280:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	88fa      	ldrh	r2, [r7, #6]
 800a28c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2222      	movs	r2, #34	; 0x22
 800a298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	4a40      	ldr	r2, [pc, #256]	; (800a3a4 <UART_Start_Receive_DMA+0x130>)
 800a2a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	4a3f      	ldr	r2, [pc, #252]	; (800a3a8 <UART_Start_Receive_DMA+0x134>)
 800a2aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	4a3e      	ldr	r2, [pc, #248]	; (800a3ac <UART_Start_Receive_DMA+0x138>)
 800a2b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a2bc:	f107 0308 	add.w	r3, r7, #8
 800a2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	f7fb fa6e 	bl	80057b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	613b      	str	r3, [r7, #16]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d019      	beq.n	800a332 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	330c      	adds	r3, #12
 800a304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a314:	65bb      	str	r3, [r7, #88]	; 0x58
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	330c      	adds	r3, #12
 800a31c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a31e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3314      	adds	r3, #20
 800a338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	657b      	str	r3, [r7, #84]	; 0x54
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3314      	adds	r3, #20
 800a350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a352:	63ba      	str	r2, [r7, #56]	; 0x38
 800a354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3314      	adds	r3, #20
 800a36c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	617b      	str	r3, [r7, #20]
   return(result);
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37c:	653b      	str	r3, [r7, #80]	; 0x50
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3314      	adds	r3, #20
 800a384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a386:	627a      	str	r2, [r7, #36]	; 0x24
 800a388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6a39      	ldr	r1, [r7, #32]
 800a38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	61fb      	str	r3, [r7, #28]
   return(result);
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e5      	bne.n	800a366 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3760      	adds	r7, #96	; 0x60
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	08009fa7 	.word	0x08009fa7
 800a3a8:	0800a0cd 	.word	0x0800a0cd
 800a3ac:	0800a103 	.word	0x0800a103

0800a3b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b089      	sub	sp, #36	; 0x24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	330c      	adds	r3, #12
 800a3be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	330c      	adds	r3, #12
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	61ba      	str	r2, [r7, #24]
 800a3da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6979      	ldr	r1, [r7, #20]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e5      	bne.n	800a3b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a3f4:	bf00      	nop
 800a3f6:	3724      	adds	r7, #36	; 0x24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b095      	sub	sp, #84	; 0x54
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	330c      	adds	r3, #12
 800a40e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a41e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	330c      	adds	r3, #12
 800a426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a428:	643a      	str	r2, [r7, #64]	; 0x40
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a42e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e5      	bne.n	800a408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3314      	adds	r3, #20
 800a442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f023 0301 	bic.w	r3, r3, #1
 800a452:	64bb      	str	r3, [r7, #72]	; 0x48
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3314      	adds	r3, #20
 800a45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a464:	e841 2300 	strex	r3, r2, [r1]
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e5      	bne.n	800a43c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a474:	2b01      	cmp	r3, #1
 800a476:	d119      	bne.n	800a4ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	330c      	adds	r3, #12
 800a47e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	60bb      	str	r3, [r7, #8]
   return(result);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f023 0310 	bic.w	r3, r3, #16
 800a48e:	647b      	str	r3, [r7, #68]	; 0x44
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	330c      	adds	r3, #12
 800a496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a498:	61ba      	str	r2, [r7, #24]
 800a49a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6979      	ldr	r1, [r7, #20]
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4ba:	bf00      	nop
 800a4bc:	3754      	adds	r7, #84	; 0x54
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7f9 fef1 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b21      	cmp	r3, #33	; 0x21
 800a500:	d13e      	bne.n	800a580 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	d114      	bne.n	800a536 <UART_Transmit_IT+0x48>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d110      	bne.n	800a536 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a528:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	1c9a      	adds	r2, r3, #2
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	621a      	str	r2, [r3, #32]
 800a534:	e008      	b.n	800a548 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	1c59      	adds	r1, r3, #1
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6211      	str	r1, [r2, #32]
 800a540:	781a      	ldrb	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	3b01      	subs	r3, #1
 800a550:	b29b      	uxth	r3, r3
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	4619      	mov	r1, r3
 800a556:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10f      	bne.n	800a57c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68da      	ldr	r2, [r3, #12]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a56a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a57a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e000      	b.n	800a582 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7f9 fe6e 	bl	8004290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b08c      	sub	sp, #48	; 0x30
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b22      	cmp	r3, #34	; 0x22
 800a5d0:	f040 80ab 	bne.w	800a72a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5dc:	d117      	bne.n	800a60e <UART_Receive_IT+0x50>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d113      	bne.n	800a60e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	1c9a      	adds	r2, r3, #2
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	629a      	str	r2, [r3, #40]	; 0x28
 800a60c:	e026      	b.n	800a65c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a620:	d007      	beq.n	800a632 <UART_Receive_IT+0x74>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <UART_Receive_IT+0x82>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	e008      	b.n	800a652 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a660:	b29b      	uxth	r3, r3
 800a662:	3b01      	subs	r3, #1
 800a664:	b29b      	uxth	r3, r3
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4619      	mov	r1, r3
 800a66a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d15a      	bne.n	800a726 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f022 0220 	bic.w	r2, r2, #32
 800a67e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a68e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d135      	bne.n	800a71c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	330c      	adds	r3, #12
 800a6bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f023 0310 	bic.w	r3, r3, #16
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	330c      	adds	r3, #12
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d6:	623a      	str	r2, [r7, #32]
 800a6d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	69f9      	ldr	r1, [r7, #28]
 800a6dc:	6a3a      	ldr	r2, [r7, #32]
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e5      	bne.n	800a6b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b10      	cmp	r3, #16
 800a6f6:	d10a      	bne.n	800a70e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7f9 fe07 	bl	8004328 <HAL_UARTEx_RxEventCallback>
 800a71a:	e002      	b.n	800a722 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff fbd3 	bl	8009ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	e002      	b.n	800a72c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	e000      	b.n	800a72c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a72a:	2302      	movs	r3, #2
  }
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3730      	adds	r7, #48	; 0x30
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a738:	b0c0      	sub	sp, #256	; 0x100
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a750:	68d9      	ldr	r1, [r3, #12]
 800a752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	ea40 0301 	orr.w	r3, r0, r1
 800a75c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	431a      	orrs	r2, r3
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	431a      	orrs	r2, r3
 800a774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a78c:	f021 010c 	bic.w	r1, r1, #12
 800a790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a79a:	430b      	orrs	r3, r1
 800a79c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a79e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ae:	6999      	ldr	r1, [r3, #24]
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	ea40 0301 	orr.w	r3, r0, r1
 800a7ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b8f      	ldr	r3, [pc, #572]	; (800aa00 <UART_SetConfig+0x2cc>)
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d005      	beq.n	800a7d4 <UART_SetConfig+0xa0>
 800a7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b8d      	ldr	r3, [pc, #564]	; (800aa04 <UART_SetConfig+0x2d0>)
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d104      	bne.n	800a7de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7d4:	f7fd fc20 	bl	8008018 <HAL_RCC_GetPCLK2Freq>
 800a7d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a7dc:	e003      	b.n	800a7e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7de:	f7fd fc07 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800a7e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7f0:	f040 810c 	bne.w	800aa0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a806:	4622      	mov	r2, r4
 800a808:	462b      	mov	r3, r5
 800a80a:	1891      	adds	r1, r2, r2
 800a80c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a80e:	415b      	adcs	r3, r3
 800a810:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a816:	4621      	mov	r1, r4
 800a818:	eb12 0801 	adds.w	r8, r2, r1
 800a81c:	4629      	mov	r1, r5
 800a81e:	eb43 0901 	adc.w	r9, r3, r1
 800a822:	f04f 0200 	mov.w	r2, #0
 800a826:	f04f 0300 	mov.w	r3, #0
 800a82a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a82e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a836:	4690      	mov	r8, r2
 800a838:	4699      	mov	r9, r3
 800a83a:	4623      	mov	r3, r4
 800a83c:	eb18 0303 	adds.w	r3, r8, r3
 800a840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a844:	462b      	mov	r3, r5
 800a846:	eb49 0303 	adc.w	r3, r9, r3
 800a84a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a85a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a85e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a862:	460b      	mov	r3, r1
 800a864:	18db      	adds	r3, r3, r3
 800a866:	653b      	str	r3, [r7, #80]	; 0x50
 800a868:	4613      	mov	r3, r2
 800a86a:	eb42 0303 	adc.w	r3, r2, r3
 800a86e:	657b      	str	r3, [r7, #84]	; 0x54
 800a870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a878:	f7f6 fa5e 	bl	8000d38 <__aeabi_uldivmod>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4b61      	ldr	r3, [pc, #388]	; (800aa08 <UART_SetConfig+0x2d4>)
 800a882:	fba3 2302 	umull	r2, r3, r3, r2
 800a886:	095b      	lsrs	r3, r3, #5
 800a888:	011c      	lsls	r4, r3, #4
 800a88a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a894:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a89c:	4642      	mov	r2, r8
 800a89e:	464b      	mov	r3, r9
 800a8a0:	1891      	adds	r1, r2, r2
 800a8a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8a4:	415b      	adcs	r3, r3
 800a8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8ac:	4641      	mov	r1, r8
 800a8ae:	eb12 0a01 	adds.w	sl, r2, r1
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	eb43 0b01 	adc.w	fp, r3, r1
 800a8b8:	f04f 0200 	mov.w	r2, #0
 800a8bc:	f04f 0300 	mov.w	r3, #0
 800a8c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8cc:	4692      	mov	sl, r2
 800a8ce:	469b      	mov	fp, r3
 800a8d0:	4643      	mov	r3, r8
 800a8d2:	eb1a 0303 	adds.w	r3, sl, r3
 800a8d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	eb4b 0303 	adc.w	r3, fp, r3
 800a8e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a8f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	18db      	adds	r3, r3, r3
 800a8fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a8fe:	4613      	mov	r3, r2
 800a900:	eb42 0303 	adc.w	r3, r2, r3
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
 800a906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a90a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a90e:	f7f6 fa13 	bl	8000d38 <__aeabi_uldivmod>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4611      	mov	r1, r2
 800a918:	4b3b      	ldr	r3, [pc, #236]	; (800aa08 <UART_SetConfig+0x2d4>)
 800a91a:	fba3 2301 	umull	r2, r3, r3, r1
 800a91e:	095b      	lsrs	r3, r3, #5
 800a920:	2264      	movs	r2, #100	; 0x64
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	1acb      	subs	r3, r1, r3
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a92e:	4b36      	ldr	r3, [pc, #216]	; (800aa08 <UART_SetConfig+0x2d4>)
 800a930:	fba3 2302 	umull	r2, r3, r3, r2
 800a934:	095b      	lsrs	r3, r3, #5
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a93c:	441c      	add	r4, r3
 800a93e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a942:	2200      	movs	r2, #0
 800a944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a948:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a94c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a950:	4642      	mov	r2, r8
 800a952:	464b      	mov	r3, r9
 800a954:	1891      	adds	r1, r2, r2
 800a956:	63b9      	str	r1, [r7, #56]	; 0x38
 800a958:	415b      	adcs	r3, r3
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a95c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a960:	4641      	mov	r1, r8
 800a962:	1851      	adds	r1, r2, r1
 800a964:	6339      	str	r1, [r7, #48]	; 0x30
 800a966:	4649      	mov	r1, r9
 800a968:	414b      	adcs	r3, r1
 800a96a:	637b      	str	r3, [r7, #52]	; 0x34
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	f04f 0300 	mov.w	r3, #0
 800a974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a978:	4659      	mov	r1, fp
 800a97a:	00cb      	lsls	r3, r1, #3
 800a97c:	4651      	mov	r1, sl
 800a97e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a982:	4651      	mov	r1, sl
 800a984:	00ca      	lsls	r2, r1, #3
 800a986:	4610      	mov	r0, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	4642      	mov	r2, r8
 800a98e:	189b      	adds	r3, r3, r2
 800a990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a994:	464b      	mov	r3, r9
 800a996:	460a      	mov	r2, r1
 800a998:	eb42 0303 	adc.w	r3, r2, r3
 800a99c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	18db      	adds	r3, r3, r3
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	eb42 0303 	adc.w	r3, r2, r3
 800a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a9ca:	f7f6 f9b5 	bl	8000d38 <__aeabi_uldivmod>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <UART_SetConfig+0x2d4>)
 800a9d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d8:	095b      	lsrs	r3, r3, #5
 800a9da:	2164      	movs	r1, #100	; 0x64
 800a9dc:	fb01 f303 	mul.w	r3, r1, r3
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	3332      	adds	r3, #50	; 0x32
 800a9e6:	4a08      	ldr	r2, [pc, #32]	; (800aa08 <UART_SetConfig+0x2d4>)
 800a9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ec:	095b      	lsrs	r3, r3, #5
 800a9ee:	f003 0207 	and.w	r2, r3, #7
 800a9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4422      	add	r2, r4
 800a9fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9fc:	e105      	b.n	800ac0a <UART_SetConfig+0x4d6>
 800a9fe:	bf00      	nop
 800aa00:	40011000 	.word	0x40011000
 800aa04:	40011400 	.word	0x40011400
 800aa08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa1e:	4642      	mov	r2, r8
 800aa20:	464b      	mov	r3, r9
 800aa22:	1891      	adds	r1, r2, r2
 800aa24:	6239      	str	r1, [r7, #32]
 800aa26:	415b      	adcs	r3, r3
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
 800aa2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa2e:	4641      	mov	r1, r8
 800aa30:	1854      	adds	r4, r2, r1
 800aa32:	4649      	mov	r1, r9
 800aa34:	eb43 0501 	adc.w	r5, r3, r1
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	00eb      	lsls	r3, r5, #3
 800aa42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa46:	00e2      	lsls	r2, r4, #3
 800aa48:	4614      	mov	r4, r2
 800aa4a:	461d      	mov	r5, r3
 800aa4c:	4643      	mov	r3, r8
 800aa4e:	18e3      	adds	r3, r4, r3
 800aa50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa54:	464b      	mov	r3, r9
 800aa56:	eb45 0303 	adc.w	r3, r5, r3
 800aa5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa6e:	f04f 0200 	mov.w	r2, #0
 800aa72:	f04f 0300 	mov.w	r3, #0
 800aa76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	008b      	lsls	r3, r1, #2
 800aa7e:	4621      	mov	r1, r4
 800aa80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa84:	4621      	mov	r1, r4
 800aa86:	008a      	lsls	r2, r1, #2
 800aa88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa8c:	f7f6 f954 	bl	8000d38 <__aeabi_uldivmod>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4b60      	ldr	r3, [pc, #384]	; (800ac18 <UART_SetConfig+0x4e4>)
 800aa96:	fba3 2302 	umull	r2, r3, r3, r2
 800aa9a:	095b      	lsrs	r3, r3, #5
 800aa9c:	011c      	lsls	r4, r3, #4
 800aa9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aaa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aaac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aab0:	4642      	mov	r2, r8
 800aab2:	464b      	mov	r3, r9
 800aab4:	1891      	adds	r1, r2, r2
 800aab6:	61b9      	str	r1, [r7, #24]
 800aab8:	415b      	adcs	r3, r3
 800aaba:	61fb      	str	r3, [r7, #28]
 800aabc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aac0:	4641      	mov	r1, r8
 800aac2:	1851      	adds	r1, r2, r1
 800aac4:	6139      	str	r1, [r7, #16]
 800aac6:	4649      	mov	r1, r9
 800aac8:	414b      	adcs	r3, r1
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aad8:	4659      	mov	r1, fp
 800aada:	00cb      	lsls	r3, r1, #3
 800aadc:	4651      	mov	r1, sl
 800aade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aae2:	4651      	mov	r1, sl
 800aae4:	00ca      	lsls	r2, r1, #3
 800aae6:	4610      	mov	r0, r2
 800aae8:	4619      	mov	r1, r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	4642      	mov	r2, r8
 800aaee:	189b      	adds	r3, r3, r2
 800aaf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	460a      	mov	r2, r1
 800aaf8:	eb42 0303 	adc.w	r3, r2, r3
 800aafc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	f04f 0300 	mov.w	r3, #0
 800ab14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab18:	4649      	mov	r1, r9
 800ab1a:	008b      	lsls	r3, r1, #2
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab22:	4641      	mov	r1, r8
 800ab24:	008a      	lsls	r2, r1, #2
 800ab26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab2a:	f7f6 f905 	bl	8000d38 <__aeabi_uldivmod>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4b39      	ldr	r3, [pc, #228]	; (800ac18 <UART_SetConfig+0x4e4>)
 800ab34:	fba3 1302 	umull	r1, r3, r3, r2
 800ab38:	095b      	lsrs	r3, r3, #5
 800ab3a:	2164      	movs	r1, #100	; 0x64
 800ab3c:	fb01 f303 	mul.w	r3, r1, r3
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	3332      	adds	r3, #50	; 0x32
 800ab46:	4a34      	ldr	r2, [pc, #208]	; (800ac18 <UART_SetConfig+0x4e4>)
 800ab48:	fba2 2303 	umull	r2, r3, r2, r3
 800ab4c:	095b      	lsrs	r3, r3, #5
 800ab4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab52:	441c      	add	r4, r3
 800ab54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab58:	2200      	movs	r2, #0
 800ab5a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab5c:	677a      	str	r2, [r7, #116]	; 0x74
 800ab5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab62:	4642      	mov	r2, r8
 800ab64:	464b      	mov	r3, r9
 800ab66:	1891      	adds	r1, r2, r2
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	415b      	adcs	r3, r3
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab72:	4641      	mov	r1, r8
 800ab74:	1851      	adds	r1, r2, r1
 800ab76:	6039      	str	r1, [r7, #0]
 800ab78:	4649      	mov	r1, r9
 800ab7a:	414b      	adcs	r3, r1
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	f04f 0300 	mov.w	r3, #0
 800ab86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	00cb      	lsls	r3, r1, #3
 800ab8e:	4651      	mov	r1, sl
 800ab90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab94:	4651      	mov	r1, sl
 800ab96:	00ca      	lsls	r2, r1, #3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	4642      	mov	r2, r8
 800aba0:	189b      	adds	r3, r3, r2
 800aba2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba4:	464b      	mov	r3, r9
 800aba6:	460a      	mov	r2, r1
 800aba8:	eb42 0303 	adc.w	r3, r2, r3
 800abac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	663b      	str	r3, [r7, #96]	; 0x60
 800abb8:	667a      	str	r2, [r7, #100]	; 0x64
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800abc6:	4649      	mov	r1, r9
 800abc8:	008b      	lsls	r3, r1, #2
 800abca:	4641      	mov	r1, r8
 800abcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abd0:	4641      	mov	r1, r8
 800abd2:	008a      	lsls	r2, r1, #2
 800abd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800abd8:	f7f6 f8ae 	bl	8000d38 <__aeabi_uldivmod>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <UART_SetConfig+0x4e4>)
 800abe2:	fba3 1302 	umull	r1, r3, r3, r2
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	2164      	movs	r1, #100	; 0x64
 800abea:	fb01 f303 	mul.w	r3, r1, r3
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	011b      	lsls	r3, r3, #4
 800abf2:	3332      	adds	r3, #50	; 0x32
 800abf4:	4a08      	ldr	r2, [pc, #32]	; (800ac18 <UART_SetConfig+0x4e4>)
 800abf6:	fba2 2303 	umull	r2, r3, r2, r3
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4422      	add	r2, r4
 800ac08:	609a      	str	r2, [r3, #8]
}
 800ac0a:	bf00      	nop
 800ac0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac10:	46bd      	mov	sp, r7
 800ac12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac16:	bf00      	nop
 800ac18:	51eb851f 	.word	0x51eb851f

0800ac1c <__errno>:
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <__errno+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000010 	.word	0x20000010

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4d0d      	ldr	r5, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1b64      	subs	r4, r4, r5
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2600      	movs	r6, #0
 800ac34:	42a6      	cmp	r6, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4d0b      	ldr	r5, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f002 ff84 	bl	800db48 <_init>
 800ac40:	1b64      	subs	r4, r4, r5
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2600      	movs	r6, #0
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac50:	4798      	blx	r3
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5a:	4798      	blx	r3
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	0800e15c 	.word	0x0800e15c
 800ac64:	0800e15c 	.word	0x0800e15c
 800ac68:	0800e15c 	.word	0x0800e15c
 800ac6c:	0800e160 	.word	0x0800e160

0800ac70 <memcpy>:
 800ac70:	440a      	add	r2, r1
 800ac72:	4291      	cmp	r1, r2
 800ac74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac78:	d100      	bne.n	800ac7c <memcpy+0xc>
 800ac7a:	4770      	bx	lr
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac86:	4291      	cmp	r1, r2
 800ac88:	d1f9      	bne.n	800ac7e <memcpy+0xe>
 800ac8a:	bd10      	pop	{r4, pc}

0800ac8c <memset>:
 800ac8c:	4402      	add	r2, r0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d100      	bne.n	800ac96 <memset+0xa>
 800ac94:	4770      	bx	lr
 800ac96:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9a:	e7f9      	b.n	800ac90 <memset+0x4>

0800ac9c <__cvt>:
 800ac9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	ec55 4b10 	vmov	r4, r5, d0
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	460e      	mov	r6, r1
 800aca8:	4619      	mov	r1, r3
 800acaa:	462b      	mov	r3, r5
 800acac:	bfbb      	ittet	lt
 800acae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acb2:	461d      	movlt	r5, r3
 800acb4:	2300      	movge	r3, #0
 800acb6:	232d      	movlt	r3, #45	; 0x2d
 800acb8:	700b      	strb	r3, [r1, #0]
 800acba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acc0:	4691      	mov	r9, r2
 800acc2:	f023 0820 	bic.w	r8, r3, #32
 800acc6:	bfbc      	itt	lt
 800acc8:	4622      	movlt	r2, r4
 800acca:	4614      	movlt	r4, r2
 800accc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acd0:	d005      	beq.n	800acde <__cvt+0x42>
 800acd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acd6:	d100      	bne.n	800acda <__cvt+0x3e>
 800acd8:	3601      	adds	r6, #1
 800acda:	2102      	movs	r1, #2
 800acdc:	e000      	b.n	800ace0 <__cvt+0x44>
 800acde:	2103      	movs	r1, #3
 800ace0:	ab03      	add	r3, sp, #12
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	ab02      	add	r3, sp, #8
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	ec45 4b10 	vmov	d0, r4, r5
 800acec:	4653      	mov	r3, sl
 800acee:	4632      	mov	r2, r6
 800acf0:	f000 fcea 	bl	800b6c8 <_dtoa_r>
 800acf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800acf8:	4607      	mov	r7, r0
 800acfa:	d102      	bne.n	800ad02 <__cvt+0x66>
 800acfc:	f019 0f01 	tst.w	r9, #1
 800ad00:	d022      	beq.n	800ad48 <__cvt+0xac>
 800ad02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad06:	eb07 0906 	add.w	r9, r7, r6
 800ad0a:	d110      	bne.n	800ad2e <__cvt+0x92>
 800ad0c:	783b      	ldrb	r3, [r7, #0]
 800ad0e:	2b30      	cmp	r3, #48	; 0x30
 800ad10:	d10a      	bne.n	800ad28 <__cvt+0x8c>
 800ad12:	2200      	movs	r2, #0
 800ad14:	2300      	movs	r3, #0
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad1e:	b918      	cbnz	r0, 800ad28 <__cvt+0x8c>
 800ad20:	f1c6 0601 	rsb	r6, r6, #1
 800ad24:	f8ca 6000 	str.w	r6, [sl]
 800ad28:	f8da 3000 	ldr.w	r3, [sl]
 800ad2c:	4499      	add	r9, r3
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2300      	movs	r3, #0
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad3a:	b108      	cbz	r0, 800ad40 <__cvt+0xa4>
 800ad3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad40:	2230      	movs	r2, #48	; 0x30
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	454b      	cmp	r3, r9
 800ad46:	d307      	bcc.n	800ad58 <__cvt+0xbc>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad4c:	1bdb      	subs	r3, r3, r7
 800ad4e:	4638      	mov	r0, r7
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	b004      	add	sp, #16
 800ad54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad58:	1c59      	adds	r1, r3, #1
 800ad5a:	9103      	str	r1, [sp, #12]
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e7f0      	b.n	800ad42 <__cvt+0xa6>

0800ad60 <__exponent>:
 800ad60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad62:	4603      	mov	r3, r0
 800ad64:	2900      	cmp	r1, #0
 800ad66:	bfb8      	it	lt
 800ad68:	4249      	neglt	r1, r1
 800ad6a:	f803 2b02 	strb.w	r2, [r3], #2
 800ad6e:	bfb4      	ite	lt
 800ad70:	222d      	movlt	r2, #45	; 0x2d
 800ad72:	222b      	movge	r2, #43	; 0x2b
 800ad74:	2909      	cmp	r1, #9
 800ad76:	7042      	strb	r2, [r0, #1]
 800ad78:	dd2a      	ble.n	800add0 <__exponent+0x70>
 800ad7a:	f10d 0407 	add.w	r4, sp, #7
 800ad7e:	46a4      	mov	ip, r4
 800ad80:	270a      	movs	r7, #10
 800ad82:	46a6      	mov	lr, r4
 800ad84:	460a      	mov	r2, r1
 800ad86:	fb91 f6f7 	sdiv	r6, r1, r7
 800ad8a:	fb07 1516 	mls	r5, r7, r6, r1
 800ad8e:	3530      	adds	r5, #48	; 0x30
 800ad90:	2a63      	cmp	r2, #99	; 0x63
 800ad92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	dcf1      	bgt.n	800ad82 <__exponent+0x22>
 800ad9e:	3130      	adds	r1, #48	; 0x30
 800ada0:	f1ae 0502 	sub.w	r5, lr, #2
 800ada4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ada8:	1c44      	adds	r4, r0, #1
 800adaa:	4629      	mov	r1, r5
 800adac:	4561      	cmp	r1, ip
 800adae:	d30a      	bcc.n	800adc6 <__exponent+0x66>
 800adb0:	f10d 0209 	add.w	r2, sp, #9
 800adb4:	eba2 020e 	sub.w	r2, r2, lr
 800adb8:	4565      	cmp	r5, ip
 800adba:	bf88      	it	hi
 800adbc:	2200      	movhi	r2, #0
 800adbe:	4413      	add	r3, r2
 800adc0:	1a18      	subs	r0, r3, r0
 800adc2:	b003      	add	sp, #12
 800adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adce:	e7ed      	b.n	800adac <__exponent+0x4c>
 800add0:	2330      	movs	r3, #48	; 0x30
 800add2:	3130      	adds	r1, #48	; 0x30
 800add4:	7083      	strb	r3, [r0, #2]
 800add6:	70c1      	strb	r1, [r0, #3]
 800add8:	1d03      	adds	r3, r0, #4
 800adda:	e7f1      	b.n	800adc0 <__exponent+0x60>

0800addc <_printf_float>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	ed2d 8b02 	vpush	{d8}
 800ade4:	b08d      	sub	sp, #52	; 0x34
 800ade6:	460c      	mov	r4, r1
 800ade8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800adec:	4616      	mov	r6, r2
 800adee:	461f      	mov	r7, r3
 800adf0:	4605      	mov	r5, r0
 800adf2:	f001 fa57 	bl	800c2a4 <_localeconv_r>
 800adf6:	f8d0 a000 	ldr.w	sl, [r0]
 800adfa:	4650      	mov	r0, sl
 800adfc:	f7f5 f9f0 	bl	80001e0 <strlen>
 800ae00:	2300      	movs	r3, #0
 800ae02:	930a      	str	r3, [sp, #40]	; 0x28
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	f8d8 3000 	ldr.w	r3, [r8]
 800ae0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae10:	3307      	adds	r3, #7
 800ae12:	f023 0307 	bic.w	r3, r3, #7
 800ae16:	f103 0208 	add.w	r2, r3, #8
 800ae1a:	f8c8 2000 	str.w	r2, [r8]
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae34:	ee08 0a10 	vmov	s16, r0
 800ae38:	4b9f      	ldr	r3, [pc, #636]	; (800b0b8 <_printf_float+0x2dc>)
 800ae3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	f7f5 fe7b 	bl	8000b3c <__aeabi_dcmpun>
 800ae46:	bb88      	cbnz	r0, 800aeac <_printf_float+0xd0>
 800ae48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae4c:	4b9a      	ldr	r3, [pc, #616]	; (800b0b8 <_printf_float+0x2dc>)
 800ae4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae52:	f7f5 fe55 	bl	8000b00 <__aeabi_dcmple>
 800ae56:	bb48      	cbnz	r0, 800aeac <_printf_float+0xd0>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fe44 	bl	8000aec <__aeabi_dcmplt>
 800ae64:	b110      	cbz	r0, 800ae6c <_printf_float+0x90>
 800ae66:	232d      	movs	r3, #45	; 0x2d
 800ae68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae6c:	4b93      	ldr	r3, [pc, #588]	; (800b0bc <_printf_float+0x2e0>)
 800ae6e:	4894      	ldr	r0, [pc, #592]	; (800b0c0 <_printf_float+0x2e4>)
 800ae70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae74:	bf94      	ite	ls
 800ae76:	4698      	movls	r8, r3
 800ae78:	4680      	movhi	r8, r0
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	6123      	str	r3, [r4, #16]
 800ae7e:	9b05      	ldr	r3, [sp, #20]
 800ae80:	f023 0204 	bic.w	r2, r3, #4
 800ae84:	6022      	str	r2, [r4, #0]
 800ae86:	f04f 0900 	mov.w	r9, #0
 800ae8a:	9700      	str	r7, [sp, #0]
 800ae8c:	4633      	mov	r3, r6
 800ae8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae90:	4621      	mov	r1, r4
 800ae92:	4628      	mov	r0, r5
 800ae94:	f000 f9d8 	bl	800b248 <_printf_common>
 800ae98:	3001      	adds	r0, #1
 800ae9a:	f040 8090 	bne.w	800afbe <_printf_float+0x1e2>
 800ae9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aea2:	b00d      	add	sp, #52	; 0x34
 800aea4:	ecbd 8b02 	vpop	{d8}
 800aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeac:	4642      	mov	r2, r8
 800aeae:	464b      	mov	r3, r9
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 fe42 	bl	8000b3c <__aeabi_dcmpun>
 800aeb8:	b140      	cbz	r0, 800aecc <_printf_float+0xf0>
 800aeba:	464b      	mov	r3, r9
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	bfbc      	itt	lt
 800aec0:	232d      	movlt	r3, #45	; 0x2d
 800aec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aec6:	487f      	ldr	r0, [pc, #508]	; (800b0c4 <_printf_float+0x2e8>)
 800aec8:	4b7f      	ldr	r3, [pc, #508]	; (800b0c8 <_printf_float+0x2ec>)
 800aeca:	e7d1      	b.n	800ae70 <_printf_float+0x94>
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aed2:	9206      	str	r2, [sp, #24]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	d13f      	bne.n	800af58 <_printf_float+0x17c>
 800aed8:	2306      	movs	r3, #6
 800aeda:	6063      	str	r3, [r4, #4]
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	6861      	ldr	r1, [r4, #4]
 800aee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aee4:	2300      	movs	r3, #0
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	ab0a      	add	r3, sp, #40	; 0x28
 800aeea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aeee:	ab09      	add	r3, sp, #36	; 0x24
 800aef0:	ec49 8b10 	vmov	d0, r8, r9
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	6022      	str	r2, [r4, #0]
 800aef8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7ff fecd 	bl	800ac9c <__cvt>
 800af02:	9b06      	ldr	r3, [sp, #24]
 800af04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af06:	2b47      	cmp	r3, #71	; 0x47
 800af08:	4680      	mov	r8, r0
 800af0a:	d108      	bne.n	800af1e <_printf_float+0x142>
 800af0c:	1cc8      	adds	r0, r1, #3
 800af0e:	db02      	blt.n	800af16 <_printf_float+0x13a>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	4299      	cmp	r1, r3
 800af14:	dd41      	ble.n	800af9a <_printf_float+0x1be>
 800af16:	f1ab 0b02 	sub.w	fp, fp, #2
 800af1a:	fa5f fb8b 	uxtb.w	fp, fp
 800af1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af22:	d820      	bhi.n	800af66 <_printf_float+0x18a>
 800af24:	3901      	subs	r1, #1
 800af26:	465a      	mov	r2, fp
 800af28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af2c:	9109      	str	r1, [sp, #36]	; 0x24
 800af2e:	f7ff ff17 	bl	800ad60 <__exponent>
 800af32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af34:	1813      	adds	r3, r2, r0
 800af36:	2a01      	cmp	r2, #1
 800af38:	4681      	mov	r9, r0
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	dc02      	bgt.n	800af44 <_printf_float+0x168>
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	07d2      	lsls	r2, r2, #31
 800af42:	d501      	bpl.n	800af48 <_printf_float+0x16c>
 800af44:	3301      	adds	r3, #1
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d09c      	beq.n	800ae8a <_printf_float+0xae>
 800af50:	232d      	movs	r3, #45	; 0x2d
 800af52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af56:	e798      	b.n	800ae8a <_printf_float+0xae>
 800af58:	9a06      	ldr	r2, [sp, #24]
 800af5a:	2a47      	cmp	r2, #71	; 0x47
 800af5c:	d1be      	bne.n	800aedc <_printf_float+0x100>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1bc      	bne.n	800aedc <_printf_float+0x100>
 800af62:	2301      	movs	r3, #1
 800af64:	e7b9      	b.n	800aeda <_printf_float+0xfe>
 800af66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af6a:	d118      	bne.n	800af9e <_printf_float+0x1c2>
 800af6c:	2900      	cmp	r1, #0
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	dd0b      	ble.n	800af8a <_printf_float+0x1ae>
 800af72:	6121      	str	r1, [r4, #16]
 800af74:	b913      	cbnz	r3, 800af7c <_printf_float+0x1a0>
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	07d0      	lsls	r0, r2, #31
 800af7a:	d502      	bpl.n	800af82 <_printf_float+0x1a6>
 800af7c:	3301      	adds	r3, #1
 800af7e:	440b      	add	r3, r1
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	65a1      	str	r1, [r4, #88]	; 0x58
 800af84:	f04f 0900 	mov.w	r9, #0
 800af88:	e7de      	b.n	800af48 <_printf_float+0x16c>
 800af8a:	b913      	cbnz	r3, 800af92 <_printf_float+0x1b6>
 800af8c:	6822      	ldr	r2, [r4, #0]
 800af8e:	07d2      	lsls	r2, r2, #31
 800af90:	d501      	bpl.n	800af96 <_printf_float+0x1ba>
 800af92:	3302      	adds	r3, #2
 800af94:	e7f4      	b.n	800af80 <_printf_float+0x1a4>
 800af96:	2301      	movs	r3, #1
 800af98:	e7f2      	b.n	800af80 <_printf_float+0x1a4>
 800af9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800af9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa0:	4299      	cmp	r1, r3
 800afa2:	db05      	blt.n	800afb0 <_printf_float+0x1d4>
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	6121      	str	r1, [r4, #16]
 800afa8:	07d8      	lsls	r0, r3, #31
 800afaa:	d5ea      	bpl.n	800af82 <_printf_float+0x1a6>
 800afac:	1c4b      	adds	r3, r1, #1
 800afae:	e7e7      	b.n	800af80 <_printf_float+0x1a4>
 800afb0:	2900      	cmp	r1, #0
 800afb2:	bfd4      	ite	le
 800afb4:	f1c1 0202 	rsble	r2, r1, #2
 800afb8:	2201      	movgt	r2, #1
 800afba:	4413      	add	r3, r2
 800afbc:	e7e0      	b.n	800af80 <_printf_float+0x1a4>
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	055a      	lsls	r2, r3, #21
 800afc2:	d407      	bmi.n	800afd4 <_printf_float+0x1f8>
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	4642      	mov	r2, r8
 800afc8:	4631      	mov	r1, r6
 800afca:	4628      	mov	r0, r5
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	d12c      	bne.n	800b02c <_printf_float+0x250>
 800afd2:	e764      	b.n	800ae9e <_printf_float+0xc2>
 800afd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afd8:	f240 80e0 	bls.w	800b19c <_printf_float+0x3c0>
 800afdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afe0:	2200      	movs	r2, #0
 800afe2:	2300      	movs	r3, #0
 800afe4:	f7f5 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d034      	beq.n	800b056 <_printf_float+0x27a>
 800afec:	4a37      	ldr	r2, [pc, #220]	; (800b0cc <_printf_float+0x2f0>)
 800afee:	2301      	movs	r3, #1
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	f43f af51 	beq.w	800ae9e <_printf_float+0xc2>
 800affc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b000:	429a      	cmp	r2, r3
 800b002:	db02      	blt.n	800b00a <_printf_float+0x22e>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	07d8      	lsls	r0, r3, #31
 800b008:	d510      	bpl.n	800b02c <_printf_float+0x250>
 800b00a:	ee18 3a10 	vmov	r3, s16
 800b00e:	4652      	mov	r2, sl
 800b010:	4631      	mov	r1, r6
 800b012:	4628      	mov	r0, r5
 800b014:	47b8      	blx	r7
 800b016:	3001      	adds	r0, #1
 800b018:	f43f af41 	beq.w	800ae9e <_printf_float+0xc2>
 800b01c:	f04f 0800 	mov.w	r8, #0
 800b020:	f104 091a 	add.w	r9, r4, #26
 800b024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b026:	3b01      	subs	r3, #1
 800b028:	4543      	cmp	r3, r8
 800b02a:	dc09      	bgt.n	800b040 <_printf_float+0x264>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	079b      	lsls	r3, r3, #30
 800b030:	f100 8105 	bmi.w	800b23e <_printf_float+0x462>
 800b034:	68e0      	ldr	r0, [r4, #12]
 800b036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b038:	4298      	cmp	r0, r3
 800b03a:	bfb8      	it	lt
 800b03c:	4618      	movlt	r0, r3
 800b03e:	e730      	b.n	800aea2 <_printf_float+0xc6>
 800b040:	2301      	movs	r3, #1
 800b042:	464a      	mov	r2, r9
 800b044:	4631      	mov	r1, r6
 800b046:	4628      	mov	r0, r5
 800b048:	47b8      	blx	r7
 800b04a:	3001      	adds	r0, #1
 800b04c:	f43f af27 	beq.w	800ae9e <_printf_float+0xc2>
 800b050:	f108 0801 	add.w	r8, r8, #1
 800b054:	e7e6      	b.n	800b024 <_printf_float+0x248>
 800b056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc39      	bgt.n	800b0d0 <_printf_float+0x2f4>
 800b05c:	4a1b      	ldr	r2, [pc, #108]	; (800b0cc <_printf_float+0x2f0>)
 800b05e:	2301      	movs	r3, #1
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	f43f af19 	beq.w	800ae9e <_printf_float+0xc2>
 800b06c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b070:	4313      	orrs	r3, r2
 800b072:	d102      	bne.n	800b07a <_printf_float+0x29e>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	d5d8      	bpl.n	800b02c <_printf_float+0x250>
 800b07a:	ee18 3a10 	vmov	r3, s16
 800b07e:	4652      	mov	r2, sl
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	f43f af09 	beq.w	800ae9e <_printf_float+0xc2>
 800b08c:	f04f 0900 	mov.w	r9, #0
 800b090:	f104 0a1a 	add.w	sl, r4, #26
 800b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b096:	425b      	negs	r3, r3
 800b098:	454b      	cmp	r3, r9
 800b09a:	dc01      	bgt.n	800b0a0 <_printf_float+0x2c4>
 800b09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b09e:	e792      	b.n	800afc6 <_printf_float+0x1ea>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f aef7 	beq.w	800ae9e <_printf_float+0xc2>
 800b0b0:	f109 0901 	add.w	r9, r9, #1
 800b0b4:	e7ee      	b.n	800b094 <_printf_float+0x2b8>
 800b0b6:	bf00      	nop
 800b0b8:	7fefffff 	.word	0x7fefffff
 800b0bc:	0800dd80 	.word	0x0800dd80
 800b0c0:	0800dd84 	.word	0x0800dd84
 800b0c4:	0800dd8c 	.word	0x0800dd8c
 800b0c8:	0800dd88 	.word	0x0800dd88
 800b0cc:	0800dd90 	.word	0x0800dd90
 800b0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	bfa8      	it	ge
 800b0d8:	461a      	movge	r2, r3
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	4691      	mov	r9, r2
 800b0de:	dc37      	bgt.n	800b150 <_printf_float+0x374>
 800b0e0:	f04f 0b00 	mov.w	fp, #0
 800b0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0e8:	f104 021a 	add.w	r2, r4, #26
 800b0ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0ee:	9305      	str	r3, [sp, #20]
 800b0f0:	eba3 0309 	sub.w	r3, r3, r9
 800b0f4:	455b      	cmp	r3, fp
 800b0f6:	dc33      	bgt.n	800b160 <_printf_float+0x384>
 800b0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	db3b      	blt.n	800b178 <_printf_float+0x39c>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d438      	bmi.n	800b178 <_printf_float+0x39c>
 800b106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b108:	9a05      	ldr	r2, [sp, #20]
 800b10a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b10c:	1a9a      	subs	r2, r3, r2
 800b10e:	eba3 0901 	sub.w	r9, r3, r1
 800b112:	4591      	cmp	r9, r2
 800b114:	bfa8      	it	ge
 800b116:	4691      	movge	r9, r2
 800b118:	f1b9 0f00 	cmp.w	r9, #0
 800b11c:	dc35      	bgt.n	800b18a <_printf_float+0x3ae>
 800b11e:	f04f 0800 	mov.w	r8, #0
 800b122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b126:	f104 0a1a 	add.w	sl, r4, #26
 800b12a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	eba3 0309 	sub.w	r3, r3, r9
 800b134:	4543      	cmp	r3, r8
 800b136:	f77f af79 	ble.w	800b02c <_printf_float+0x250>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4631      	mov	r1, r6
 800b140:	4628      	mov	r0, r5
 800b142:	47b8      	blx	r7
 800b144:	3001      	adds	r0, #1
 800b146:	f43f aeaa 	beq.w	800ae9e <_printf_float+0xc2>
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	e7ec      	b.n	800b12a <_printf_float+0x34e>
 800b150:	4613      	mov	r3, r2
 800b152:	4631      	mov	r1, r6
 800b154:	4642      	mov	r2, r8
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	d1c0      	bne.n	800b0e0 <_printf_float+0x304>
 800b15e:	e69e      	b.n	800ae9e <_printf_float+0xc2>
 800b160:	2301      	movs	r3, #1
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	9205      	str	r2, [sp, #20]
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f ae97 	beq.w	800ae9e <_printf_float+0xc2>
 800b170:	9a05      	ldr	r2, [sp, #20]
 800b172:	f10b 0b01 	add.w	fp, fp, #1
 800b176:	e7b9      	b.n	800b0ec <_printf_float+0x310>
 800b178:	ee18 3a10 	vmov	r3, s16
 800b17c:	4652      	mov	r2, sl
 800b17e:	4631      	mov	r1, r6
 800b180:	4628      	mov	r0, r5
 800b182:	47b8      	blx	r7
 800b184:	3001      	adds	r0, #1
 800b186:	d1be      	bne.n	800b106 <_printf_float+0x32a>
 800b188:	e689      	b.n	800ae9e <_printf_float+0xc2>
 800b18a:	9a05      	ldr	r2, [sp, #20]
 800b18c:	464b      	mov	r3, r9
 800b18e:	4442      	add	r2, r8
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	d1c1      	bne.n	800b11e <_printf_float+0x342>
 800b19a:	e680      	b.n	800ae9e <_printf_float+0xc2>
 800b19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b19e:	2a01      	cmp	r2, #1
 800b1a0:	dc01      	bgt.n	800b1a6 <_printf_float+0x3ca>
 800b1a2:	07db      	lsls	r3, r3, #31
 800b1a4:	d538      	bpl.n	800b218 <_printf_float+0x43c>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	47b8      	blx	r7
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	f43f ae74 	beq.w	800ae9e <_printf_float+0xc2>
 800b1b6:	ee18 3a10 	vmov	r3, s16
 800b1ba:	4652      	mov	r2, sl
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	f43f ae6b 	beq.w	800ae9e <_printf_float+0xc2>
 800b1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f7f5 fc82 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1d4:	b9d8      	cbnz	r0, 800b20e <_printf_float+0x432>
 800b1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d8:	f108 0201 	add.w	r2, r8, #1
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	47b8      	blx	r7
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d10e      	bne.n	800b206 <_printf_float+0x42a>
 800b1e8:	e659      	b.n	800ae9e <_printf_float+0xc2>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b8      	blx	r7
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	f43f ae52 	beq.w	800ae9e <_printf_float+0xc2>
 800b1fa:	f108 0801 	add.w	r8, r8, #1
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	3b01      	subs	r3, #1
 800b202:	4543      	cmp	r3, r8
 800b204:	dcf1      	bgt.n	800b1ea <_printf_float+0x40e>
 800b206:	464b      	mov	r3, r9
 800b208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b20c:	e6dc      	b.n	800afc8 <_printf_float+0x1ec>
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f104 0a1a 	add.w	sl, r4, #26
 800b216:	e7f2      	b.n	800b1fe <_printf_float+0x422>
 800b218:	2301      	movs	r3, #1
 800b21a:	4642      	mov	r2, r8
 800b21c:	e7df      	b.n	800b1de <_printf_float+0x402>
 800b21e:	2301      	movs	r3, #1
 800b220:	464a      	mov	r2, r9
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f ae38 	beq.w	800ae9e <_printf_float+0xc2>
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	68e3      	ldr	r3, [r4, #12]
 800b234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b236:	1a5b      	subs	r3, r3, r1
 800b238:	4543      	cmp	r3, r8
 800b23a:	dcf0      	bgt.n	800b21e <_printf_float+0x442>
 800b23c:	e6fa      	b.n	800b034 <_printf_float+0x258>
 800b23e:	f04f 0800 	mov.w	r8, #0
 800b242:	f104 0919 	add.w	r9, r4, #25
 800b246:	e7f4      	b.n	800b232 <_printf_float+0x456>

0800b248 <_printf_common>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	4616      	mov	r6, r2
 800b24e:	4699      	mov	r9, r3
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b258:	4293      	cmp	r3, r2
 800b25a:	bfb8      	it	lt
 800b25c:	4613      	movlt	r3, r2
 800b25e:	6033      	str	r3, [r6, #0]
 800b260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b264:	4607      	mov	r7, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b10a      	cbz	r2, 800b26e <_printf_common+0x26>
 800b26a:	3301      	adds	r3, #1
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	0699      	lsls	r1, r3, #26
 800b272:	bf42      	ittt	mi
 800b274:	6833      	ldrmi	r3, [r6, #0]
 800b276:	3302      	addmi	r3, #2
 800b278:	6033      	strmi	r3, [r6, #0]
 800b27a:	6825      	ldr	r5, [r4, #0]
 800b27c:	f015 0506 	ands.w	r5, r5, #6
 800b280:	d106      	bne.n	800b290 <_printf_common+0x48>
 800b282:	f104 0a19 	add.w	sl, r4, #25
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	6832      	ldr	r2, [r6, #0]
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dc26      	bgt.n	800b2de <_printf_common+0x96>
 800b290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b294:	1e13      	subs	r3, r2, #0
 800b296:	6822      	ldr	r2, [r4, #0]
 800b298:	bf18      	it	ne
 800b29a:	2301      	movne	r3, #1
 800b29c:	0692      	lsls	r2, r2, #26
 800b29e:	d42b      	bmi.n	800b2f8 <_printf_common+0xb0>
 800b2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	47c0      	blx	r8
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d01e      	beq.n	800b2ec <_printf_common+0xa4>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	68e5      	ldr	r5, [r4, #12]
 800b2b2:	6832      	ldr	r2, [r6, #0]
 800b2b4:	f003 0306 	and.w	r3, r3, #6
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	bf08      	it	eq
 800b2bc:	1aad      	subeq	r5, r5, r2
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	bf0c      	ite	eq
 800b2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c8:	2500      	movne	r5, #0
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	bfc4      	itt	gt
 800b2ce:	1a9b      	subgt	r3, r3, r2
 800b2d0:	18ed      	addgt	r5, r5, r3
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	341a      	adds	r4, #26
 800b2d6:	42b5      	cmp	r5, r6
 800b2d8:	d11a      	bne.n	800b310 <_printf_common+0xc8>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e008      	b.n	800b2f0 <_printf_common+0xa8>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	47c0      	blx	r8
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d103      	bne.n	800b2f4 <_printf_common+0xac>
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	e7c6      	b.n	800b286 <_printf_common+0x3e>
 800b2f8:	18e1      	adds	r1, r4, r3
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	2030      	movs	r0, #48	; 0x30
 800b2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b302:	4422      	add	r2, r4
 800b304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b30c:	3302      	adds	r3, #2
 800b30e:	e7c7      	b.n	800b2a0 <_printf_common+0x58>
 800b310:	2301      	movs	r3, #1
 800b312:	4622      	mov	r2, r4
 800b314:	4649      	mov	r1, r9
 800b316:	4638      	mov	r0, r7
 800b318:	47c0      	blx	r8
 800b31a:	3001      	adds	r0, #1
 800b31c:	d0e6      	beq.n	800b2ec <_printf_common+0xa4>
 800b31e:	3601      	adds	r6, #1
 800b320:	e7d9      	b.n	800b2d6 <_printf_common+0x8e>
	...

0800b324 <_printf_i>:
 800b324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	7e0f      	ldrb	r7, [r1, #24]
 800b32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b32c:	2f78      	cmp	r7, #120	; 0x78
 800b32e:	4691      	mov	r9, r2
 800b330:	4680      	mov	r8, r0
 800b332:	460c      	mov	r4, r1
 800b334:	469a      	mov	sl, r3
 800b336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b33a:	d807      	bhi.n	800b34c <_printf_i+0x28>
 800b33c:	2f62      	cmp	r7, #98	; 0x62
 800b33e:	d80a      	bhi.n	800b356 <_printf_i+0x32>
 800b340:	2f00      	cmp	r7, #0
 800b342:	f000 80d8 	beq.w	800b4f6 <_printf_i+0x1d2>
 800b346:	2f58      	cmp	r7, #88	; 0x58
 800b348:	f000 80a3 	beq.w	800b492 <_printf_i+0x16e>
 800b34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b354:	e03a      	b.n	800b3cc <_printf_i+0xa8>
 800b356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b35a:	2b15      	cmp	r3, #21
 800b35c:	d8f6      	bhi.n	800b34c <_printf_i+0x28>
 800b35e:	a101      	add	r1, pc, #4	; (adr r1, 800b364 <_printf_i+0x40>)
 800b360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b364:	0800b3bd 	.word	0x0800b3bd
 800b368:	0800b3d1 	.word	0x0800b3d1
 800b36c:	0800b34d 	.word	0x0800b34d
 800b370:	0800b34d 	.word	0x0800b34d
 800b374:	0800b34d 	.word	0x0800b34d
 800b378:	0800b34d 	.word	0x0800b34d
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b34d 	.word	0x0800b34d
 800b384:	0800b34d 	.word	0x0800b34d
 800b388:	0800b34d 	.word	0x0800b34d
 800b38c:	0800b34d 	.word	0x0800b34d
 800b390:	0800b4dd 	.word	0x0800b4dd
 800b394:	0800b401 	.word	0x0800b401
 800b398:	0800b4bf 	.word	0x0800b4bf
 800b39c:	0800b34d 	.word	0x0800b34d
 800b3a0:	0800b34d 	.word	0x0800b34d
 800b3a4:	0800b4ff 	.word	0x0800b4ff
 800b3a8:	0800b34d 	.word	0x0800b34d
 800b3ac:	0800b401 	.word	0x0800b401
 800b3b0:	0800b34d 	.word	0x0800b34d
 800b3b4:	0800b34d 	.word	0x0800b34d
 800b3b8:	0800b4c7 	.word	0x0800b4c7
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	602a      	str	r2, [r5, #0]
 800b3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e0a3      	b.n	800b518 <_printf_i+0x1f4>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	6829      	ldr	r1, [r5, #0]
 800b3d4:	0606      	lsls	r6, r0, #24
 800b3d6:	f101 0304 	add.w	r3, r1, #4
 800b3da:	d50a      	bpl.n	800b3f2 <_printf_i+0xce>
 800b3dc:	680e      	ldr	r6, [r1, #0]
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	da03      	bge.n	800b3ec <_printf_i+0xc8>
 800b3e4:	232d      	movs	r3, #45	; 0x2d
 800b3e6:	4276      	negs	r6, r6
 800b3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ec:	485e      	ldr	r0, [pc, #376]	; (800b568 <_printf_i+0x244>)
 800b3ee:	230a      	movs	r3, #10
 800b3f0:	e019      	b.n	800b426 <_printf_i+0x102>
 800b3f2:	680e      	ldr	r6, [r1, #0]
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3fa:	bf18      	it	ne
 800b3fc:	b236      	sxthne	r6, r6
 800b3fe:	e7ef      	b.n	800b3e0 <_printf_i+0xbc>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	6820      	ldr	r0, [r4, #0]
 800b404:	1d19      	adds	r1, r3, #4
 800b406:	6029      	str	r1, [r5, #0]
 800b408:	0601      	lsls	r1, r0, #24
 800b40a:	d501      	bpl.n	800b410 <_printf_i+0xec>
 800b40c:	681e      	ldr	r6, [r3, #0]
 800b40e:	e002      	b.n	800b416 <_printf_i+0xf2>
 800b410:	0646      	lsls	r6, r0, #25
 800b412:	d5fb      	bpl.n	800b40c <_printf_i+0xe8>
 800b414:	881e      	ldrh	r6, [r3, #0]
 800b416:	4854      	ldr	r0, [pc, #336]	; (800b568 <_printf_i+0x244>)
 800b418:	2f6f      	cmp	r7, #111	; 0x6f
 800b41a:	bf0c      	ite	eq
 800b41c:	2308      	moveq	r3, #8
 800b41e:	230a      	movne	r3, #10
 800b420:	2100      	movs	r1, #0
 800b422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b426:	6865      	ldr	r5, [r4, #4]
 800b428:	60a5      	str	r5, [r4, #8]
 800b42a:	2d00      	cmp	r5, #0
 800b42c:	bfa2      	ittt	ge
 800b42e:	6821      	ldrge	r1, [r4, #0]
 800b430:	f021 0104 	bicge.w	r1, r1, #4
 800b434:	6021      	strge	r1, [r4, #0]
 800b436:	b90e      	cbnz	r6, 800b43c <_printf_i+0x118>
 800b438:	2d00      	cmp	r5, #0
 800b43a:	d04d      	beq.n	800b4d8 <_printf_i+0x1b4>
 800b43c:	4615      	mov	r5, r2
 800b43e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b442:	fb03 6711 	mls	r7, r3, r1, r6
 800b446:	5dc7      	ldrb	r7, [r0, r7]
 800b448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b44c:	4637      	mov	r7, r6
 800b44e:	42bb      	cmp	r3, r7
 800b450:	460e      	mov	r6, r1
 800b452:	d9f4      	bls.n	800b43e <_printf_i+0x11a>
 800b454:	2b08      	cmp	r3, #8
 800b456:	d10b      	bne.n	800b470 <_printf_i+0x14c>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	07de      	lsls	r6, r3, #31
 800b45c:	d508      	bpl.n	800b470 <_printf_i+0x14c>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	6861      	ldr	r1, [r4, #4]
 800b462:	4299      	cmp	r1, r3
 800b464:	bfde      	ittt	le
 800b466:	2330      	movle	r3, #48	; 0x30
 800b468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b46c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b470:	1b52      	subs	r2, r2, r5
 800b472:	6122      	str	r2, [r4, #16]
 800b474:	f8cd a000 	str.w	sl, [sp]
 800b478:	464b      	mov	r3, r9
 800b47a:	aa03      	add	r2, sp, #12
 800b47c:	4621      	mov	r1, r4
 800b47e:	4640      	mov	r0, r8
 800b480:	f7ff fee2 	bl	800b248 <_printf_common>
 800b484:	3001      	adds	r0, #1
 800b486:	d14c      	bne.n	800b522 <_printf_i+0x1fe>
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	b004      	add	sp, #16
 800b48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b492:	4835      	ldr	r0, [pc, #212]	; (800b568 <_printf_i+0x244>)
 800b494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b498:	6829      	ldr	r1, [r5, #0]
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4a0:	6029      	str	r1, [r5, #0]
 800b4a2:	061d      	lsls	r5, r3, #24
 800b4a4:	d514      	bpl.n	800b4d0 <_printf_i+0x1ac>
 800b4a6:	07df      	lsls	r7, r3, #31
 800b4a8:	bf44      	itt	mi
 800b4aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ae:	6023      	strmi	r3, [r4, #0]
 800b4b0:	b91e      	cbnz	r6, 800b4ba <_printf_i+0x196>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	f023 0320 	bic.w	r3, r3, #32
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	2310      	movs	r3, #16
 800b4bc:	e7b0      	b.n	800b420 <_printf_i+0xfc>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	f043 0320 	orr.w	r3, r3, #32
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	2378      	movs	r3, #120	; 0x78
 800b4c8:	4828      	ldr	r0, [pc, #160]	; (800b56c <_printf_i+0x248>)
 800b4ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4ce:	e7e3      	b.n	800b498 <_printf_i+0x174>
 800b4d0:	0659      	lsls	r1, r3, #25
 800b4d2:	bf48      	it	mi
 800b4d4:	b2b6      	uxthmi	r6, r6
 800b4d6:	e7e6      	b.n	800b4a6 <_printf_i+0x182>
 800b4d8:	4615      	mov	r5, r2
 800b4da:	e7bb      	b.n	800b454 <_printf_i+0x130>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	6826      	ldr	r6, [r4, #0]
 800b4e0:	6961      	ldr	r1, [r4, #20]
 800b4e2:	1d18      	adds	r0, r3, #4
 800b4e4:	6028      	str	r0, [r5, #0]
 800b4e6:	0635      	lsls	r5, r6, #24
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_i+0x1cc>
 800b4ec:	6019      	str	r1, [r3, #0]
 800b4ee:	e002      	b.n	800b4f6 <_printf_i+0x1d2>
 800b4f0:	0670      	lsls	r0, r6, #25
 800b4f2:	d5fb      	bpl.n	800b4ec <_printf_i+0x1c8>
 800b4f4:	8019      	strh	r1, [r3, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	4615      	mov	r5, r2
 800b4fc:	e7ba      	b.n	800b474 <_printf_i+0x150>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	602a      	str	r2, [r5, #0]
 800b504:	681d      	ldr	r5, [r3, #0]
 800b506:	6862      	ldr	r2, [r4, #4]
 800b508:	2100      	movs	r1, #0
 800b50a:	4628      	mov	r0, r5
 800b50c:	f7f4 fe70 	bl	80001f0 <memchr>
 800b510:	b108      	cbz	r0, 800b516 <_printf_i+0x1f2>
 800b512:	1b40      	subs	r0, r0, r5
 800b514:	6060      	str	r0, [r4, #4]
 800b516:	6863      	ldr	r3, [r4, #4]
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	2300      	movs	r3, #0
 800b51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b520:	e7a8      	b.n	800b474 <_printf_i+0x150>
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	462a      	mov	r2, r5
 800b526:	4649      	mov	r1, r9
 800b528:	4640      	mov	r0, r8
 800b52a:	47d0      	blx	sl
 800b52c:	3001      	adds	r0, #1
 800b52e:	d0ab      	beq.n	800b488 <_printf_i+0x164>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	079b      	lsls	r3, r3, #30
 800b534:	d413      	bmi.n	800b55e <_printf_i+0x23a>
 800b536:	68e0      	ldr	r0, [r4, #12]
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	4298      	cmp	r0, r3
 800b53c:	bfb8      	it	lt
 800b53e:	4618      	movlt	r0, r3
 800b540:	e7a4      	b.n	800b48c <_printf_i+0x168>
 800b542:	2301      	movs	r3, #1
 800b544:	4632      	mov	r2, r6
 800b546:	4649      	mov	r1, r9
 800b548:	4640      	mov	r0, r8
 800b54a:	47d0      	blx	sl
 800b54c:	3001      	adds	r0, #1
 800b54e:	d09b      	beq.n	800b488 <_printf_i+0x164>
 800b550:	3501      	adds	r5, #1
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	9903      	ldr	r1, [sp, #12]
 800b556:	1a5b      	subs	r3, r3, r1
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dcf2      	bgt.n	800b542 <_printf_i+0x21e>
 800b55c:	e7eb      	b.n	800b536 <_printf_i+0x212>
 800b55e:	2500      	movs	r5, #0
 800b560:	f104 0619 	add.w	r6, r4, #25
 800b564:	e7f5      	b.n	800b552 <_printf_i+0x22e>
 800b566:	bf00      	nop
 800b568:	0800dd92 	.word	0x0800dd92
 800b56c:	0800dda3 	.word	0x0800dda3

0800b570 <siprintf>:
 800b570:	b40e      	push	{r1, r2, r3}
 800b572:	b500      	push	{lr}
 800b574:	b09c      	sub	sp, #112	; 0x70
 800b576:	ab1d      	add	r3, sp, #116	; 0x74
 800b578:	9002      	str	r0, [sp, #8]
 800b57a:	9006      	str	r0, [sp, #24]
 800b57c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b580:	4809      	ldr	r0, [pc, #36]	; (800b5a8 <siprintf+0x38>)
 800b582:	9107      	str	r1, [sp, #28]
 800b584:	9104      	str	r1, [sp, #16]
 800b586:	4909      	ldr	r1, [pc, #36]	; (800b5ac <siprintf+0x3c>)
 800b588:	f853 2b04 	ldr.w	r2, [r3], #4
 800b58c:	9105      	str	r1, [sp, #20]
 800b58e:	6800      	ldr	r0, [r0, #0]
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	a902      	add	r1, sp, #8
 800b594:	f001 fb68 	bl	800cc68 <_svfiprintf_r>
 800b598:	9b02      	ldr	r3, [sp, #8]
 800b59a:	2200      	movs	r2, #0
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	b01c      	add	sp, #112	; 0x70
 800b5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a4:	b003      	add	sp, #12
 800b5a6:	4770      	bx	lr
 800b5a8:	20000010 	.word	0x20000010
 800b5ac:	ffff0208 	.word	0xffff0208

0800b5b0 <quorem>:
 800b5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	6903      	ldr	r3, [r0, #16]
 800b5b6:	690c      	ldr	r4, [r1, #16]
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	f2c0 8081 	blt.w	800b6c2 <quorem+0x112>
 800b5c0:	3c01      	subs	r4, #1
 800b5c2:	f101 0814 	add.w	r8, r1, #20
 800b5c6:	f100 0514 	add.w	r5, r0, #20
 800b5ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5e8:	d331      	bcc.n	800b64e <quorem+0x9e>
 800b5ea:	f04f 0e00 	mov.w	lr, #0
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	46ac      	mov	ip, r5
 800b5f2:	46f2      	mov	sl, lr
 800b5f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5f8:	b293      	uxth	r3, r2
 800b5fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b5fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b602:	b29b      	uxth	r3, r3
 800b604:	ebaa 0303 	sub.w	r3, sl, r3
 800b608:	f8dc a000 	ldr.w	sl, [ip]
 800b60c:	0c12      	lsrs	r2, r2, #16
 800b60e:	fa13 f38a 	uxtah	r3, r3, sl
 800b612:	fb06 e202 	mla	r2, r6, r2, lr
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	9b00      	ldr	r3, [sp, #0]
 800b61a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b61e:	b292      	uxth	r2, r2
 800b620:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b628:	f8bd 3000 	ldrh.w	r3, [sp]
 800b62c:	4581      	cmp	r9, r0
 800b62e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b632:	f84c 3b04 	str.w	r3, [ip], #4
 800b636:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b63a:	d2db      	bcs.n	800b5f4 <quorem+0x44>
 800b63c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b640:	b92b      	cbnz	r3, 800b64e <quorem+0x9e>
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	3b04      	subs	r3, #4
 800b646:	429d      	cmp	r5, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	d32e      	bcc.n	800b6aa <quorem+0xfa>
 800b64c:	613c      	str	r4, [r7, #16]
 800b64e:	4638      	mov	r0, r7
 800b650:	f001 f8b6 	bl	800c7c0 <__mcmp>
 800b654:	2800      	cmp	r0, #0
 800b656:	db24      	blt.n	800b6a2 <quorem+0xf2>
 800b658:	3601      	adds	r6, #1
 800b65a:	4628      	mov	r0, r5
 800b65c:	f04f 0c00 	mov.w	ip, #0
 800b660:	f858 2b04 	ldr.w	r2, [r8], #4
 800b664:	f8d0 e000 	ldr.w	lr, [r0]
 800b668:	b293      	uxth	r3, r2
 800b66a:	ebac 0303 	sub.w	r3, ip, r3
 800b66e:	0c12      	lsrs	r2, r2, #16
 800b670:	fa13 f38e 	uxtah	r3, r3, lr
 800b674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b682:	45c1      	cmp	r9, r8
 800b684:	f840 3b04 	str.w	r3, [r0], #4
 800b688:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b68c:	d2e8      	bcs.n	800b660 <quorem+0xb0>
 800b68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b696:	b922      	cbnz	r2, 800b6a2 <quorem+0xf2>
 800b698:	3b04      	subs	r3, #4
 800b69a:	429d      	cmp	r5, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	d30a      	bcc.n	800b6b6 <quorem+0x106>
 800b6a0:	613c      	str	r4, [r7, #16]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	b003      	add	sp, #12
 800b6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6aa:	6812      	ldr	r2, [r2, #0]
 800b6ac:	3b04      	subs	r3, #4
 800b6ae:	2a00      	cmp	r2, #0
 800b6b0:	d1cc      	bne.n	800b64c <quorem+0x9c>
 800b6b2:	3c01      	subs	r4, #1
 800b6b4:	e7c7      	b.n	800b646 <quorem+0x96>
 800b6b6:	6812      	ldr	r2, [r2, #0]
 800b6b8:	3b04      	subs	r3, #4
 800b6ba:	2a00      	cmp	r2, #0
 800b6bc:	d1f0      	bne.n	800b6a0 <quorem+0xf0>
 800b6be:	3c01      	subs	r4, #1
 800b6c0:	e7eb      	b.n	800b69a <quorem+0xea>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e7ee      	b.n	800b6a4 <quorem+0xf4>
	...

0800b6c8 <_dtoa_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b04 	vpush	{d8-d9}
 800b6d0:	ec57 6b10 	vmov	r6, r7, d0
 800b6d4:	b093      	sub	sp, #76	; 0x4c
 800b6d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6dc:	9106      	str	r1, [sp, #24]
 800b6de:	ee10 aa10 	vmov	sl, s0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e8:	46bb      	mov	fp, r7
 800b6ea:	b975      	cbnz	r5, 800b70a <_dtoa_r+0x42>
 800b6ec:	2010      	movs	r0, #16
 800b6ee:	f000 fddd 	bl	800c2ac <malloc>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b6f6:	b920      	cbnz	r0, 800b702 <_dtoa_r+0x3a>
 800b6f8:	4ba7      	ldr	r3, [pc, #668]	; (800b998 <_dtoa_r+0x2d0>)
 800b6fa:	21ea      	movs	r1, #234	; 0xea
 800b6fc:	48a7      	ldr	r0, [pc, #668]	; (800b99c <_dtoa_r+0x2d4>)
 800b6fe:	f001 fbc3 	bl	800ce88 <__assert_func>
 800b702:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b706:	6005      	str	r5, [r0, #0]
 800b708:	60c5      	str	r5, [r0, #12]
 800b70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	b151      	cbz	r1, 800b726 <_dtoa_r+0x5e>
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	604a      	str	r2, [r1, #4]
 800b714:	2301      	movs	r3, #1
 800b716:	4093      	lsls	r3, r2
 800b718:	608b      	str	r3, [r1, #8]
 800b71a:	4620      	mov	r0, r4
 800b71c:	f000 fe0e 	bl	800c33c <_Bfree>
 800b720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	1e3b      	subs	r3, r7, #0
 800b728:	bfaa      	itet	ge
 800b72a:	2300      	movge	r3, #0
 800b72c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b730:	f8c8 3000 	strge.w	r3, [r8]
 800b734:	4b9a      	ldr	r3, [pc, #616]	; (800b9a0 <_dtoa_r+0x2d8>)
 800b736:	bfbc      	itt	lt
 800b738:	2201      	movlt	r2, #1
 800b73a:	f8c8 2000 	strlt.w	r2, [r8]
 800b73e:	ea33 030b 	bics.w	r3, r3, fp
 800b742:	d11b      	bne.n	800b77c <_dtoa_r+0xb4>
 800b744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b746:	f242 730f 	movw	r3, #9999	; 0x270f
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b750:	4333      	orrs	r3, r6
 800b752:	f000 8592 	beq.w	800c27a <_dtoa_r+0xbb2>
 800b756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b758:	b963      	cbnz	r3, 800b774 <_dtoa_r+0xac>
 800b75a:	4b92      	ldr	r3, [pc, #584]	; (800b9a4 <_dtoa_r+0x2dc>)
 800b75c:	e022      	b.n	800b7a4 <_dtoa_r+0xdc>
 800b75e:	4b92      	ldr	r3, [pc, #584]	; (800b9a8 <_dtoa_r+0x2e0>)
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	3308      	adds	r3, #8
 800b764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	9801      	ldr	r0, [sp, #4]
 800b76a:	b013      	add	sp, #76	; 0x4c
 800b76c:	ecbd 8b04 	vpop	{d8-d9}
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b774:	4b8b      	ldr	r3, [pc, #556]	; (800b9a4 <_dtoa_r+0x2dc>)
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	3303      	adds	r3, #3
 800b77a:	e7f3      	b.n	800b764 <_dtoa_r+0x9c>
 800b77c:	2200      	movs	r2, #0
 800b77e:	2300      	movs	r3, #0
 800b780:	4650      	mov	r0, sl
 800b782:	4659      	mov	r1, fp
 800b784:	f7f5 f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b788:	ec4b ab19 	vmov	d9, sl, fp
 800b78c:	4680      	mov	r8, r0
 800b78e:	b158      	cbz	r0, 800b7a8 <_dtoa_r+0xe0>
 800b790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b792:	2301      	movs	r3, #1
 800b794:	6013      	str	r3, [r2, #0]
 800b796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 856b 	beq.w	800c274 <_dtoa_r+0xbac>
 800b79e:	4883      	ldr	r0, [pc, #524]	; (800b9ac <_dtoa_r+0x2e4>)
 800b7a0:	6018      	str	r0, [r3, #0]
 800b7a2:	1e43      	subs	r3, r0, #1
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	e7df      	b.n	800b768 <_dtoa_r+0xa0>
 800b7a8:	ec4b ab10 	vmov	d0, sl, fp
 800b7ac:	aa10      	add	r2, sp, #64	; 0x40
 800b7ae:	a911      	add	r1, sp, #68	; 0x44
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f001 f8ab 	bl	800c90c <__d2b>
 800b7b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7ba:	ee08 0a10 	vmov	s16, r0
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	f000 8084 	beq.w	800b8cc <_dtoa_r+0x204>
 800b7c4:	ee19 3a90 	vmov	r3, s19
 800b7c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7d0:	4656      	mov	r6, sl
 800b7d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b7de:	4b74      	ldr	r3, [pc, #464]	; (800b9b0 <_dtoa_r+0x2e8>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd57 	bl	8000298 <__aeabi_dsub>
 800b7ea:	a365      	add	r3, pc, #404	; (adr r3, 800b980 <_dtoa_r+0x2b8>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 ff0a 	bl	8000608 <__aeabi_dmul>
 800b7f4:	a364      	add	r3, pc, #400	; (adr r3, 800b988 <_dtoa_r+0x2c0>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fd4f 	bl	800029c <__adddf3>
 800b7fe:	4606      	mov	r6, r0
 800b800:	4628      	mov	r0, r5
 800b802:	460f      	mov	r7, r1
 800b804:	f7f4 fe96 	bl	8000534 <__aeabi_i2d>
 800b808:	a361      	add	r3, pc, #388	; (adr r3, 800b990 <_dtoa_r+0x2c8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fefb 	bl	8000608 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4630      	mov	r0, r6
 800b818:	4639      	mov	r1, r7
 800b81a:	f7f4 fd3f 	bl	800029c <__adddf3>
 800b81e:	4606      	mov	r6, r0
 800b820:	460f      	mov	r7, r1
 800b822:	f7f5 f9a1 	bl	8000b68 <__aeabi_d2iz>
 800b826:	2200      	movs	r2, #0
 800b828:	9000      	str	r0, [sp, #0]
 800b82a:	2300      	movs	r3, #0
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f5 f95c 	bl	8000aec <__aeabi_dcmplt>
 800b834:	b150      	cbz	r0, 800b84c <_dtoa_r+0x184>
 800b836:	9800      	ldr	r0, [sp, #0]
 800b838:	f7f4 fe7c 	bl	8000534 <__aeabi_i2d>
 800b83c:	4632      	mov	r2, r6
 800b83e:	463b      	mov	r3, r7
 800b840:	f7f5 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b844:	b910      	cbnz	r0, 800b84c <_dtoa_r+0x184>
 800b846:	9b00      	ldr	r3, [sp, #0]
 800b848:	3b01      	subs	r3, #1
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	9b00      	ldr	r3, [sp, #0]
 800b84e:	2b16      	cmp	r3, #22
 800b850:	d85a      	bhi.n	800b908 <_dtoa_r+0x240>
 800b852:	9a00      	ldr	r2, [sp, #0]
 800b854:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <_dtoa_r+0x2ec>)
 800b856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	ec51 0b19 	vmov	r0, r1, d9
 800b862:	f7f5 f943 	bl	8000aec <__aeabi_dcmplt>
 800b866:	2800      	cmp	r0, #0
 800b868:	d050      	beq.n	800b90c <_dtoa_r+0x244>
 800b86a:	9b00      	ldr	r3, [sp, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	2300      	movs	r3, #0
 800b872:	930b      	str	r3, [sp, #44]	; 0x2c
 800b874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b876:	1b5d      	subs	r5, r3, r5
 800b878:	1e6b      	subs	r3, r5, #1
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	bf45      	ittet	mi
 800b87e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b882:	9304      	strmi	r3, [sp, #16]
 800b884:	2300      	movpl	r3, #0
 800b886:	2300      	movmi	r3, #0
 800b888:	bf4c      	ite	mi
 800b88a:	9305      	strmi	r3, [sp, #20]
 800b88c:	9304      	strpl	r3, [sp, #16]
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	db3d      	blt.n	800b910 <_dtoa_r+0x248>
 800b894:	9b05      	ldr	r3, [sp, #20]
 800b896:	9a00      	ldr	r2, [sp, #0]
 800b898:	920a      	str	r2, [sp, #40]	; 0x28
 800b89a:	4413      	add	r3, r2
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9307      	str	r3, [sp, #28]
 800b8a2:	9b06      	ldr	r3, [sp, #24]
 800b8a4:	2b09      	cmp	r3, #9
 800b8a6:	f200 8089 	bhi.w	800b9bc <_dtoa_r+0x2f4>
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	bfc4      	itt	gt
 800b8ae:	3b04      	subgt	r3, #4
 800b8b0:	9306      	strgt	r3, [sp, #24]
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b8b8:	bfcc      	ite	gt
 800b8ba:	2500      	movgt	r5, #0
 800b8bc:	2501      	movle	r5, #1
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	f200 8087 	bhi.w	800b9d2 <_dtoa_r+0x30a>
 800b8c4:	e8df f003 	tbb	[pc, r3]
 800b8c8:	59383a2d 	.word	0x59383a2d
 800b8cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8d0:	441d      	add	r5, r3
 800b8d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	bfc1      	itttt	gt
 800b8da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b8e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8ea:	bfda      	itte	le
 800b8ec:	f1c3 0320 	rsble	r3, r3, #32
 800b8f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b8f4:	4318      	orrgt	r0, r3
 800b8f6:	f7f4 fe0d 	bl	8000514 <__aeabi_ui2d>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b902:	3d01      	subs	r5, #1
 800b904:	930e      	str	r3, [sp, #56]	; 0x38
 800b906:	e76a      	b.n	800b7de <_dtoa_r+0x116>
 800b908:	2301      	movs	r3, #1
 800b90a:	e7b2      	b.n	800b872 <_dtoa_r+0x1aa>
 800b90c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b90e:	e7b1      	b.n	800b874 <_dtoa_r+0x1ac>
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	9a00      	ldr	r2, [sp, #0]
 800b914:	1a9b      	subs	r3, r3, r2
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	4253      	negs	r3, r2
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	2300      	movs	r3, #0
 800b91e:	930a      	str	r3, [sp, #40]	; 0x28
 800b920:	e7bf      	b.n	800b8a2 <_dtoa_r+0x1da>
 800b922:	2300      	movs	r3, #0
 800b924:	9308      	str	r3, [sp, #32]
 800b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dc55      	bgt.n	800b9d8 <_dtoa_r+0x310>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b932:	461a      	mov	r2, r3
 800b934:	9209      	str	r2, [sp, #36]	; 0x24
 800b936:	e00c      	b.n	800b952 <_dtoa_r+0x28a>
 800b938:	2301      	movs	r3, #1
 800b93a:	e7f3      	b.n	800b924 <_dtoa_r+0x25c>
 800b93c:	2300      	movs	r3, #0
 800b93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b940:	9308      	str	r3, [sp, #32]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	4413      	add	r3, r2
 800b946:	9302      	str	r3, [sp, #8]
 800b948:	3301      	adds	r3, #1
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	9303      	str	r3, [sp, #12]
 800b94e:	bfb8      	it	lt
 800b950:	2301      	movlt	r3, #1
 800b952:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b954:	2200      	movs	r2, #0
 800b956:	6042      	str	r2, [r0, #4]
 800b958:	2204      	movs	r2, #4
 800b95a:	f102 0614 	add.w	r6, r2, #20
 800b95e:	429e      	cmp	r6, r3
 800b960:	6841      	ldr	r1, [r0, #4]
 800b962:	d93d      	bls.n	800b9e0 <_dtoa_r+0x318>
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fca9 	bl	800c2bc <_Balloc>
 800b96a:	9001      	str	r0, [sp, #4]
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d13b      	bne.n	800b9e8 <_dtoa_r+0x320>
 800b970:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <_dtoa_r+0x2f0>)
 800b972:	4602      	mov	r2, r0
 800b974:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b978:	e6c0      	b.n	800b6fc <_dtoa_r+0x34>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7df      	b.n	800b93e <_dtoa_r+0x276>
 800b97e:	bf00      	nop
 800b980:	636f4361 	.word	0x636f4361
 800b984:	3fd287a7 	.word	0x3fd287a7
 800b988:	8b60c8b3 	.word	0x8b60c8b3
 800b98c:	3fc68a28 	.word	0x3fc68a28
 800b990:	509f79fb 	.word	0x509f79fb
 800b994:	3fd34413 	.word	0x3fd34413
 800b998:	0800ddc1 	.word	0x0800ddc1
 800b99c:	0800ddd8 	.word	0x0800ddd8
 800b9a0:	7ff00000 	.word	0x7ff00000
 800b9a4:	0800ddbd 	.word	0x0800ddbd
 800b9a8:	0800ddb4 	.word	0x0800ddb4
 800b9ac:	0800dd91 	.word	0x0800dd91
 800b9b0:	3ff80000 	.word	0x3ff80000
 800b9b4:	0800dec8 	.word	0x0800dec8
 800b9b8:	0800de33 	.word	0x0800de33
 800b9bc:	2501      	movs	r5, #1
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9306      	str	r3, [sp, #24]
 800b9c2:	9508      	str	r5, [sp, #32]
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2312      	movs	r3, #18
 800b9d0:	e7b0      	b.n	800b934 <_dtoa_r+0x26c>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	9308      	str	r3, [sp, #32]
 800b9d6:	e7f5      	b.n	800b9c4 <_dtoa_r+0x2fc>
 800b9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9de:	e7b8      	b.n	800b952 <_dtoa_r+0x28a>
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	6041      	str	r1, [r0, #4]
 800b9e4:	0052      	lsls	r2, r2, #1
 800b9e6:	e7b8      	b.n	800b95a <_dtoa_r+0x292>
 800b9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ea:	9a01      	ldr	r2, [sp, #4]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	2b0e      	cmp	r3, #14
 800b9f2:	f200 809d 	bhi.w	800bb30 <_dtoa_r+0x468>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	f000 809a 	beq.w	800bb30 <_dtoa_r+0x468>
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd32      	ble.n	800ba68 <_dtoa_r+0x3a0>
 800ba02:	4ab7      	ldr	r2, [pc, #732]	; (800bce0 <_dtoa_r+0x618>)
 800ba04:	f003 030f 	and.w	r3, r3, #15
 800ba08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	05d8      	lsls	r0, r3, #23
 800ba14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba18:	d516      	bpl.n	800ba48 <_dtoa_r+0x380>
 800ba1a:	4bb2      	ldr	r3, [pc, #712]	; (800bce4 <_dtoa_r+0x61c>)
 800ba1c:	ec51 0b19 	vmov	r0, r1, d9
 800ba20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba24:	f7f4 ff1a 	bl	800085c <__aeabi_ddiv>
 800ba28:	f007 070f 	and.w	r7, r7, #15
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	468b      	mov	fp, r1
 800ba30:	2503      	movs	r5, #3
 800ba32:	4eac      	ldr	r6, [pc, #688]	; (800bce4 <_dtoa_r+0x61c>)
 800ba34:	b957      	cbnz	r7, 800ba4c <_dtoa_r+0x384>
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	4659      	mov	r1, fp
 800ba3e:	f7f4 ff0d 	bl	800085c <__aeabi_ddiv>
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	e028      	b.n	800ba9a <_dtoa_r+0x3d2>
 800ba48:	2502      	movs	r5, #2
 800ba4a:	e7f2      	b.n	800ba32 <_dtoa_r+0x36a>
 800ba4c:	07f9      	lsls	r1, r7, #31
 800ba4e:	d508      	bpl.n	800ba62 <_dtoa_r+0x39a>
 800ba50:	4640      	mov	r0, r8
 800ba52:	4649      	mov	r1, r9
 800ba54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba58:	f7f4 fdd6 	bl	8000608 <__aeabi_dmul>
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	4680      	mov	r8, r0
 800ba60:	4689      	mov	r9, r1
 800ba62:	107f      	asrs	r7, r7, #1
 800ba64:	3608      	adds	r6, #8
 800ba66:	e7e5      	b.n	800ba34 <_dtoa_r+0x36c>
 800ba68:	f000 809b 	beq.w	800bba2 <_dtoa_r+0x4da>
 800ba6c:	9b00      	ldr	r3, [sp, #0]
 800ba6e:	4f9d      	ldr	r7, [pc, #628]	; (800bce4 <_dtoa_r+0x61c>)
 800ba70:	425e      	negs	r6, r3
 800ba72:	4b9b      	ldr	r3, [pc, #620]	; (800bce0 <_dtoa_r+0x618>)
 800ba74:	f006 020f 	and.w	r2, r6, #15
 800ba78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	ec51 0b19 	vmov	r0, r1, d9
 800ba84:	f7f4 fdc0 	bl	8000608 <__aeabi_dmul>
 800ba88:	1136      	asrs	r6, r6, #4
 800ba8a:	4682      	mov	sl, r0
 800ba8c:	468b      	mov	fp, r1
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2502      	movs	r5, #2
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d17a      	bne.n	800bb8c <_dtoa_r+0x4c4>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1d3      	bne.n	800ba42 <_dtoa_r+0x37a>
 800ba9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8082 	beq.w	800bba6 <_dtoa_r+0x4de>
 800baa2:	4b91      	ldr	r3, [pc, #580]	; (800bce8 <_dtoa_r+0x620>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	4650      	mov	r0, sl
 800baa8:	4659      	mov	r1, fp
 800baaa:	f7f5 f81f 	bl	8000aec <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d079      	beq.n	800bba6 <_dtoa_r+0x4de>
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d076      	beq.n	800bba6 <_dtoa_r+0x4de>
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	dd36      	ble.n	800bb2c <_dtoa_r+0x464>
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	4650      	mov	r0, sl
 800bac2:	4659      	mov	r1, fp
 800bac4:	1e5f      	subs	r7, r3, #1
 800bac6:	2200      	movs	r2, #0
 800bac8:	4b88      	ldr	r3, [pc, #544]	; (800bcec <_dtoa_r+0x624>)
 800baca:	f7f4 fd9d 	bl	8000608 <__aeabi_dmul>
 800bace:	9e02      	ldr	r6, [sp, #8]
 800bad0:	4682      	mov	sl, r0
 800bad2:	468b      	mov	fp, r1
 800bad4:	3501      	adds	r5, #1
 800bad6:	4628      	mov	r0, r5
 800bad8:	f7f4 fd2c 	bl	8000534 <__aeabi_i2d>
 800badc:	4652      	mov	r2, sl
 800bade:	465b      	mov	r3, fp
 800bae0:	f7f4 fd92 	bl	8000608 <__aeabi_dmul>
 800bae4:	4b82      	ldr	r3, [pc, #520]	; (800bcf0 <_dtoa_r+0x628>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	f7f4 fbd8 	bl	800029c <__adddf3>
 800baec:	46d0      	mov	r8, sl
 800baee:	46d9      	mov	r9, fp
 800baf0:	4682      	mov	sl, r0
 800baf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800baf6:	2e00      	cmp	r6, #0
 800baf8:	d158      	bne.n	800bbac <_dtoa_r+0x4e4>
 800bafa:	4b7e      	ldr	r3, [pc, #504]	; (800bcf4 <_dtoa_r+0x62c>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fbc9 	bl	8000298 <__aeabi_dsub>
 800bb06:	4652      	mov	r2, sl
 800bb08:	465b      	mov	r3, fp
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	4689      	mov	r9, r1
 800bb0e:	f7f5 f80b 	bl	8000b28 <__aeabi_dcmpgt>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f040 8295 	bne.w	800c042 <_dtoa_r+0x97a>
 800bb18:	4652      	mov	r2, sl
 800bb1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4649      	mov	r1, r9
 800bb22:	f7f4 ffe3 	bl	8000aec <__aeabi_dcmplt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8289 	bne.w	800c03e <_dtoa_r+0x976>
 800bb2c:	ec5b ab19 	vmov	sl, fp, d9
 800bb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f2c0 8148 	blt.w	800bdc8 <_dtoa_r+0x700>
 800bb38:	9a00      	ldr	r2, [sp, #0]
 800bb3a:	2a0e      	cmp	r2, #14
 800bb3c:	f300 8144 	bgt.w	800bdc8 <_dtoa_r+0x700>
 800bb40:	4b67      	ldr	r3, [pc, #412]	; (800bce0 <_dtoa_r+0x618>)
 800bb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f280 80d5 	bge.w	800bcfc <_dtoa_r+0x634>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f300 80d1 	bgt.w	800bcfc <_dtoa_r+0x634>
 800bb5a:	f040 826f 	bne.w	800c03c <_dtoa_r+0x974>
 800bb5e:	4b65      	ldr	r3, [pc, #404]	; (800bcf4 <_dtoa_r+0x62c>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fd4f 	bl	8000608 <__aeabi_dmul>
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	f7f4 ffd1 	bl	8000b14 <__aeabi_dcmpge>
 800bb72:	9e03      	ldr	r6, [sp, #12]
 800bb74:	4637      	mov	r7, r6
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f040 8245 	bne.w	800c006 <_dtoa_r+0x93e>
 800bb7c:	9d01      	ldr	r5, [sp, #4]
 800bb7e:	2331      	movs	r3, #49	; 0x31
 800bb80:	f805 3b01 	strb.w	r3, [r5], #1
 800bb84:	9b00      	ldr	r3, [sp, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	e240      	b.n	800c00e <_dtoa_r+0x946>
 800bb8c:	07f2      	lsls	r2, r6, #31
 800bb8e:	d505      	bpl.n	800bb9c <_dtoa_r+0x4d4>
 800bb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb94:	f7f4 fd38 	bl	8000608 <__aeabi_dmul>
 800bb98:	3501      	adds	r5, #1
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	1076      	asrs	r6, r6, #1
 800bb9e:	3708      	adds	r7, #8
 800bba0:	e777      	b.n	800ba92 <_dtoa_r+0x3ca>
 800bba2:	2502      	movs	r5, #2
 800bba4:	e779      	b.n	800ba9a <_dtoa_r+0x3d2>
 800bba6:	9f00      	ldr	r7, [sp, #0]
 800bba8:	9e03      	ldr	r6, [sp, #12]
 800bbaa:	e794      	b.n	800bad6 <_dtoa_r+0x40e>
 800bbac:	9901      	ldr	r1, [sp, #4]
 800bbae:	4b4c      	ldr	r3, [pc, #304]	; (800bce0 <_dtoa_r+0x618>)
 800bbb0:	4431      	add	r1, r6
 800bbb2:	910d      	str	r1, [sp, #52]	; 0x34
 800bbb4:	9908      	ldr	r1, [sp, #32]
 800bbb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d043      	beq.n	800bc4a <_dtoa_r+0x582>
 800bbc2:	494d      	ldr	r1, [pc, #308]	; (800bcf8 <_dtoa_r+0x630>)
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f7f4 fe49 	bl	800085c <__aeabi_ddiv>
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	f7f4 fb63 	bl	8000298 <__aeabi_dsub>
 800bbd2:	9d01      	ldr	r5, [sp, #4]
 800bbd4:	4682      	mov	sl, r0
 800bbd6:	468b      	mov	fp, r1
 800bbd8:	4649      	mov	r1, r9
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f7f4 ffc4 	bl	8000b68 <__aeabi_d2iz>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	f7f4 fca7 	bl	8000534 <__aeabi_i2d>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb53 	bl	8000298 <__aeabi_dsub>
 800bbf2:	3630      	adds	r6, #48	; 0x30
 800bbf4:	f805 6b01 	strb.w	r6, [r5], #1
 800bbf8:	4652      	mov	r2, sl
 800bbfa:	465b      	mov	r3, fp
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	f7f4 ff74 	bl	8000aec <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d163      	bne.n	800bcd0 <_dtoa_r+0x608>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4936      	ldr	r1, [pc, #216]	; (800bce8 <_dtoa_r+0x620>)
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f7f4 fb42 	bl	8000298 <__aeabi_dsub>
 800bc14:	4652      	mov	r2, sl
 800bc16:	465b      	mov	r3, fp
 800bc18:	f7f4 ff68 	bl	8000aec <__aeabi_dcmplt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f040 80b5 	bne.w	800bd8c <_dtoa_r+0x6c4>
 800bc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc24:	429d      	cmp	r5, r3
 800bc26:	d081      	beq.n	800bb2c <_dtoa_r+0x464>
 800bc28:	4b30      	ldr	r3, [pc, #192]	; (800bcec <_dtoa_r+0x624>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	f7f4 fcea 	bl	8000608 <__aeabi_dmul>
 800bc34:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <_dtoa_r+0x624>)
 800bc36:	4682      	mov	sl, r0
 800bc38:	468b      	mov	fp, r1
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f7f4 fce2 	bl	8000608 <__aeabi_dmul>
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	e7c6      	b.n	800bbd8 <_dtoa_r+0x510>
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	4659      	mov	r1, fp
 800bc4e:	f7f4 fcdb 	bl	8000608 <__aeabi_dmul>
 800bc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc54:	9d01      	ldr	r5, [sp, #4]
 800bc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7f4 ff82 	bl	8000b68 <__aeabi_d2iz>
 800bc64:	4606      	mov	r6, r0
 800bc66:	f7f4 fc65 	bl	8000534 <__aeabi_i2d>
 800bc6a:	3630      	adds	r6, #48	; 0x30
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4640      	mov	r0, r8
 800bc72:	4649      	mov	r1, r9
 800bc74:	f7f4 fb10 	bl	8000298 <__aeabi_dsub>
 800bc78:	f805 6b01 	strb.w	r6, [r5], #1
 800bc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc7e:	429d      	cmp	r5, r3
 800bc80:	4680      	mov	r8, r0
 800bc82:	4689      	mov	r9, r1
 800bc84:	f04f 0200 	mov.w	r2, #0
 800bc88:	d124      	bne.n	800bcd4 <_dtoa_r+0x60c>
 800bc8a:	4b1b      	ldr	r3, [pc, #108]	; (800bcf8 <_dtoa_r+0x630>)
 800bc8c:	4650      	mov	r0, sl
 800bc8e:	4659      	mov	r1, fp
 800bc90:	f7f4 fb04 	bl	800029c <__adddf3>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4640      	mov	r0, r8
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	f7f4 ff44 	bl	8000b28 <__aeabi_dcmpgt>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d173      	bne.n	800bd8c <_dtoa_r+0x6c4>
 800bca4:	4652      	mov	r2, sl
 800bca6:	465b      	mov	r3, fp
 800bca8:	4913      	ldr	r1, [pc, #76]	; (800bcf8 <_dtoa_r+0x630>)
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f7f4 faf4 	bl	8000298 <__aeabi_dsub>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 ff18 	bl	8000aec <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f43f af35 	beq.w	800bb2c <_dtoa_r+0x464>
 800bcc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcc4:	1e6b      	subs	r3, r5, #1
 800bcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bccc:	2b30      	cmp	r3, #48	; 0x30
 800bcce:	d0f8      	beq.n	800bcc2 <_dtoa_r+0x5fa>
 800bcd0:	9700      	str	r7, [sp, #0]
 800bcd2:	e049      	b.n	800bd68 <_dtoa_r+0x6a0>
 800bcd4:	4b05      	ldr	r3, [pc, #20]	; (800bcec <_dtoa_r+0x624>)
 800bcd6:	f7f4 fc97 	bl	8000608 <__aeabi_dmul>
 800bcda:	4680      	mov	r8, r0
 800bcdc:	4689      	mov	r9, r1
 800bcde:	e7bd      	b.n	800bc5c <_dtoa_r+0x594>
 800bce0:	0800dec8 	.word	0x0800dec8
 800bce4:	0800dea0 	.word	0x0800dea0
 800bce8:	3ff00000 	.word	0x3ff00000
 800bcec:	40240000 	.word	0x40240000
 800bcf0:	401c0000 	.word	0x401c0000
 800bcf4:	40140000 	.word	0x40140000
 800bcf8:	3fe00000 	.word	0x3fe00000
 800bcfc:	9d01      	ldr	r5, [sp, #4]
 800bcfe:	4656      	mov	r6, sl
 800bd00:	465f      	mov	r7, fp
 800bd02:	4642      	mov	r2, r8
 800bd04:	464b      	mov	r3, r9
 800bd06:	4630      	mov	r0, r6
 800bd08:	4639      	mov	r1, r7
 800bd0a:	f7f4 fda7 	bl	800085c <__aeabi_ddiv>
 800bd0e:	f7f4 ff2b 	bl	8000b68 <__aeabi_d2iz>
 800bd12:	4682      	mov	sl, r0
 800bd14:	f7f4 fc0e 	bl	8000534 <__aeabi_i2d>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	f7f4 fc74 	bl	8000608 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd2c:	f7f4 fab4 	bl	8000298 <__aeabi_dsub>
 800bd30:	f805 6b01 	strb.w	r6, [r5], #1
 800bd34:	9e01      	ldr	r6, [sp, #4]
 800bd36:	9f03      	ldr	r7, [sp, #12]
 800bd38:	1bae      	subs	r6, r5, r6
 800bd3a:	42b7      	cmp	r7, r6
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	d135      	bne.n	800bdae <_dtoa_r+0x6e6>
 800bd42:	f7f4 faab 	bl	800029c <__adddf3>
 800bd46:	4642      	mov	r2, r8
 800bd48:	464b      	mov	r3, r9
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	f7f4 feeb 	bl	8000b28 <__aeabi_dcmpgt>
 800bd52:	b9d0      	cbnz	r0, 800bd8a <_dtoa_r+0x6c2>
 800bd54:	4642      	mov	r2, r8
 800bd56:	464b      	mov	r3, r9
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 febc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd60:	b110      	cbz	r0, 800bd68 <_dtoa_r+0x6a0>
 800bd62:	f01a 0f01 	tst.w	sl, #1
 800bd66:	d110      	bne.n	800bd8a <_dtoa_r+0x6c2>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	ee18 1a10 	vmov	r1, s16
 800bd6e:	f000 fae5 	bl	800c33c <_Bfree>
 800bd72:	2300      	movs	r3, #0
 800bd74:	9800      	ldr	r0, [sp, #0]
 800bd76:	702b      	strb	r3, [r5, #0]
 800bd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	6018      	str	r0, [r3, #0]
 800bd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f43f acf1 	beq.w	800b768 <_dtoa_r+0xa0>
 800bd86:	601d      	str	r5, [r3, #0]
 800bd88:	e4ee      	b.n	800b768 <_dtoa_r+0xa0>
 800bd8a:	9f00      	ldr	r7, [sp, #0]
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	461d      	mov	r5, r3
 800bd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd94:	2a39      	cmp	r2, #57	; 0x39
 800bd96:	d106      	bne.n	800bda6 <_dtoa_r+0x6de>
 800bd98:	9a01      	ldr	r2, [sp, #4]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d1f7      	bne.n	800bd8e <_dtoa_r+0x6c6>
 800bd9e:	9901      	ldr	r1, [sp, #4]
 800bda0:	2230      	movs	r2, #48	; 0x30
 800bda2:	3701      	adds	r7, #1
 800bda4:	700a      	strb	r2, [r1, #0]
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	3201      	adds	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	e790      	b.n	800bcd0 <_dtoa_r+0x608>
 800bdae:	4ba6      	ldr	r3, [pc, #664]	; (800c048 <_dtoa_r+0x980>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f7f4 fc29 	bl	8000608 <__aeabi_dmul>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	f7f4 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d09d      	beq.n	800bd02 <_dtoa_r+0x63a>
 800bdc6:	e7cf      	b.n	800bd68 <_dtoa_r+0x6a0>
 800bdc8:	9a08      	ldr	r2, [sp, #32]
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	f000 80d7 	beq.w	800bf7e <_dtoa_r+0x8b6>
 800bdd0:	9a06      	ldr	r2, [sp, #24]
 800bdd2:	2a01      	cmp	r2, #1
 800bdd4:	f300 80ba 	bgt.w	800bf4c <_dtoa_r+0x884>
 800bdd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	f000 80b2 	beq.w	800bf44 <_dtoa_r+0x87c>
 800bde0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bde4:	9e07      	ldr	r6, [sp, #28]
 800bde6:	9d04      	ldr	r5, [sp, #16]
 800bde8:	9a04      	ldr	r2, [sp, #16]
 800bdea:	441a      	add	r2, r3
 800bdec:	9204      	str	r2, [sp, #16]
 800bdee:	9a05      	ldr	r2, [sp, #20]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	441a      	add	r2, r3
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	9205      	str	r2, [sp, #20]
 800bdf8:	f000 fb58 	bl	800c4ac <__i2b>
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	dd0c      	ble.n	800be1c <_dtoa_r+0x754>
 800be02:	9b05      	ldr	r3, [sp, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd09      	ble.n	800be1c <_dtoa_r+0x754>
 800be08:	42ab      	cmp	r3, r5
 800be0a:	9a04      	ldr	r2, [sp, #16]
 800be0c:	bfa8      	it	ge
 800be0e:	462b      	movge	r3, r5
 800be10:	1ad2      	subs	r2, r2, r3
 800be12:	9204      	str	r2, [sp, #16]
 800be14:	9a05      	ldr	r2, [sp, #20]
 800be16:	1aed      	subs	r5, r5, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	b31b      	cbz	r3, 800be68 <_dtoa_r+0x7a0>
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80af 	beq.w	800bf86 <_dtoa_r+0x8be>
 800be28:	2e00      	cmp	r6, #0
 800be2a:	dd13      	ble.n	800be54 <_dtoa_r+0x78c>
 800be2c:	4639      	mov	r1, r7
 800be2e:	4632      	mov	r2, r6
 800be30:	4620      	mov	r0, r4
 800be32:	f000 fbfb 	bl	800c62c <__pow5mult>
 800be36:	ee18 2a10 	vmov	r2, s16
 800be3a:	4601      	mov	r1, r0
 800be3c:	4607      	mov	r7, r0
 800be3e:	4620      	mov	r0, r4
 800be40:	f000 fb4a 	bl	800c4d8 <__multiply>
 800be44:	ee18 1a10 	vmov	r1, s16
 800be48:	4680      	mov	r8, r0
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 fa76 	bl	800c33c <_Bfree>
 800be50:	ee08 8a10 	vmov	s16, r8
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	1b9a      	subs	r2, r3, r6
 800be58:	d006      	beq.n	800be68 <_dtoa_r+0x7a0>
 800be5a:	ee18 1a10 	vmov	r1, s16
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fbe4 	bl	800c62c <__pow5mult>
 800be64:	ee08 0a10 	vmov	s16, r0
 800be68:	2101      	movs	r1, #1
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fb1e 	bl	800c4ac <__i2b>
 800be70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be72:	2b00      	cmp	r3, #0
 800be74:	4606      	mov	r6, r0
 800be76:	f340 8088 	ble.w	800bf8a <_dtoa_r+0x8c2>
 800be7a:	461a      	mov	r2, r3
 800be7c:	4601      	mov	r1, r0
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fbd4 	bl	800c62c <__pow5mult>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b01      	cmp	r3, #1
 800be88:	4606      	mov	r6, r0
 800be8a:	f340 8081 	ble.w	800bf90 <_dtoa_r+0x8c8>
 800be8e:	f04f 0800 	mov.w	r8, #0
 800be92:	6933      	ldr	r3, [r6, #16]
 800be94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be98:	6918      	ldr	r0, [r3, #16]
 800be9a:	f000 fab7 	bl	800c40c <__hi0bits>
 800be9e:	f1c0 0020 	rsb	r0, r0, #32
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	4418      	add	r0, r3
 800bea6:	f010 001f 	ands.w	r0, r0, #31
 800beaa:	f000 8092 	beq.w	800bfd2 <_dtoa_r+0x90a>
 800beae:	f1c0 0320 	rsb	r3, r0, #32
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	f340 808a 	ble.w	800bfcc <_dtoa_r+0x904>
 800beb8:	f1c0 001c 	rsb	r0, r0, #28
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	4403      	add	r3, r0
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	9b05      	ldr	r3, [sp, #20]
 800bec4:	4403      	add	r3, r0
 800bec6:	4405      	add	r5, r0
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd07      	ble.n	800bee0 <_dtoa_r+0x818>
 800bed0:	ee18 1a10 	vmov	r1, s16
 800bed4:	461a      	mov	r2, r3
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 fc02 	bl	800c6e0 <__lshift>
 800bedc:	ee08 0a10 	vmov	s16, r0
 800bee0:	9b05      	ldr	r3, [sp, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd05      	ble.n	800bef2 <_dtoa_r+0x82a>
 800bee6:	4631      	mov	r1, r6
 800bee8:	461a      	mov	r2, r3
 800beea:	4620      	mov	r0, r4
 800beec:	f000 fbf8 	bl	800c6e0 <__lshift>
 800bef0:	4606      	mov	r6, r0
 800bef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d06e      	beq.n	800bfd6 <_dtoa_r+0x90e>
 800bef8:	ee18 0a10 	vmov	r0, s16
 800befc:	4631      	mov	r1, r6
 800befe:	f000 fc5f 	bl	800c7c0 <__mcmp>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	da67      	bge.n	800bfd6 <_dtoa_r+0x90e>
 800bf06:	9b00      	ldr	r3, [sp, #0]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	ee18 1a10 	vmov	r1, s16
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	220a      	movs	r2, #10
 800bf12:	2300      	movs	r3, #0
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fa33 	bl	800c380 <__multadd>
 800bf1a:	9b08      	ldr	r3, [sp, #32]
 800bf1c:	ee08 0a10 	vmov	s16, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 81b1 	beq.w	800c288 <_dtoa_r+0xbc0>
 800bf26:	2300      	movs	r3, #0
 800bf28:	4639      	mov	r1, r7
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fa27 	bl	800c380 <__multadd>
 800bf32:	9b02      	ldr	r3, [sp, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	4607      	mov	r7, r0
 800bf38:	f300 808e 	bgt.w	800c058 <_dtoa_r+0x990>
 800bf3c:	9b06      	ldr	r3, [sp, #24]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	dc51      	bgt.n	800bfe6 <_dtoa_r+0x91e>
 800bf42:	e089      	b.n	800c058 <_dtoa_r+0x990>
 800bf44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf4a:	e74b      	b.n	800bde4 <_dtoa_r+0x71c>
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	1e5e      	subs	r6, r3, #1
 800bf50:	9b07      	ldr	r3, [sp, #28]
 800bf52:	42b3      	cmp	r3, r6
 800bf54:	bfbf      	itttt	lt
 800bf56:	9b07      	ldrlt	r3, [sp, #28]
 800bf58:	9607      	strlt	r6, [sp, #28]
 800bf5a:	1af2      	sublt	r2, r6, r3
 800bf5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf5e:	bfb6      	itet	lt
 800bf60:	189b      	addlt	r3, r3, r2
 800bf62:	1b9e      	subge	r6, r3, r6
 800bf64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	bfb8      	it	lt
 800bf6a:	2600      	movlt	r6, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfb7      	itett	lt
 800bf70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf78:	1a9d      	sublt	r5, r3, r2
 800bf7a:	2300      	movlt	r3, #0
 800bf7c:	e734      	b.n	800bde8 <_dtoa_r+0x720>
 800bf7e:	9e07      	ldr	r6, [sp, #28]
 800bf80:	9d04      	ldr	r5, [sp, #16]
 800bf82:	9f08      	ldr	r7, [sp, #32]
 800bf84:	e73b      	b.n	800bdfe <_dtoa_r+0x736>
 800bf86:	9a07      	ldr	r2, [sp, #28]
 800bf88:	e767      	b.n	800be5a <_dtoa_r+0x792>
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	dc18      	bgt.n	800bfc2 <_dtoa_r+0x8fa>
 800bf90:	f1ba 0f00 	cmp.w	sl, #0
 800bf94:	d115      	bne.n	800bfc2 <_dtoa_r+0x8fa>
 800bf96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf9a:	b993      	cbnz	r3, 800bfc2 <_dtoa_r+0x8fa>
 800bf9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	b183      	cbz	r3, 800bfc8 <_dtoa_r+0x900>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9305      	str	r3, [sp, #20]
 800bfb2:	f04f 0801 	mov.w	r8, #1
 800bfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f47f af6a 	bne.w	800be92 <_dtoa_r+0x7ca>
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e76f      	b.n	800bea2 <_dtoa_r+0x7da>
 800bfc2:	f04f 0800 	mov.w	r8, #0
 800bfc6:	e7f6      	b.n	800bfb6 <_dtoa_r+0x8ee>
 800bfc8:	4698      	mov	r8, r3
 800bfca:	e7f4      	b.n	800bfb6 <_dtoa_r+0x8ee>
 800bfcc:	f43f af7d 	beq.w	800beca <_dtoa_r+0x802>
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	301c      	adds	r0, #28
 800bfd4:	e772      	b.n	800bebc <_dtoa_r+0x7f4>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dc37      	bgt.n	800c04c <_dtoa_r+0x984>
 800bfdc:	9b06      	ldr	r3, [sp, #24]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	dd34      	ble.n	800c04c <_dtoa_r+0x984>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	b96b      	cbnz	r3, 800c006 <_dtoa_r+0x93e>
 800bfea:	4631      	mov	r1, r6
 800bfec:	2205      	movs	r2, #5
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 f9c6 	bl	800c380 <__multadd>
 800bff4:	4601      	mov	r1, r0
 800bff6:	4606      	mov	r6, r0
 800bff8:	ee18 0a10 	vmov	r0, s16
 800bffc:	f000 fbe0 	bl	800c7c0 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	f73f adbb 	bgt.w	800bb7c <_dtoa_r+0x4b4>
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	9d01      	ldr	r5, [sp, #4]
 800c00a:	43db      	mvns	r3, r3
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	4631      	mov	r1, r6
 800c014:	4620      	mov	r0, r4
 800c016:	f000 f991 	bl	800c33c <_Bfree>
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	f43f aea4 	beq.w	800bd68 <_dtoa_r+0x6a0>
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	d005      	beq.n	800c032 <_dtoa_r+0x96a>
 800c026:	45b8      	cmp	r8, r7
 800c028:	d003      	beq.n	800c032 <_dtoa_r+0x96a>
 800c02a:	4641      	mov	r1, r8
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 f985 	bl	800c33c <_Bfree>
 800c032:	4639      	mov	r1, r7
 800c034:	4620      	mov	r0, r4
 800c036:	f000 f981 	bl	800c33c <_Bfree>
 800c03a:	e695      	b.n	800bd68 <_dtoa_r+0x6a0>
 800c03c:	2600      	movs	r6, #0
 800c03e:	4637      	mov	r7, r6
 800c040:	e7e1      	b.n	800c006 <_dtoa_r+0x93e>
 800c042:	9700      	str	r7, [sp, #0]
 800c044:	4637      	mov	r7, r6
 800c046:	e599      	b.n	800bb7c <_dtoa_r+0x4b4>
 800c048:	40240000 	.word	0x40240000
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 80ca 	beq.w	800c1e8 <_dtoa_r+0xb20>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	2d00      	cmp	r5, #0
 800c05a:	dd05      	ble.n	800c068 <_dtoa_r+0x9a0>
 800c05c:	4639      	mov	r1, r7
 800c05e:	462a      	mov	r2, r5
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fb3d 	bl	800c6e0 <__lshift>
 800c066:	4607      	mov	r7, r0
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d05b      	beq.n	800c126 <_dtoa_r+0xa5e>
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 f923 	bl	800c2bc <_Balloc>
 800c076:	4605      	mov	r5, r0
 800c078:	b928      	cbnz	r0, 800c086 <_dtoa_r+0x9be>
 800c07a:	4b87      	ldr	r3, [pc, #540]	; (800c298 <_dtoa_r+0xbd0>)
 800c07c:	4602      	mov	r2, r0
 800c07e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c082:	f7ff bb3b 	b.w	800b6fc <_dtoa_r+0x34>
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f107 010c 	add.w	r1, r7, #12
 800c090:	300c      	adds	r0, #12
 800c092:	f7fe fded 	bl	800ac70 <memcpy>
 800c096:	2201      	movs	r2, #1
 800c098:	4629      	mov	r1, r5
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 fb20 	bl	800c6e0 <__lshift>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	f103 0901 	add.w	r9, r3, #1
 800c0a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	f00a 0301 	and.w	r3, sl, #1
 800c0b2:	46b8      	mov	r8, r7
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	ee18 0a10 	vmov	r0, s16
 800c0be:	f7ff fa77 	bl	800b5b0 <quorem>
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	9002      	str	r0, [sp, #8]
 800c0c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0ca:	ee18 0a10 	vmov	r0, s16
 800c0ce:	f000 fb77 	bl	800c7c0 <__mcmp>
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	9003      	str	r0, [sp, #12]
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 fb8d 	bl	800c7f8 <__mdiff>
 800c0de:	68c2      	ldr	r2, [r0, #12]
 800c0e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	bb02      	cbnz	r2, 800c12a <_dtoa_r+0xa62>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	ee18 0a10 	vmov	r0, s16
 800c0ee:	f000 fb67 	bl	800c7c0 <__mcmp>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	9207      	str	r2, [sp, #28]
 800c0fa:	f000 f91f 	bl	800c33c <_Bfree>
 800c0fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c102:	ea43 0102 	orr.w	r1, r3, r2
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	430b      	orrs	r3, r1
 800c10a:	464d      	mov	r5, r9
 800c10c:	d10f      	bne.n	800c12e <_dtoa_r+0xa66>
 800c10e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c112:	d02a      	beq.n	800c16a <_dtoa_r+0xaa2>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd02      	ble.n	800c120 <_dtoa_r+0xa58>
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c120:	f88b a000 	strb.w	sl, [fp]
 800c124:	e775      	b.n	800c012 <_dtoa_r+0x94a>
 800c126:	4638      	mov	r0, r7
 800c128:	e7ba      	b.n	800c0a0 <_dtoa_r+0x9d8>
 800c12a:	2201      	movs	r2, #1
 800c12c:	e7e2      	b.n	800c0f4 <_dtoa_r+0xa2c>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	db04      	blt.n	800c13e <_dtoa_r+0xa76>
 800c134:	9906      	ldr	r1, [sp, #24]
 800c136:	430b      	orrs	r3, r1
 800c138:	9904      	ldr	r1, [sp, #16]
 800c13a:	430b      	orrs	r3, r1
 800c13c:	d122      	bne.n	800c184 <_dtoa_r+0xabc>
 800c13e:	2a00      	cmp	r2, #0
 800c140:	ddee      	ble.n	800c120 <_dtoa_r+0xa58>
 800c142:	ee18 1a10 	vmov	r1, s16
 800c146:	2201      	movs	r2, #1
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 fac9 	bl	800c6e0 <__lshift>
 800c14e:	4631      	mov	r1, r6
 800c150:	ee08 0a10 	vmov	s16, r0
 800c154:	f000 fb34 	bl	800c7c0 <__mcmp>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dc03      	bgt.n	800c164 <_dtoa_r+0xa9c>
 800c15c:	d1e0      	bne.n	800c120 <_dtoa_r+0xa58>
 800c15e:	f01a 0f01 	tst.w	sl, #1
 800c162:	d0dd      	beq.n	800c120 <_dtoa_r+0xa58>
 800c164:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c168:	d1d7      	bne.n	800c11a <_dtoa_r+0xa52>
 800c16a:	2339      	movs	r3, #57	; 0x39
 800c16c:	f88b 3000 	strb.w	r3, [fp]
 800c170:	462b      	mov	r3, r5
 800c172:	461d      	mov	r5, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c17a:	2a39      	cmp	r2, #57	; 0x39
 800c17c:	d071      	beq.n	800c262 <_dtoa_r+0xb9a>
 800c17e:	3201      	adds	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e746      	b.n	800c012 <_dtoa_r+0x94a>
 800c184:	2a00      	cmp	r2, #0
 800c186:	dd07      	ble.n	800c198 <_dtoa_r+0xad0>
 800c188:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c18c:	d0ed      	beq.n	800c16a <_dtoa_r+0xaa2>
 800c18e:	f10a 0301 	add.w	r3, sl, #1
 800c192:	f88b 3000 	strb.w	r3, [fp]
 800c196:	e73c      	b.n	800c012 <_dtoa_r+0x94a>
 800c198:	9b05      	ldr	r3, [sp, #20]
 800c19a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c19e:	4599      	cmp	r9, r3
 800c1a0:	d047      	beq.n	800c232 <_dtoa_r+0xb6a>
 800c1a2:	ee18 1a10 	vmov	r1, s16
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 f8e8 	bl	800c380 <__multadd>
 800c1b0:	45b8      	cmp	r8, r7
 800c1b2:	ee08 0a10 	vmov	s16, r0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	f04f 020a 	mov.w	r2, #10
 800c1be:	4641      	mov	r1, r8
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	d106      	bne.n	800c1d2 <_dtoa_r+0xb0a>
 800c1c4:	f000 f8dc 	bl	800c380 <__multadd>
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	f109 0901 	add.w	r9, r9, #1
 800c1d0:	e772      	b.n	800c0b8 <_dtoa_r+0x9f0>
 800c1d2:	f000 f8d5 	bl	800c380 <__multadd>
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4680      	mov	r8, r0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	220a      	movs	r2, #10
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 f8ce 	bl	800c380 <__multadd>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	e7f1      	b.n	800c1cc <_dtoa_r+0xb04>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	9302      	str	r3, [sp, #8]
 800c1ec:	9d01      	ldr	r5, [sp, #4]
 800c1ee:	ee18 0a10 	vmov	r0, s16
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	f7ff f9dc 	bl	800b5b0 <quorem>
 800c1f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1fc:	9b01      	ldr	r3, [sp, #4]
 800c1fe:	f805 ab01 	strb.w	sl, [r5], #1
 800c202:	1aea      	subs	r2, r5, r3
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	4293      	cmp	r3, r2
 800c208:	dd09      	ble.n	800c21e <_dtoa_r+0xb56>
 800c20a:	ee18 1a10 	vmov	r1, s16
 800c20e:	2300      	movs	r3, #0
 800c210:	220a      	movs	r2, #10
 800c212:	4620      	mov	r0, r4
 800c214:	f000 f8b4 	bl	800c380 <__multadd>
 800c218:	ee08 0a10 	vmov	s16, r0
 800c21c:	e7e7      	b.n	800c1ee <_dtoa_r+0xb26>
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	bfc8      	it	gt
 800c224:	461d      	movgt	r5, r3
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	bfd8      	it	le
 800c22a:	2501      	movle	r5, #1
 800c22c:	441d      	add	r5, r3
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	ee18 1a10 	vmov	r1, s16
 800c236:	2201      	movs	r2, #1
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 fa51 	bl	800c6e0 <__lshift>
 800c23e:	4631      	mov	r1, r6
 800c240:	ee08 0a10 	vmov	s16, r0
 800c244:	f000 fabc 	bl	800c7c0 <__mcmp>
 800c248:	2800      	cmp	r0, #0
 800c24a:	dc91      	bgt.n	800c170 <_dtoa_r+0xaa8>
 800c24c:	d102      	bne.n	800c254 <_dtoa_r+0xb8c>
 800c24e:	f01a 0f01 	tst.w	sl, #1
 800c252:	d18d      	bne.n	800c170 <_dtoa_r+0xaa8>
 800c254:	462b      	mov	r3, r5
 800c256:	461d      	mov	r5, r3
 800c258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c25c:	2a30      	cmp	r2, #48	; 0x30
 800c25e:	d0fa      	beq.n	800c256 <_dtoa_r+0xb8e>
 800c260:	e6d7      	b.n	800c012 <_dtoa_r+0x94a>
 800c262:	9a01      	ldr	r2, [sp, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	d184      	bne.n	800c172 <_dtoa_r+0xaaa>
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	3301      	adds	r3, #1
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	2331      	movs	r3, #49	; 0x31
 800c270:	7013      	strb	r3, [r2, #0]
 800c272:	e6ce      	b.n	800c012 <_dtoa_r+0x94a>
 800c274:	4b09      	ldr	r3, [pc, #36]	; (800c29c <_dtoa_r+0xbd4>)
 800c276:	f7ff ba95 	b.w	800b7a4 <_dtoa_r+0xdc>
 800c27a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f47f aa6e 	bne.w	800b75e <_dtoa_r+0x96>
 800c282:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <_dtoa_r+0xbd8>)
 800c284:	f7ff ba8e 	b.w	800b7a4 <_dtoa_r+0xdc>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dcae      	bgt.n	800c1ec <_dtoa_r+0xb24>
 800c28e:	9b06      	ldr	r3, [sp, #24]
 800c290:	2b02      	cmp	r3, #2
 800c292:	f73f aea8 	bgt.w	800bfe6 <_dtoa_r+0x91e>
 800c296:	e7a9      	b.n	800c1ec <_dtoa_r+0xb24>
 800c298:	0800de33 	.word	0x0800de33
 800c29c:	0800dd90 	.word	0x0800dd90
 800c2a0:	0800ddb4 	.word	0x0800ddb4

0800c2a4 <_localeconv_r>:
 800c2a4:	4800      	ldr	r0, [pc, #0]	; (800c2a8 <_localeconv_r+0x4>)
 800c2a6:	4770      	bx	lr
 800c2a8:	20000164 	.word	0x20000164

0800c2ac <malloc>:
 800c2ac:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <malloc+0xc>)
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f000 bc09 	b.w	800cac8 <_malloc_r>
 800c2b6:	bf00      	nop
 800c2b8:	20000010 	.word	0x20000010

0800c2bc <_Balloc>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	460d      	mov	r5, r1
 800c2c4:	b976      	cbnz	r6, 800c2e4 <_Balloc+0x28>
 800c2c6:	2010      	movs	r0, #16
 800c2c8:	f7ff fff0 	bl	800c2ac <malloc>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6260      	str	r0, [r4, #36]	; 0x24
 800c2d0:	b920      	cbnz	r0, 800c2dc <_Balloc+0x20>
 800c2d2:	4b18      	ldr	r3, [pc, #96]	; (800c334 <_Balloc+0x78>)
 800c2d4:	4818      	ldr	r0, [pc, #96]	; (800c338 <_Balloc+0x7c>)
 800c2d6:	2166      	movs	r1, #102	; 0x66
 800c2d8:	f000 fdd6 	bl	800ce88 <__assert_func>
 800c2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2e0:	6006      	str	r6, [r0, #0]
 800c2e2:	60c6      	str	r6, [r0, #12]
 800c2e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2e6:	68f3      	ldr	r3, [r6, #12]
 800c2e8:	b183      	cbz	r3, 800c30c <_Balloc+0x50>
 800c2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2f2:	b9b8      	cbnz	r0, 800c324 <_Balloc+0x68>
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2fa:	1d72      	adds	r2, r6, #5
 800c2fc:	0092      	lsls	r2, r2, #2
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 fb60 	bl	800c9c4 <_calloc_r>
 800c304:	b160      	cbz	r0, 800c320 <_Balloc+0x64>
 800c306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c30a:	e00e      	b.n	800c32a <_Balloc+0x6e>
 800c30c:	2221      	movs	r2, #33	; 0x21
 800c30e:	2104      	movs	r1, #4
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fb57 	bl	800c9c4 <_calloc_r>
 800c316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c318:	60f0      	str	r0, [r6, #12]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e4      	bne.n	800c2ea <_Balloc+0x2e>
 800c320:	2000      	movs	r0, #0
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	6802      	ldr	r2, [r0, #0]
 800c326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c32a:	2300      	movs	r3, #0
 800c32c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c330:	e7f7      	b.n	800c322 <_Balloc+0x66>
 800c332:	bf00      	nop
 800c334:	0800ddc1 	.word	0x0800ddc1
 800c338:	0800de44 	.word	0x0800de44

0800c33c <_Bfree>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c340:	4605      	mov	r5, r0
 800c342:	460c      	mov	r4, r1
 800c344:	b976      	cbnz	r6, 800c364 <_Bfree+0x28>
 800c346:	2010      	movs	r0, #16
 800c348:	f7ff ffb0 	bl	800c2ac <malloc>
 800c34c:	4602      	mov	r2, r0
 800c34e:	6268      	str	r0, [r5, #36]	; 0x24
 800c350:	b920      	cbnz	r0, 800c35c <_Bfree+0x20>
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <_Bfree+0x3c>)
 800c354:	4809      	ldr	r0, [pc, #36]	; (800c37c <_Bfree+0x40>)
 800c356:	218a      	movs	r1, #138	; 0x8a
 800c358:	f000 fd96 	bl	800ce88 <__assert_func>
 800c35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c360:	6006      	str	r6, [r0, #0]
 800c362:	60c6      	str	r6, [r0, #12]
 800c364:	b13c      	cbz	r4, 800c376 <_Bfree+0x3a>
 800c366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c368:	6862      	ldr	r2, [r4, #4]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c370:	6021      	str	r1, [r4, #0]
 800c372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	0800ddc1 	.word	0x0800ddc1
 800c37c:	0800de44 	.word	0x0800de44

0800c380 <__multadd>:
 800c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c384:	690d      	ldr	r5, [r1, #16]
 800c386:	4607      	mov	r7, r0
 800c388:	460c      	mov	r4, r1
 800c38a:	461e      	mov	r6, r3
 800c38c:	f101 0c14 	add.w	ip, r1, #20
 800c390:	2000      	movs	r0, #0
 800c392:	f8dc 3000 	ldr.w	r3, [ip]
 800c396:	b299      	uxth	r1, r3
 800c398:	fb02 6101 	mla	r1, r2, r1, r6
 800c39c:	0c1e      	lsrs	r6, r3, #16
 800c39e:	0c0b      	lsrs	r3, r1, #16
 800c3a0:	fb02 3306 	mla	r3, r2, r6, r3
 800c3a4:	b289      	uxth	r1, r1
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3ac:	4285      	cmp	r5, r0
 800c3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c3b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3b6:	dcec      	bgt.n	800c392 <__multadd+0x12>
 800c3b8:	b30e      	cbz	r6, 800c3fe <__multadd+0x7e>
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	42ab      	cmp	r3, r5
 800c3be:	dc19      	bgt.n	800c3f4 <__multadd+0x74>
 800c3c0:	6861      	ldr	r1, [r4, #4]
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	3101      	adds	r1, #1
 800c3c6:	f7ff ff79 	bl	800c2bc <_Balloc>
 800c3ca:	4680      	mov	r8, r0
 800c3cc:	b928      	cbnz	r0, 800c3da <__multadd+0x5a>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <__multadd+0x84>)
 800c3d2:	480d      	ldr	r0, [pc, #52]	; (800c408 <__multadd+0x88>)
 800c3d4:	21b5      	movs	r1, #181	; 0xb5
 800c3d6:	f000 fd57 	bl	800ce88 <__assert_func>
 800c3da:	6922      	ldr	r2, [r4, #16]
 800c3dc:	3202      	adds	r2, #2
 800c3de:	f104 010c 	add.w	r1, r4, #12
 800c3e2:	0092      	lsls	r2, r2, #2
 800c3e4:	300c      	adds	r0, #12
 800c3e6:	f7fe fc43 	bl	800ac70 <memcpy>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7ff ffa5 	bl	800c33c <_Bfree>
 800c3f2:	4644      	mov	r4, r8
 800c3f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3f8:	3501      	adds	r5, #1
 800c3fa:	615e      	str	r6, [r3, #20]
 800c3fc:	6125      	str	r5, [r4, #16]
 800c3fe:	4620      	mov	r0, r4
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c404:	0800de33 	.word	0x0800de33
 800c408:	0800de44 	.word	0x0800de44

0800c40c <__hi0bits>:
 800c40c:	0c03      	lsrs	r3, r0, #16
 800c40e:	041b      	lsls	r3, r3, #16
 800c410:	b9d3      	cbnz	r3, 800c448 <__hi0bits+0x3c>
 800c412:	0400      	lsls	r0, r0, #16
 800c414:	2310      	movs	r3, #16
 800c416:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c41a:	bf04      	itt	eq
 800c41c:	0200      	lsleq	r0, r0, #8
 800c41e:	3308      	addeq	r3, #8
 800c420:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c424:	bf04      	itt	eq
 800c426:	0100      	lsleq	r0, r0, #4
 800c428:	3304      	addeq	r3, #4
 800c42a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c42e:	bf04      	itt	eq
 800c430:	0080      	lsleq	r0, r0, #2
 800c432:	3302      	addeq	r3, #2
 800c434:	2800      	cmp	r0, #0
 800c436:	db05      	blt.n	800c444 <__hi0bits+0x38>
 800c438:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c43c:	f103 0301 	add.w	r3, r3, #1
 800c440:	bf08      	it	eq
 800c442:	2320      	moveq	r3, #32
 800c444:	4618      	mov	r0, r3
 800c446:	4770      	bx	lr
 800c448:	2300      	movs	r3, #0
 800c44a:	e7e4      	b.n	800c416 <__hi0bits+0xa>

0800c44c <__lo0bits>:
 800c44c:	6803      	ldr	r3, [r0, #0]
 800c44e:	f013 0207 	ands.w	r2, r3, #7
 800c452:	4601      	mov	r1, r0
 800c454:	d00b      	beq.n	800c46e <__lo0bits+0x22>
 800c456:	07da      	lsls	r2, r3, #31
 800c458:	d423      	bmi.n	800c4a2 <__lo0bits+0x56>
 800c45a:	0798      	lsls	r0, r3, #30
 800c45c:	bf49      	itett	mi
 800c45e:	085b      	lsrmi	r3, r3, #1
 800c460:	089b      	lsrpl	r3, r3, #2
 800c462:	2001      	movmi	r0, #1
 800c464:	600b      	strmi	r3, [r1, #0]
 800c466:	bf5c      	itt	pl
 800c468:	600b      	strpl	r3, [r1, #0]
 800c46a:	2002      	movpl	r0, #2
 800c46c:	4770      	bx	lr
 800c46e:	b298      	uxth	r0, r3
 800c470:	b9a8      	cbnz	r0, 800c49e <__lo0bits+0x52>
 800c472:	0c1b      	lsrs	r3, r3, #16
 800c474:	2010      	movs	r0, #16
 800c476:	b2da      	uxtb	r2, r3
 800c478:	b90a      	cbnz	r2, 800c47e <__lo0bits+0x32>
 800c47a:	3008      	adds	r0, #8
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	071a      	lsls	r2, r3, #28
 800c480:	bf04      	itt	eq
 800c482:	091b      	lsreq	r3, r3, #4
 800c484:	3004      	addeq	r0, #4
 800c486:	079a      	lsls	r2, r3, #30
 800c488:	bf04      	itt	eq
 800c48a:	089b      	lsreq	r3, r3, #2
 800c48c:	3002      	addeq	r0, #2
 800c48e:	07da      	lsls	r2, r3, #31
 800c490:	d403      	bmi.n	800c49a <__lo0bits+0x4e>
 800c492:	085b      	lsrs	r3, r3, #1
 800c494:	f100 0001 	add.w	r0, r0, #1
 800c498:	d005      	beq.n	800c4a6 <__lo0bits+0x5a>
 800c49a:	600b      	str	r3, [r1, #0]
 800c49c:	4770      	bx	lr
 800c49e:	4610      	mov	r0, r2
 800c4a0:	e7e9      	b.n	800c476 <__lo0bits+0x2a>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	4770      	bx	lr
 800c4a6:	2020      	movs	r0, #32
 800c4a8:	4770      	bx	lr
	...

0800c4ac <__i2b>:
 800c4ac:	b510      	push	{r4, lr}
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	f7ff ff03 	bl	800c2bc <_Balloc>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	b928      	cbnz	r0, 800c4c6 <__i2b+0x1a>
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <__i2b+0x24>)
 800c4bc:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <__i2b+0x28>)
 800c4be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4c2:	f000 fce1 	bl	800ce88 <__assert_func>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	6144      	str	r4, [r0, #20]
 800c4ca:	6103      	str	r3, [r0, #16]
 800c4cc:	bd10      	pop	{r4, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800de33 	.word	0x0800de33
 800c4d4:	0800de44 	.word	0x0800de44

0800c4d8 <__multiply>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	4691      	mov	r9, r2
 800c4de:	690a      	ldr	r2, [r1, #16]
 800c4e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bfb8      	it	lt
 800c4e8:	460b      	movlt	r3, r1
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	bfbc      	itt	lt
 800c4ee:	464c      	movlt	r4, r9
 800c4f0:	4699      	movlt	r9, r3
 800c4f2:	6927      	ldr	r7, [r4, #16]
 800c4f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4f8:	68a3      	ldr	r3, [r4, #8]
 800c4fa:	6861      	ldr	r1, [r4, #4]
 800c4fc:	eb07 060a 	add.w	r6, r7, sl
 800c500:	42b3      	cmp	r3, r6
 800c502:	b085      	sub	sp, #20
 800c504:	bfb8      	it	lt
 800c506:	3101      	addlt	r1, #1
 800c508:	f7ff fed8 	bl	800c2bc <_Balloc>
 800c50c:	b930      	cbnz	r0, 800c51c <__multiply+0x44>
 800c50e:	4602      	mov	r2, r0
 800c510:	4b44      	ldr	r3, [pc, #272]	; (800c624 <__multiply+0x14c>)
 800c512:	4845      	ldr	r0, [pc, #276]	; (800c628 <__multiply+0x150>)
 800c514:	f240 115d 	movw	r1, #349	; 0x15d
 800c518:	f000 fcb6 	bl	800ce88 <__assert_func>
 800c51c:	f100 0514 	add.w	r5, r0, #20
 800c520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c524:	462b      	mov	r3, r5
 800c526:	2200      	movs	r2, #0
 800c528:	4543      	cmp	r3, r8
 800c52a:	d321      	bcc.n	800c570 <__multiply+0x98>
 800c52c:	f104 0314 	add.w	r3, r4, #20
 800c530:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c534:	f109 0314 	add.w	r3, r9, #20
 800c538:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c53c:	9202      	str	r2, [sp, #8]
 800c53e:	1b3a      	subs	r2, r7, r4
 800c540:	3a15      	subs	r2, #21
 800c542:	f022 0203 	bic.w	r2, r2, #3
 800c546:	3204      	adds	r2, #4
 800c548:	f104 0115 	add.w	r1, r4, #21
 800c54c:	428f      	cmp	r7, r1
 800c54e:	bf38      	it	cc
 800c550:	2204      	movcc	r2, #4
 800c552:	9201      	str	r2, [sp, #4]
 800c554:	9a02      	ldr	r2, [sp, #8]
 800c556:	9303      	str	r3, [sp, #12]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d80c      	bhi.n	800c576 <__multiply+0x9e>
 800c55c:	2e00      	cmp	r6, #0
 800c55e:	dd03      	ble.n	800c568 <__multiply+0x90>
 800c560:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c564:	2b00      	cmp	r3, #0
 800c566:	d05a      	beq.n	800c61e <__multiply+0x146>
 800c568:	6106      	str	r6, [r0, #16]
 800c56a:	b005      	add	sp, #20
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c570:	f843 2b04 	str.w	r2, [r3], #4
 800c574:	e7d8      	b.n	800c528 <__multiply+0x50>
 800c576:	f8b3 a000 	ldrh.w	sl, [r3]
 800c57a:	f1ba 0f00 	cmp.w	sl, #0
 800c57e:	d024      	beq.n	800c5ca <__multiply+0xf2>
 800c580:	f104 0e14 	add.w	lr, r4, #20
 800c584:	46a9      	mov	r9, r5
 800c586:	f04f 0c00 	mov.w	ip, #0
 800c58a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c58e:	f8d9 1000 	ldr.w	r1, [r9]
 800c592:	fa1f fb82 	uxth.w	fp, r2
 800c596:	b289      	uxth	r1, r1
 800c598:	fb0a 110b 	mla	r1, sl, fp, r1
 800c59c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c5a4:	4461      	add	r1, ip
 800c5a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5b2:	b289      	uxth	r1, r1
 800c5b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5b8:	4577      	cmp	r7, lr
 800c5ba:	f849 1b04 	str.w	r1, [r9], #4
 800c5be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5c2:	d8e2      	bhi.n	800c58a <__multiply+0xb2>
 800c5c4:	9a01      	ldr	r2, [sp, #4]
 800c5c6:	f845 c002 	str.w	ip, [r5, r2]
 800c5ca:	9a03      	ldr	r2, [sp, #12]
 800c5cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	d020      	beq.n	800c61a <__multiply+0x142>
 800c5d8:	6829      	ldr	r1, [r5, #0]
 800c5da:	f104 0c14 	add.w	ip, r4, #20
 800c5de:	46ae      	mov	lr, r5
 800c5e0:	f04f 0a00 	mov.w	sl, #0
 800c5e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c5e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5ec:	fb09 220b 	mla	r2, r9, fp, r2
 800c5f0:	4492      	add	sl, r2
 800c5f2:	b289      	uxth	r1, r1
 800c5f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5f8:	f84e 1b04 	str.w	r1, [lr], #4
 800c5fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c600:	f8be 1000 	ldrh.w	r1, [lr]
 800c604:	0c12      	lsrs	r2, r2, #16
 800c606:	fb09 1102 	mla	r1, r9, r2, r1
 800c60a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c60e:	4567      	cmp	r7, ip
 800c610:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c614:	d8e6      	bhi.n	800c5e4 <__multiply+0x10c>
 800c616:	9a01      	ldr	r2, [sp, #4]
 800c618:	50a9      	str	r1, [r5, r2]
 800c61a:	3504      	adds	r5, #4
 800c61c:	e79a      	b.n	800c554 <__multiply+0x7c>
 800c61e:	3e01      	subs	r6, #1
 800c620:	e79c      	b.n	800c55c <__multiply+0x84>
 800c622:	bf00      	nop
 800c624:	0800de33 	.word	0x0800de33
 800c628:	0800de44 	.word	0x0800de44

0800c62c <__pow5mult>:
 800c62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c630:	4615      	mov	r5, r2
 800c632:	f012 0203 	ands.w	r2, r2, #3
 800c636:	4606      	mov	r6, r0
 800c638:	460f      	mov	r7, r1
 800c63a:	d007      	beq.n	800c64c <__pow5mult+0x20>
 800c63c:	4c25      	ldr	r4, [pc, #148]	; (800c6d4 <__pow5mult+0xa8>)
 800c63e:	3a01      	subs	r2, #1
 800c640:	2300      	movs	r3, #0
 800c642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c646:	f7ff fe9b 	bl	800c380 <__multadd>
 800c64a:	4607      	mov	r7, r0
 800c64c:	10ad      	asrs	r5, r5, #2
 800c64e:	d03d      	beq.n	800c6cc <__pow5mult+0xa0>
 800c650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c652:	b97c      	cbnz	r4, 800c674 <__pow5mult+0x48>
 800c654:	2010      	movs	r0, #16
 800c656:	f7ff fe29 	bl	800c2ac <malloc>
 800c65a:	4602      	mov	r2, r0
 800c65c:	6270      	str	r0, [r6, #36]	; 0x24
 800c65e:	b928      	cbnz	r0, 800c66c <__pow5mult+0x40>
 800c660:	4b1d      	ldr	r3, [pc, #116]	; (800c6d8 <__pow5mult+0xac>)
 800c662:	481e      	ldr	r0, [pc, #120]	; (800c6dc <__pow5mult+0xb0>)
 800c664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c668:	f000 fc0e 	bl	800ce88 <__assert_func>
 800c66c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c670:	6004      	str	r4, [r0, #0]
 800c672:	60c4      	str	r4, [r0, #12]
 800c674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c67c:	b94c      	cbnz	r4, 800c692 <__pow5mult+0x66>
 800c67e:	f240 2171 	movw	r1, #625	; 0x271
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff ff12 	bl	800c4ac <__i2b>
 800c688:	2300      	movs	r3, #0
 800c68a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c68e:	4604      	mov	r4, r0
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	f04f 0900 	mov.w	r9, #0
 800c696:	07eb      	lsls	r3, r5, #31
 800c698:	d50a      	bpl.n	800c6b0 <__pow5mult+0x84>
 800c69a:	4639      	mov	r1, r7
 800c69c:	4622      	mov	r2, r4
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ff1a 	bl	800c4d8 <__multiply>
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f7ff fe47 	bl	800c33c <_Bfree>
 800c6ae:	4647      	mov	r7, r8
 800c6b0:	106d      	asrs	r5, r5, #1
 800c6b2:	d00b      	beq.n	800c6cc <__pow5mult+0xa0>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	b938      	cbnz	r0, 800c6c8 <__pow5mult+0x9c>
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff ff0b 	bl	800c4d8 <__multiply>
 800c6c2:	6020      	str	r0, [r4, #0]
 800c6c4:	f8c0 9000 	str.w	r9, [r0]
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	e7e4      	b.n	800c696 <__pow5mult+0x6a>
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800df90 	.word	0x0800df90
 800c6d8:	0800ddc1 	.word	0x0800ddc1
 800c6dc:	0800de44 	.word	0x0800de44

0800c6e0 <__lshift>:
 800c6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	6849      	ldr	r1, [r1, #4]
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ee:	68a3      	ldr	r3, [r4, #8]
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	4691      	mov	r9, r2
 800c6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6f8:	f108 0601 	add.w	r6, r8, #1
 800c6fc:	42b3      	cmp	r3, r6
 800c6fe:	db0b      	blt.n	800c718 <__lshift+0x38>
 800c700:	4638      	mov	r0, r7
 800c702:	f7ff fddb 	bl	800c2bc <_Balloc>
 800c706:	4605      	mov	r5, r0
 800c708:	b948      	cbnz	r0, 800c71e <__lshift+0x3e>
 800c70a:	4602      	mov	r2, r0
 800c70c:	4b2a      	ldr	r3, [pc, #168]	; (800c7b8 <__lshift+0xd8>)
 800c70e:	482b      	ldr	r0, [pc, #172]	; (800c7bc <__lshift+0xdc>)
 800c710:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c714:	f000 fbb8 	bl	800ce88 <__assert_func>
 800c718:	3101      	adds	r1, #1
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	e7ee      	b.n	800c6fc <__lshift+0x1c>
 800c71e:	2300      	movs	r3, #0
 800c720:	f100 0114 	add.w	r1, r0, #20
 800c724:	f100 0210 	add.w	r2, r0, #16
 800c728:	4618      	mov	r0, r3
 800c72a:	4553      	cmp	r3, sl
 800c72c:	db37      	blt.n	800c79e <__lshift+0xbe>
 800c72e:	6920      	ldr	r0, [r4, #16]
 800c730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c734:	f104 0314 	add.w	r3, r4, #20
 800c738:	f019 091f 	ands.w	r9, r9, #31
 800c73c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c740:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c744:	d02f      	beq.n	800c7a6 <__lshift+0xc6>
 800c746:	f1c9 0e20 	rsb	lr, r9, #32
 800c74a:	468a      	mov	sl, r1
 800c74c:	f04f 0c00 	mov.w	ip, #0
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	fa02 f209 	lsl.w	r2, r2, r9
 800c756:	ea42 020c 	orr.w	r2, r2, ip
 800c75a:	f84a 2b04 	str.w	r2, [sl], #4
 800c75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c762:	4298      	cmp	r0, r3
 800c764:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c768:	d8f2      	bhi.n	800c750 <__lshift+0x70>
 800c76a:	1b03      	subs	r3, r0, r4
 800c76c:	3b15      	subs	r3, #21
 800c76e:	f023 0303 	bic.w	r3, r3, #3
 800c772:	3304      	adds	r3, #4
 800c774:	f104 0215 	add.w	r2, r4, #21
 800c778:	4290      	cmp	r0, r2
 800c77a:	bf38      	it	cc
 800c77c:	2304      	movcc	r3, #4
 800c77e:	f841 c003 	str.w	ip, [r1, r3]
 800c782:	f1bc 0f00 	cmp.w	ip, #0
 800c786:	d001      	beq.n	800c78c <__lshift+0xac>
 800c788:	f108 0602 	add.w	r6, r8, #2
 800c78c:	3e01      	subs	r6, #1
 800c78e:	4638      	mov	r0, r7
 800c790:	612e      	str	r6, [r5, #16]
 800c792:	4621      	mov	r1, r4
 800c794:	f7ff fdd2 	bl	800c33c <_Bfree>
 800c798:	4628      	mov	r0, r5
 800c79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c79e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	e7c1      	b.n	800c72a <__lshift+0x4a>
 800c7a6:	3904      	subs	r1, #4
 800c7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7b0:	4298      	cmp	r0, r3
 800c7b2:	d8f9      	bhi.n	800c7a8 <__lshift+0xc8>
 800c7b4:	e7ea      	b.n	800c78c <__lshift+0xac>
 800c7b6:	bf00      	nop
 800c7b8:	0800de33 	.word	0x0800de33
 800c7bc:	0800de44 	.word	0x0800de44

0800c7c0 <__mcmp>:
 800c7c0:	b530      	push	{r4, r5, lr}
 800c7c2:	6902      	ldr	r2, [r0, #16]
 800c7c4:	690c      	ldr	r4, [r1, #16]
 800c7c6:	1b12      	subs	r2, r2, r4
 800c7c8:	d10e      	bne.n	800c7e8 <__mcmp+0x28>
 800c7ca:	f100 0314 	add.w	r3, r0, #20
 800c7ce:	3114      	adds	r1, #20
 800c7d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7e0:	42a5      	cmp	r5, r4
 800c7e2:	d003      	beq.n	800c7ec <__mcmp+0x2c>
 800c7e4:	d305      	bcc.n	800c7f2 <__mcmp+0x32>
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	4283      	cmp	r3, r0
 800c7ee:	d3f3      	bcc.n	800c7d8 <__mcmp+0x18>
 800c7f0:	e7fa      	b.n	800c7e8 <__mcmp+0x28>
 800c7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f6:	e7f7      	b.n	800c7e8 <__mcmp+0x28>

0800c7f8 <__mdiff>:
 800c7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	4606      	mov	r6, r0
 800c800:	4611      	mov	r1, r2
 800c802:	4620      	mov	r0, r4
 800c804:	4690      	mov	r8, r2
 800c806:	f7ff ffdb 	bl	800c7c0 <__mcmp>
 800c80a:	1e05      	subs	r5, r0, #0
 800c80c:	d110      	bne.n	800c830 <__mdiff+0x38>
 800c80e:	4629      	mov	r1, r5
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff fd53 	bl	800c2bc <_Balloc>
 800c816:	b930      	cbnz	r0, 800c826 <__mdiff+0x2e>
 800c818:	4b3a      	ldr	r3, [pc, #232]	; (800c904 <__mdiff+0x10c>)
 800c81a:	4602      	mov	r2, r0
 800c81c:	f240 2132 	movw	r1, #562	; 0x232
 800c820:	4839      	ldr	r0, [pc, #228]	; (800c908 <__mdiff+0x110>)
 800c822:	f000 fb31 	bl	800ce88 <__assert_func>
 800c826:	2301      	movs	r3, #1
 800c828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c82c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c830:	bfa4      	itt	ge
 800c832:	4643      	movge	r3, r8
 800c834:	46a0      	movge	r8, r4
 800c836:	4630      	mov	r0, r6
 800c838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c83c:	bfa6      	itte	ge
 800c83e:	461c      	movge	r4, r3
 800c840:	2500      	movge	r5, #0
 800c842:	2501      	movlt	r5, #1
 800c844:	f7ff fd3a 	bl	800c2bc <_Balloc>
 800c848:	b920      	cbnz	r0, 800c854 <__mdiff+0x5c>
 800c84a:	4b2e      	ldr	r3, [pc, #184]	; (800c904 <__mdiff+0x10c>)
 800c84c:	4602      	mov	r2, r0
 800c84e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c852:	e7e5      	b.n	800c820 <__mdiff+0x28>
 800c854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c858:	6926      	ldr	r6, [r4, #16]
 800c85a:	60c5      	str	r5, [r0, #12]
 800c85c:	f104 0914 	add.w	r9, r4, #20
 800c860:	f108 0514 	add.w	r5, r8, #20
 800c864:	f100 0e14 	add.w	lr, r0, #20
 800c868:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c86c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c870:	f108 0210 	add.w	r2, r8, #16
 800c874:	46f2      	mov	sl, lr
 800c876:	2100      	movs	r1, #0
 800c878:	f859 3b04 	ldr.w	r3, [r9], #4
 800c87c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c880:	fa1f f883 	uxth.w	r8, r3
 800c884:	fa11 f18b 	uxtah	r1, r1, fp
 800c888:	0c1b      	lsrs	r3, r3, #16
 800c88a:	eba1 0808 	sub.w	r8, r1, r8
 800c88e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c892:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c896:	fa1f f888 	uxth.w	r8, r8
 800c89a:	1419      	asrs	r1, r3, #16
 800c89c:	454e      	cmp	r6, r9
 800c89e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8a2:	f84a 3b04 	str.w	r3, [sl], #4
 800c8a6:	d8e7      	bhi.n	800c878 <__mdiff+0x80>
 800c8a8:	1b33      	subs	r3, r6, r4
 800c8aa:	3b15      	subs	r3, #21
 800c8ac:	f023 0303 	bic.w	r3, r3, #3
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	3415      	adds	r4, #21
 800c8b4:	42a6      	cmp	r6, r4
 800c8b6:	bf38      	it	cc
 800c8b8:	2304      	movcc	r3, #4
 800c8ba:	441d      	add	r5, r3
 800c8bc:	4473      	add	r3, lr
 800c8be:	469e      	mov	lr, r3
 800c8c0:	462e      	mov	r6, r5
 800c8c2:	4566      	cmp	r6, ip
 800c8c4:	d30e      	bcc.n	800c8e4 <__mdiff+0xec>
 800c8c6:	f10c 0203 	add.w	r2, ip, #3
 800c8ca:	1b52      	subs	r2, r2, r5
 800c8cc:	f022 0203 	bic.w	r2, r2, #3
 800c8d0:	3d03      	subs	r5, #3
 800c8d2:	45ac      	cmp	ip, r5
 800c8d4:	bf38      	it	cc
 800c8d6:	2200      	movcc	r2, #0
 800c8d8:	441a      	add	r2, r3
 800c8da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c8de:	b17b      	cbz	r3, 800c900 <__mdiff+0x108>
 800c8e0:	6107      	str	r7, [r0, #16]
 800c8e2:	e7a3      	b.n	800c82c <__mdiff+0x34>
 800c8e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8e8:	fa11 f288 	uxtah	r2, r1, r8
 800c8ec:	1414      	asrs	r4, r2, #16
 800c8ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8f2:	b292      	uxth	r2, r2
 800c8f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8f8:	f84e 2b04 	str.w	r2, [lr], #4
 800c8fc:	1421      	asrs	r1, r4, #16
 800c8fe:	e7e0      	b.n	800c8c2 <__mdiff+0xca>
 800c900:	3f01      	subs	r7, #1
 800c902:	e7ea      	b.n	800c8da <__mdiff+0xe2>
 800c904:	0800de33 	.word	0x0800de33
 800c908:	0800de44 	.word	0x0800de44

0800c90c <__d2b>:
 800c90c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c910:	4689      	mov	r9, r1
 800c912:	2101      	movs	r1, #1
 800c914:	ec57 6b10 	vmov	r6, r7, d0
 800c918:	4690      	mov	r8, r2
 800c91a:	f7ff fccf 	bl	800c2bc <_Balloc>
 800c91e:	4604      	mov	r4, r0
 800c920:	b930      	cbnz	r0, 800c930 <__d2b+0x24>
 800c922:	4602      	mov	r2, r0
 800c924:	4b25      	ldr	r3, [pc, #148]	; (800c9bc <__d2b+0xb0>)
 800c926:	4826      	ldr	r0, [pc, #152]	; (800c9c0 <__d2b+0xb4>)
 800c928:	f240 310a 	movw	r1, #778	; 0x30a
 800c92c:	f000 faac 	bl	800ce88 <__assert_func>
 800c930:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c934:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c938:	bb35      	cbnz	r5, 800c988 <__d2b+0x7c>
 800c93a:	2e00      	cmp	r6, #0
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	d028      	beq.n	800c992 <__d2b+0x86>
 800c940:	4668      	mov	r0, sp
 800c942:	9600      	str	r6, [sp, #0]
 800c944:	f7ff fd82 	bl	800c44c <__lo0bits>
 800c948:	9900      	ldr	r1, [sp, #0]
 800c94a:	b300      	cbz	r0, 800c98e <__d2b+0x82>
 800c94c:	9a01      	ldr	r2, [sp, #4]
 800c94e:	f1c0 0320 	rsb	r3, r0, #32
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	430b      	orrs	r3, r1
 800c958:	40c2      	lsrs	r2, r0
 800c95a:	6163      	str	r3, [r4, #20]
 800c95c:	9201      	str	r2, [sp, #4]
 800c95e:	9b01      	ldr	r3, [sp, #4]
 800c960:	61a3      	str	r3, [r4, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	bf14      	ite	ne
 800c966:	2202      	movne	r2, #2
 800c968:	2201      	moveq	r2, #1
 800c96a:	6122      	str	r2, [r4, #16]
 800c96c:	b1d5      	cbz	r5, 800c9a4 <__d2b+0x98>
 800c96e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c972:	4405      	add	r5, r0
 800c974:	f8c9 5000 	str.w	r5, [r9]
 800c978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c97c:	f8c8 0000 	str.w	r0, [r8]
 800c980:	4620      	mov	r0, r4
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c98c:	e7d5      	b.n	800c93a <__d2b+0x2e>
 800c98e:	6161      	str	r1, [r4, #20]
 800c990:	e7e5      	b.n	800c95e <__d2b+0x52>
 800c992:	a801      	add	r0, sp, #4
 800c994:	f7ff fd5a 	bl	800c44c <__lo0bits>
 800c998:	9b01      	ldr	r3, [sp, #4]
 800c99a:	6163      	str	r3, [r4, #20]
 800c99c:	2201      	movs	r2, #1
 800c99e:	6122      	str	r2, [r4, #16]
 800c9a0:	3020      	adds	r0, #32
 800c9a2:	e7e3      	b.n	800c96c <__d2b+0x60>
 800c9a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9ac:	f8c9 0000 	str.w	r0, [r9]
 800c9b0:	6918      	ldr	r0, [r3, #16]
 800c9b2:	f7ff fd2b 	bl	800c40c <__hi0bits>
 800c9b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9ba:	e7df      	b.n	800c97c <__d2b+0x70>
 800c9bc:	0800de33 	.word	0x0800de33
 800c9c0:	0800de44 	.word	0x0800de44

0800c9c4 <_calloc_r>:
 800c9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9c6:	fba1 2402 	umull	r2, r4, r1, r2
 800c9ca:	b94c      	cbnz	r4, 800c9e0 <_calloc_r+0x1c>
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	9201      	str	r2, [sp, #4]
 800c9d0:	f000 f87a 	bl	800cac8 <_malloc_r>
 800c9d4:	9a01      	ldr	r2, [sp, #4]
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	b930      	cbnz	r0, 800c9e8 <_calloc_r+0x24>
 800c9da:	4628      	mov	r0, r5
 800c9dc:	b003      	add	sp, #12
 800c9de:	bd30      	pop	{r4, r5, pc}
 800c9e0:	220c      	movs	r2, #12
 800c9e2:	6002      	str	r2, [r0, #0]
 800c9e4:	2500      	movs	r5, #0
 800c9e6:	e7f8      	b.n	800c9da <_calloc_r+0x16>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	f7fe f94f 	bl	800ac8c <memset>
 800c9ee:	e7f4      	b.n	800c9da <_calloc_r+0x16>

0800c9f0 <_free_r>:
 800c9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9f2:	2900      	cmp	r1, #0
 800c9f4:	d044      	beq.n	800ca80 <_free_r+0x90>
 800c9f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9fa:	9001      	str	r0, [sp, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f1a1 0404 	sub.w	r4, r1, #4
 800ca02:	bfb8      	it	lt
 800ca04:	18e4      	addlt	r4, r4, r3
 800ca06:	f000 fa9b 	bl	800cf40 <__malloc_lock>
 800ca0a:	4a1e      	ldr	r2, [pc, #120]	; (800ca84 <_free_r+0x94>)
 800ca0c:	9801      	ldr	r0, [sp, #4]
 800ca0e:	6813      	ldr	r3, [r2, #0]
 800ca10:	b933      	cbnz	r3, 800ca20 <_free_r+0x30>
 800ca12:	6063      	str	r3, [r4, #4]
 800ca14:	6014      	str	r4, [r2, #0]
 800ca16:	b003      	add	sp, #12
 800ca18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca1c:	f000 ba96 	b.w	800cf4c <__malloc_unlock>
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	d908      	bls.n	800ca36 <_free_r+0x46>
 800ca24:	6825      	ldr	r5, [r4, #0]
 800ca26:	1961      	adds	r1, r4, r5
 800ca28:	428b      	cmp	r3, r1
 800ca2a:	bf01      	itttt	eq
 800ca2c:	6819      	ldreq	r1, [r3, #0]
 800ca2e:	685b      	ldreq	r3, [r3, #4]
 800ca30:	1949      	addeq	r1, r1, r5
 800ca32:	6021      	streq	r1, [r4, #0]
 800ca34:	e7ed      	b.n	800ca12 <_free_r+0x22>
 800ca36:	461a      	mov	r2, r3
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	b10b      	cbz	r3, 800ca40 <_free_r+0x50>
 800ca3c:	42a3      	cmp	r3, r4
 800ca3e:	d9fa      	bls.n	800ca36 <_free_r+0x46>
 800ca40:	6811      	ldr	r1, [r2, #0]
 800ca42:	1855      	adds	r5, r2, r1
 800ca44:	42a5      	cmp	r5, r4
 800ca46:	d10b      	bne.n	800ca60 <_free_r+0x70>
 800ca48:	6824      	ldr	r4, [r4, #0]
 800ca4a:	4421      	add	r1, r4
 800ca4c:	1854      	adds	r4, r2, r1
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	6011      	str	r1, [r2, #0]
 800ca52:	d1e0      	bne.n	800ca16 <_free_r+0x26>
 800ca54:	681c      	ldr	r4, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	6053      	str	r3, [r2, #4]
 800ca5a:	4421      	add	r1, r4
 800ca5c:	6011      	str	r1, [r2, #0]
 800ca5e:	e7da      	b.n	800ca16 <_free_r+0x26>
 800ca60:	d902      	bls.n	800ca68 <_free_r+0x78>
 800ca62:	230c      	movs	r3, #12
 800ca64:	6003      	str	r3, [r0, #0]
 800ca66:	e7d6      	b.n	800ca16 <_free_r+0x26>
 800ca68:	6825      	ldr	r5, [r4, #0]
 800ca6a:	1961      	adds	r1, r4, r5
 800ca6c:	428b      	cmp	r3, r1
 800ca6e:	bf04      	itt	eq
 800ca70:	6819      	ldreq	r1, [r3, #0]
 800ca72:	685b      	ldreq	r3, [r3, #4]
 800ca74:	6063      	str	r3, [r4, #4]
 800ca76:	bf04      	itt	eq
 800ca78:	1949      	addeq	r1, r1, r5
 800ca7a:	6021      	streq	r1, [r4, #0]
 800ca7c:	6054      	str	r4, [r2, #4]
 800ca7e:	e7ca      	b.n	800ca16 <_free_r+0x26>
 800ca80:	b003      	add	sp, #12
 800ca82:	bd30      	pop	{r4, r5, pc}
 800ca84:	200012b0 	.word	0x200012b0

0800ca88 <sbrk_aligned>:
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	4e0e      	ldr	r6, [pc, #56]	; (800cac4 <sbrk_aligned+0x3c>)
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	6831      	ldr	r1, [r6, #0]
 800ca90:	4605      	mov	r5, r0
 800ca92:	b911      	cbnz	r1, 800ca9a <sbrk_aligned+0x12>
 800ca94:	f000 f9e8 	bl	800ce68 <_sbrk_r>
 800ca98:	6030      	str	r0, [r6, #0]
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f000 f9e3 	bl	800ce68 <_sbrk_r>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d00a      	beq.n	800cabc <sbrk_aligned+0x34>
 800caa6:	1cc4      	adds	r4, r0, #3
 800caa8:	f024 0403 	bic.w	r4, r4, #3
 800caac:	42a0      	cmp	r0, r4
 800caae:	d007      	beq.n	800cac0 <sbrk_aligned+0x38>
 800cab0:	1a21      	subs	r1, r4, r0
 800cab2:	4628      	mov	r0, r5
 800cab4:	f000 f9d8 	bl	800ce68 <_sbrk_r>
 800cab8:	3001      	adds	r0, #1
 800caba:	d101      	bne.n	800cac0 <sbrk_aligned+0x38>
 800cabc:	f04f 34ff 	mov.w	r4, #4294967295
 800cac0:	4620      	mov	r0, r4
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	200012b4 	.word	0x200012b4

0800cac8 <_malloc_r>:
 800cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cacc:	1ccd      	adds	r5, r1, #3
 800cace:	f025 0503 	bic.w	r5, r5, #3
 800cad2:	3508      	adds	r5, #8
 800cad4:	2d0c      	cmp	r5, #12
 800cad6:	bf38      	it	cc
 800cad8:	250c      	movcc	r5, #12
 800cada:	2d00      	cmp	r5, #0
 800cadc:	4607      	mov	r7, r0
 800cade:	db01      	blt.n	800cae4 <_malloc_r+0x1c>
 800cae0:	42a9      	cmp	r1, r5
 800cae2:	d905      	bls.n	800caf0 <_malloc_r+0x28>
 800cae4:	230c      	movs	r3, #12
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	2600      	movs	r6, #0
 800caea:	4630      	mov	r0, r6
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	4e2e      	ldr	r6, [pc, #184]	; (800cbac <_malloc_r+0xe4>)
 800caf2:	f000 fa25 	bl	800cf40 <__malloc_lock>
 800caf6:	6833      	ldr	r3, [r6, #0]
 800caf8:	461c      	mov	r4, r3
 800cafa:	bb34      	cbnz	r4, 800cb4a <_malloc_r+0x82>
 800cafc:	4629      	mov	r1, r5
 800cafe:	4638      	mov	r0, r7
 800cb00:	f7ff ffc2 	bl	800ca88 <sbrk_aligned>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	4604      	mov	r4, r0
 800cb08:	d14d      	bne.n	800cba6 <_malloc_r+0xde>
 800cb0a:	6834      	ldr	r4, [r6, #0]
 800cb0c:	4626      	mov	r6, r4
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d140      	bne.n	800cb94 <_malloc_r+0xcc>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	4631      	mov	r1, r6
 800cb16:	4638      	mov	r0, r7
 800cb18:	eb04 0803 	add.w	r8, r4, r3
 800cb1c:	f000 f9a4 	bl	800ce68 <_sbrk_r>
 800cb20:	4580      	cmp	r8, r0
 800cb22:	d13a      	bne.n	800cb9a <_malloc_r+0xd2>
 800cb24:	6821      	ldr	r1, [r4, #0]
 800cb26:	3503      	adds	r5, #3
 800cb28:	1a6d      	subs	r5, r5, r1
 800cb2a:	f025 0503 	bic.w	r5, r5, #3
 800cb2e:	3508      	adds	r5, #8
 800cb30:	2d0c      	cmp	r5, #12
 800cb32:	bf38      	it	cc
 800cb34:	250c      	movcc	r5, #12
 800cb36:	4629      	mov	r1, r5
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f7ff ffa5 	bl	800ca88 <sbrk_aligned>
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d02b      	beq.n	800cb9a <_malloc_r+0xd2>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	442b      	add	r3, r5
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	e00e      	b.n	800cb68 <_malloc_r+0xa0>
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	1b52      	subs	r2, r2, r5
 800cb4e:	d41e      	bmi.n	800cb8e <_malloc_r+0xc6>
 800cb50:	2a0b      	cmp	r2, #11
 800cb52:	d916      	bls.n	800cb82 <_malloc_r+0xba>
 800cb54:	1961      	adds	r1, r4, r5
 800cb56:	42a3      	cmp	r3, r4
 800cb58:	6025      	str	r5, [r4, #0]
 800cb5a:	bf18      	it	ne
 800cb5c:	6059      	strne	r1, [r3, #4]
 800cb5e:	6863      	ldr	r3, [r4, #4]
 800cb60:	bf08      	it	eq
 800cb62:	6031      	streq	r1, [r6, #0]
 800cb64:	5162      	str	r2, [r4, r5]
 800cb66:	604b      	str	r3, [r1, #4]
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f104 060b 	add.w	r6, r4, #11
 800cb6e:	f000 f9ed 	bl	800cf4c <__malloc_unlock>
 800cb72:	f026 0607 	bic.w	r6, r6, #7
 800cb76:	1d23      	adds	r3, r4, #4
 800cb78:	1af2      	subs	r2, r6, r3
 800cb7a:	d0b6      	beq.n	800caea <_malloc_r+0x22>
 800cb7c:	1b9b      	subs	r3, r3, r6
 800cb7e:	50a3      	str	r3, [r4, r2]
 800cb80:	e7b3      	b.n	800caea <_malloc_r+0x22>
 800cb82:	6862      	ldr	r2, [r4, #4]
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	bf0c      	ite	eq
 800cb88:	6032      	streq	r2, [r6, #0]
 800cb8a:	605a      	strne	r2, [r3, #4]
 800cb8c:	e7ec      	b.n	800cb68 <_malloc_r+0xa0>
 800cb8e:	4623      	mov	r3, r4
 800cb90:	6864      	ldr	r4, [r4, #4]
 800cb92:	e7b2      	b.n	800cafa <_malloc_r+0x32>
 800cb94:	4634      	mov	r4, r6
 800cb96:	6876      	ldr	r6, [r6, #4]
 800cb98:	e7b9      	b.n	800cb0e <_malloc_r+0x46>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	603b      	str	r3, [r7, #0]
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f000 f9d4 	bl	800cf4c <__malloc_unlock>
 800cba4:	e7a1      	b.n	800caea <_malloc_r+0x22>
 800cba6:	6025      	str	r5, [r4, #0]
 800cba8:	e7de      	b.n	800cb68 <_malloc_r+0xa0>
 800cbaa:	bf00      	nop
 800cbac:	200012b0 	.word	0x200012b0

0800cbb0 <__ssputs_r>:
 800cbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb4:	688e      	ldr	r6, [r1, #8]
 800cbb6:	429e      	cmp	r6, r3
 800cbb8:	4682      	mov	sl, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	4690      	mov	r8, r2
 800cbbe:	461f      	mov	r7, r3
 800cbc0:	d838      	bhi.n	800cc34 <__ssputs_r+0x84>
 800cbc2:	898a      	ldrh	r2, [r1, #12]
 800cbc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbc8:	d032      	beq.n	800cc30 <__ssputs_r+0x80>
 800cbca:	6825      	ldr	r5, [r4, #0]
 800cbcc:	6909      	ldr	r1, [r1, #16]
 800cbce:	eba5 0901 	sub.w	r9, r5, r1
 800cbd2:	6965      	ldr	r5, [r4, #20]
 800cbd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbdc:	3301      	adds	r3, #1
 800cbde:	444b      	add	r3, r9
 800cbe0:	106d      	asrs	r5, r5, #1
 800cbe2:	429d      	cmp	r5, r3
 800cbe4:	bf38      	it	cc
 800cbe6:	461d      	movcc	r5, r3
 800cbe8:	0553      	lsls	r3, r2, #21
 800cbea:	d531      	bpl.n	800cc50 <__ssputs_r+0xa0>
 800cbec:	4629      	mov	r1, r5
 800cbee:	f7ff ff6b 	bl	800cac8 <_malloc_r>
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	b950      	cbnz	r0, 800cc0c <__ssputs_r+0x5c>
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	f8ca 3000 	str.w	r3, [sl]
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc0c:	6921      	ldr	r1, [r4, #16]
 800cc0e:	464a      	mov	r2, r9
 800cc10:	f7fe f82e 	bl	800ac70 <memcpy>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	6126      	str	r6, [r4, #16]
 800cc22:	6165      	str	r5, [r4, #20]
 800cc24:	444e      	add	r6, r9
 800cc26:	eba5 0509 	sub.w	r5, r5, r9
 800cc2a:	6026      	str	r6, [r4, #0]
 800cc2c:	60a5      	str	r5, [r4, #8]
 800cc2e:	463e      	mov	r6, r7
 800cc30:	42be      	cmp	r6, r7
 800cc32:	d900      	bls.n	800cc36 <__ssputs_r+0x86>
 800cc34:	463e      	mov	r6, r7
 800cc36:	6820      	ldr	r0, [r4, #0]
 800cc38:	4632      	mov	r2, r6
 800cc3a:	4641      	mov	r1, r8
 800cc3c:	f000 f966 	bl	800cf0c <memmove>
 800cc40:	68a3      	ldr	r3, [r4, #8]
 800cc42:	1b9b      	subs	r3, r3, r6
 800cc44:	60a3      	str	r3, [r4, #8]
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	4433      	add	r3, r6
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	e7db      	b.n	800cc08 <__ssputs_r+0x58>
 800cc50:	462a      	mov	r2, r5
 800cc52:	f000 f981 	bl	800cf58 <_realloc_r>
 800cc56:	4606      	mov	r6, r0
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1e1      	bne.n	800cc20 <__ssputs_r+0x70>
 800cc5c:	6921      	ldr	r1, [r4, #16]
 800cc5e:	4650      	mov	r0, sl
 800cc60:	f7ff fec6 	bl	800c9f0 <_free_r>
 800cc64:	e7c7      	b.n	800cbf6 <__ssputs_r+0x46>
	...

0800cc68 <_svfiprintf_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	4698      	mov	r8, r3
 800cc6e:	898b      	ldrh	r3, [r1, #12]
 800cc70:	061b      	lsls	r3, r3, #24
 800cc72:	b09d      	sub	sp, #116	; 0x74
 800cc74:	4607      	mov	r7, r0
 800cc76:	460d      	mov	r5, r1
 800cc78:	4614      	mov	r4, r2
 800cc7a:	d50e      	bpl.n	800cc9a <_svfiprintf_r+0x32>
 800cc7c:	690b      	ldr	r3, [r1, #16]
 800cc7e:	b963      	cbnz	r3, 800cc9a <_svfiprintf_r+0x32>
 800cc80:	2140      	movs	r1, #64	; 0x40
 800cc82:	f7ff ff21 	bl	800cac8 <_malloc_r>
 800cc86:	6028      	str	r0, [r5, #0]
 800cc88:	6128      	str	r0, [r5, #16]
 800cc8a:	b920      	cbnz	r0, 800cc96 <_svfiprintf_r+0x2e>
 800cc8c:	230c      	movs	r3, #12
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	e0d1      	b.n	800ce3a <_svfiprintf_r+0x1d2>
 800cc96:	2340      	movs	r3, #64	; 0x40
 800cc98:	616b      	str	r3, [r5, #20]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc9e:	2320      	movs	r3, #32
 800cca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cca4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca8:	2330      	movs	r3, #48	; 0x30
 800ccaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce54 <_svfiprintf_r+0x1ec>
 800ccae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb2:	f04f 0901 	mov.w	r9, #1
 800ccb6:	4623      	mov	r3, r4
 800ccb8:	469a      	mov	sl, r3
 800ccba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccbe:	b10a      	cbz	r2, 800ccc4 <_svfiprintf_r+0x5c>
 800ccc0:	2a25      	cmp	r2, #37	; 0x25
 800ccc2:	d1f9      	bne.n	800ccb8 <_svfiprintf_r+0x50>
 800ccc4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc8:	d00b      	beq.n	800cce2 <_svfiprintf_r+0x7a>
 800ccca:	465b      	mov	r3, fp
 800cccc:	4622      	mov	r2, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7ff ff6d 	bl	800cbb0 <__ssputs_r>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	f000 80aa 	beq.w	800ce30 <_svfiprintf_r+0x1c8>
 800ccdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccde:	445a      	add	r2, fp
 800cce0:	9209      	str	r2, [sp, #36]	; 0x24
 800cce2:	f89a 3000 	ldrb.w	r3, [sl]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f000 80a2 	beq.w	800ce30 <_svfiprintf_r+0x1c8>
 800ccec:	2300      	movs	r3, #0
 800ccee:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf6:	f10a 0a01 	add.w	sl, sl, #1
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd02:	931a      	str	r3, [sp, #104]	; 0x68
 800cd04:	4654      	mov	r4, sl
 800cd06:	2205      	movs	r2, #5
 800cd08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0c:	4851      	ldr	r0, [pc, #324]	; (800ce54 <_svfiprintf_r+0x1ec>)
 800cd0e:	f7f3 fa6f 	bl	80001f0 <memchr>
 800cd12:	9a04      	ldr	r2, [sp, #16]
 800cd14:	b9d8      	cbnz	r0, 800cd4e <_svfiprintf_r+0xe6>
 800cd16:	06d0      	lsls	r0, r2, #27
 800cd18:	bf44      	itt	mi
 800cd1a:	2320      	movmi	r3, #32
 800cd1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd20:	0711      	lsls	r1, r2, #28
 800cd22:	bf44      	itt	mi
 800cd24:	232b      	movmi	r3, #43	; 0x2b
 800cd26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd30:	d015      	beq.n	800cd5e <_svfiprintf_r+0xf6>
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	4654      	mov	r4, sl
 800cd36:	2000      	movs	r0, #0
 800cd38:	f04f 0c0a 	mov.w	ip, #10
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd42:	3b30      	subs	r3, #48	; 0x30
 800cd44:	2b09      	cmp	r3, #9
 800cd46:	d94e      	bls.n	800cde6 <_svfiprintf_r+0x17e>
 800cd48:	b1b0      	cbz	r0, 800cd78 <_svfiprintf_r+0x110>
 800cd4a:	9207      	str	r2, [sp, #28]
 800cd4c:	e014      	b.n	800cd78 <_svfiprintf_r+0x110>
 800cd4e:	eba0 0308 	sub.w	r3, r0, r8
 800cd52:	fa09 f303 	lsl.w	r3, r9, r3
 800cd56:	4313      	orrs	r3, r2
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	46a2      	mov	sl, r4
 800cd5c:	e7d2      	b.n	800cd04 <_svfiprintf_r+0x9c>
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	1d19      	adds	r1, r3, #4
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	9103      	str	r1, [sp, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	bfbb      	ittet	lt
 800cd6a:	425b      	neglt	r3, r3
 800cd6c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd70:	9307      	strge	r3, [sp, #28]
 800cd72:	9307      	strlt	r3, [sp, #28]
 800cd74:	bfb8      	it	lt
 800cd76:	9204      	strlt	r2, [sp, #16]
 800cd78:	7823      	ldrb	r3, [r4, #0]
 800cd7a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd7c:	d10c      	bne.n	800cd98 <_svfiprintf_r+0x130>
 800cd7e:	7863      	ldrb	r3, [r4, #1]
 800cd80:	2b2a      	cmp	r3, #42	; 0x2a
 800cd82:	d135      	bne.n	800cdf0 <_svfiprintf_r+0x188>
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	1d1a      	adds	r2, r3, #4
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	9203      	str	r2, [sp, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	bfb8      	it	lt
 800cd90:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd94:	3402      	adds	r4, #2
 800cd96:	9305      	str	r3, [sp, #20]
 800cd98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce64 <_svfiprintf_r+0x1fc>
 800cd9c:	7821      	ldrb	r1, [r4, #0]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	4650      	mov	r0, sl
 800cda2:	f7f3 fa25 	bl	80001f0 <memchr>
 800cda6:	b140      	cbz	r0, 800cdba <_svfiprintf_r+0x152>
 800cda8:	2340      	movs	r3, #64	; 0x40
 800cdaa:	eba0 000a 	sub.w	r0, r0, sl
 800cdae:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb2:	9b04      	ldr	r3, [sp, #16]
 800cdb4:	4303      	orrs	r3, r0
 800cdb6:	3401      	adds	r4, #1
 800cdb8:	9304      	str	r3, [sp, #16]
 800cdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdbe:	4826      	ldr	r0, [pc, #152]	; (800ce58 <_svfiprintf_r+0x1f0>)
 800cdc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc4:	2206      	movs	r2, #6
 800cdc6:	f7f3 fa13 	bl	80001f0 <memchr>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d038      	beq.n	800ce40 <_svfiprintf_r+0x1d8>
 800cdce:	4b23      	ldr	r3, [pc, #140]	; (800ce5c <_svfiprintf_r+0x1f4>)
 800cdd0:	bb1b      	cbnz	r3, 800ce1a <_svfiprintf_r+0x1b2>
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	3307      	adds	r3, #7
 800cdd6:	f023 0307 	bic.w	r3, r3, #7
 800cdda:	3308      	adds	r3, #8
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde0:	4433      	add	r3, r6
 800cde2:	9309      	str	r3, [sp, #36]	; 0x24
 800cde4:	e767      	b.n	800ccb6 <_svfiprintf_r+0x4e>
 800cde6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdea:	460c      	mov	r4, r1
 800cdec:	2001      	movs	r0, #1
 800cdee:	e7a5      	b.n	800cd3c <_svfiprintf_r+0xd4>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	3401      	adds	r4, #1
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	f04f 0c0a 	mov.w	ip, #10
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce02:	3a30      	subs	r2, #48	; 0x30
 800ce04:	2a09      	cmp	r2, #9
 800ce06:	d903      	bls.n	800ce10 <_svfiprintf_r+0x1a8>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0c5      	beq.n	800cd98 <_svfiprintf_r+0x130>
 800ce0c:	9105      	str	r1, [sp, #20]
 800ce0e:	e7c3      	b.n	800cd98 <_svfiprintf_r+0x130>
 800ce10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce14:	4604      	mov	r4, r0
 800ce16:	2301      	movs	r3, #1
 800ce18:	e7f0      	b.n	800cdfc <_svfiprintf_r+0x194>
 800ce1a:	ab03      	add	r3, sp, #12
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	462a      	mov	r2, r5
 800ce20:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <_svfiprintf_r+0x1f8>)
 800ce22:	a904      	add	r1, sp, #16
 800ce24:	4638      	mov	r0, r7
 800ce26:	f7fd ffd9 	bl	800addc <_printf_float>
 800ce2a:	1c42      	adds	r2, r0, #1
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	d1d6      	bne.n	800cdde <_svfiprintf_r+0x176>
 800ce30:	89ab      	ldrh	r3, [r5, #12]
 800ce32:	065b      	lsls	r3, r3, #25
 800ce34:	f53f af2c 	bmi.w	800cc90 <_svfiprintf_r+0x28>
 800ce38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3a:	b01d      	add	sp, #116	; 0x74
 800ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce40:	ab03      	add	r3, sp, #12
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	462a      	mov	r2, r5
 800ce46:	4b06      	ldr	r3, [pc, #24]	; (800ce60 <_svfiprintf_r+0x1f8>)
 800ce48:	a904      	add	r1, sp, #16
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	f7fe fa6a 	bl	800b324 <_printf_i>
 800ce50:	e7eb      	b.n	800ce2a <_svfiprintf_r+0x1c2>
 800ce52:	bf00      	nop
 800ce54:	0800df9c 	.word	0x0800df9c
 800ce58:	0800dfa6 	.word	0x0800dfa6
 800ce5c:	0800addd 	.word	0x0800addd
 800ce60:	0800cbb1 	.word	0x0800cbb1
 800ce64:	0800dfa2 	.word	0x0800dfa2

0800ce68 <_sbrk_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d06      	ldr	r5, [pc, #24]	; (800ce84 <_sbrk_r+0x1c>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f7f7 fde4 	bl	8004a40 <_sbrk>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_sbrk_r+0x1a>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_sbrk_r+0x1a>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	200012b8 	.word	0x200012b8

0800ce88 <__assert_func>:
 800ce88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b09      	ldr	r3, [pc, #36]	; (800ceb4 <__assert_func+0x2c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	68d8      	ldr	r0, [r3, #12]
 800ce96:	b14c      	cbz	r4, 800ceac <__assert_func+0x24>
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <__assert_func+0x30>)
 800ce9a:	9100      	str	r1, [sp, #0]
 800ce9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cea0:	4906      	ldr	r1, [pc, #24]	; (800cebc <__assert_func+0x34>)
 800cea2:	462b      	mov	r3, r5
 800cea4:	f000 f80e 	bl	800cec4 <fiprintf>
 800cea8:	f000 faac 	bl	800d404 <abort>
 800ceac:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <__assert_func+0x38>)
 800ceae:	461c      	mov	r4, r3
 800ceb0:	e7f3      	b.n	800ce9a <__assert_func+0x12>
 800ceb2:	bf00      	nop
 800ceb4:	20000010 	.word	0x20000010
 800ceb8:	0800dfad 	.word	0x0800dfad
 800cebc:	0800dfba 	.word	0x0800dfba
 800cec0:	0800dfe8 	.word	0x0800dfe8

0800cec4 <fiprintf>:
 800cec4:	b40e      	push	{r1, r2, r3}
 800cec6:	b503      	push	{r0, r1, lr}
 800cec8:	4601      	mov	r1, r0
 800ceca:	ab03      	add	r3, sp, #12
 800cecc:	4805      	ldr	r0, [pc, #20]	; (800cee4 <fiprintf+0x20>)
 800cece:	f853 2b04 	ldr.w	r2, [r3], #4
 800ced2:	6800      	ldr	r0, [r0, #0]
 800ced4:	9301      	str	r3, [sp, #4]
 800ced6:	f000 f897 	bl	800d008 <_vfiprintf_r>
 800ceda:	b002      	add	sp, #8
 800cedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee0:	b003      	add	sp, #12
 800cee2:	4770      	bx	lr
 800cee4:	20000010 	.word	0x20000010

0800cee8 <__ascii_mbtowc>:
 800cee8:	b082      	sub	sp, #8
 800ceea:	b901      	cbnz	r1, 800ceee <__ascii_mbtowc+0x6>
 800ceec:	a901      	add	r1, sp, #4
 800ceee:	b142      	cbz	r2, 800cf02 <__ascii_mbtowc+0x1a>
 800cef0:	b14b      	cbz	r3, 800cf06 <__ascii_mbtowc+0x1e>
 800cef2:	7813      	ldrb	r3, [r2, #0]
 800cef4:	600b      	str	r3, [r1, #0]
 800cef6:	7812      	ldrb	r2, [r2, #0]
 800cef8:	1e10      	subs	r0, r2, #0
 800cefa:	bf18      	it	ne
 800cefc:	2001      	movne	r0, #1
 800cefe:	b002      	add	sp, #8
 800cf00:	4770      	bx	lr
 800cf02:	4610      	mov	r0, r2
 800cf04:	e7fb      	b.n	800cefe <__ascii_mbtowc+0x16>
 800cf06:	f06f 0001 	mvn.w	r0, #1
 800cf0a:	e7f8      	b.n	800cefe <__ascii_mbtowc+0x16>

0800cf0c <memmove>:
 800cf0c:	4288      	cmp	r0, r1
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	eb01 0402 	add.w	r4, r1, r2
 800cf14:	d902      	bls.n	800cf1c <memmove+0x10>
 800cf16:	4284      	cmp	r4, r0
 800cf18:	4623      	mov	r3, r4
 800cf1a:	d807      	bhi.n	800cf2c <memmove+0x20>
 800cf1c:	1e43      	subs	r3, r0, #1
 800cf1e:	42a1      	cmp	r1, r4
 800cf20:	d008      	beq.n	800cf34 <memmove+0x28>
 800cf22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf2a:	e7f8      	b.n	800cf1e <memmove+0x12>
 800cf2c:	4402      	add	r2, r0
 800cf2e:	4601      	mov	r1, r0
 800cf30:	428a      	cmp	r2, r1
 800cf32:	d100      	bne.n	800cf36 <memmove+0x2a>
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf3e:	e7f7      	b.n	800cf30 <memmove+0x24>

0800cf40 <__malloc_lock>:
 800cf40:	4801      	ldr	r0, [pc, #4]	; (800cf48 <__malloc_lock+0x8>)
 800cf42:	f000 bc1f 	b.w	800d784 <__retarget_lock_acquire_recursive>
 800cf46:	bf00      	nop
 800cf48:	200012bc 	.word	0x200012bc

0800cf4c <__malloc_unlock>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	; (800cf54 <__malloc_unlock+0x8>)
 800cf4e:	f000 bc1a 	b.w	800d786 <__retarget_lock_release_recursive>
 800cf52:	bf00      	nop
 800cf54:	200012bc 	.word	0x200012bc

0800cf58 <_realloc_r>:
 800cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5c:	4680      	mov	r8, r0
 800cf5e:	4614      	mov	r4, r2
 800cf60:	460e      	mov	r6, r1
 800cf62:	b921      	cbnz	r1, 800cf6e <_realloc_r+0x16>
 800cf64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf68:	4611      	mov	r1, r2
 800cf6a:	f7ff bdad 	b.w	800cac8 <_malloc_r>
 800cf6e:	b92a      	cbnz	r2, 800cf7c <_realloc_r+0x24>
 800cf70:	f7ff fd3e 	bl	800c9f0 <_free_r>
 800cf74:	4625      	mov	r5, r4
 800cf76:	4628      	mov	r0, r5
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	f000 fc6a 	bl	800d854 <_malloc_usable_size_r>
 800cf80:	4284      	cmp	r4, r0
 800cf82:	4607      	mov	r7, r0
 800cf84:	d802      	bhi.n	800cf8c <_realloc_r+0x34>
 800cf86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf8a:	d812      	bhi.n	800cfb2 <_realloc_r+0x5a>
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4640      	mov	r0, r8
 800cf90:	f7ff fd9a 	bl	800cac8 <_malloc_r>
 800cf94:	4605      	mov	r5, r0
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0ed      	beq.n	800cf76 <_realloc_r+0x1e>
 800cf9a:	42bc      	cmp	r4, r7
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	bf28      	it	cs
 800cfa2:	463a      	movcs	r2, r7
 800cfa4:	f7fd fe64 	bl	800ac70 <memcpy>
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4640      	mov	r0, r8
 800cfac:	f7ff fd20 	bl	800c9f0 <_free_r>
 800cfb0:	e7e1      	b.n	800cf76 <_realloc_r+0x1e>
 800cfb2:	4635      	mov	r5, r6
 800cfb4:	e7df      	b.n	800cf76 <_realloc_r+0x1e>

0800cfb6 <__sfputc_r>:
 800cfb6:	6893      	ldr	r3, [r2, #8]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	b410      	push	{r4}
 800cfbe:	6093      	str	r3, [r2, #8]
 800cfc0:	da08      	bge.n	800cfd4 <__sfputc_r+0x1e>
 800cfc2:	6994      	ldr	r4, [r2, #24]
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	db01      	blt.n	800cfcc <__sfputc_r+0x16>
 800cfc8:	290a      	cmp	r1, #10
 800cfca:	d103      	bne.n	800cfd4 <__sfputc_r+0x1e>
 800cfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd0:	f000 b94a 	b.w	800d268 <__swbuf_r>
 800cfd4:	6813      	ldr	r3, [r2, #0]
 800cfd6:	1c58      	adds	r0, r3, #1
 800cfd8:	6010      	str	r0, [r2, #0]
 800cfda:	7019      	strb	r1, [r3, #0]
 800cfdc:	4608      	mov	r0, r1
 800cfde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <__sfputs_r>:
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	4614      	mov	r4, r2
 800cfec:	18d5      	adds	r5, r2, r3
 800cfee:	42ac      	cmp	r4, r5
 800cff0:	d101      	bne.n	800cff6 <__sfputs_r+0x12>
 800cff2:	2000      	movs	r0, #0
 800cff4:	e007      	b.n	800d006 <__sfputs_r+0x22>
 800cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffa:	463a      	mov	r2, r7
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7ff ffda 	bl	800cfb6 <__sfputc_r>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d1f3      	bne.n	800cfee <__sfputs_r+0xa>
 800d006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d008 <_vfiprintf_r>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	460d      	mov	r5, r1
 800d00e:	b09d      	sub	sp, #116	; 0x74
 800d010:	4614      	mov	r4, r2
 800d012:	4698      	mov	r8, r3
 800d014:	4606      	mov	r6, r0
 800d016:	b118      	cbz	r0, 800d020 <_vfiprintf_r+0x18>
 800d018:	6983      	ldr	r3, [r0, #24]
 800d01a:	b90b      	cbnz	r3, 800d020 <_vfiprintf_r+0x18>
 800d01c:	f000 fb14 	bl	800d648 <__sinit>
 800d020:	4b89      	ldr	r3, [pc, #548]	; (800d248 <_vfiprintf_r+0x240>)
 800d022:	429d      	cmp	r5, r3
 800d024:	d11b      	bne.n	800d05e <_vfiprintf_r+0x56>
 800d026:	6875      	ldr	r5, [r6, #4]
 800d028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02a:	07d9      	lsls	r1, r3, #31
 800d02c:	d405      	bmi.n	800d03a <_vfiprintf_r+0x32>
 800d02e:	89ab      	ldrh	r3, [r5, #12]
 800d030:	059a      	lsls	r2, r3, #22
 800d032:	d402      	bmi.n	800d03a <_vfiprintf_r+0x32>
 800d034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d036:	f000 fba5 	bl	800d784 <__retarget_lock_acquire_recursive>
 800d03a:	89ab      	ldrh	r3, [r5, #12]
 800d03c:	071b      	lsls	r3, r3, #28
 800d03e:	d501      	bpl.n	800d044 <_vfiprintf_r+0x3c>
 800d040:	692b      	ldr	r3, [r5, #16]
 800d042:	b9eb      	cbnz	r3, 800d080 <_vfiprintf_r+0x78>
 800d044:	4629      	mov	r1, r5
 800d046:	4630      	mov	r0, r6
 800d048:	f000 f96e 	bl	800d328 <__swsetup_r>
 800d04c:	b1c0      	cbz	r0, 800d080 <_vfiprintf_r+0x78>
 800d04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d050:	07dc      	lsls	r4, r3, #31
 800d052:	d50e      	bpl.n	800d072 <_vfiprintf_r+0x6a>
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	b01d      	add	sp, #116	; 0x74
 800d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	4b7b      	ldr	r3, [pc, #492]	; (800d24c <_vfiprintf_r+0x244>)
 800d060:	429d      	cmp	r5, r3
 800d062:	d101      	bne.n	800d068 <_vfiprintf_r+0x60>
 800d064:	68b5      	ldr	r5, [r6, #8]
 800d066:	e7df      	b.n	800d028 <_vfiprintf_r+0x20>
 800d068:	4b79      	ldr	r3, [pc, #484]	; (800d250 <_vfiprintf_r+0x248>)
 800d06a:	429d      	cmp	r5, r3
 800d06c:	bf08      	it	eq
 800d06e:	68f5      	ldreq	r5, [r6, #12]
 800d070:	e7da      	b.n	800d028 <_vfiprintf_r+0x20>
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	0598      	lsls	r0, r3, #22
 800d076:	d4ed      	bmi.n	800d054 <_vfiprintf_r+0x4c>
 800d078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d07a:	f000 fb84 	bl	800d786 <__retarget_lock_release_recursive>
 800d07e:	e7e9      	b.n	800d054 <_vfiprintf_r+0x4c>
 800d080:	2300      	movs	r3, #0
 800d082:	9309      	str	r3, [sp, #36]	; 0x24
 800d084:	2320      	movs	r3, #32
 800d086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d08e:	2330      	movs	r3, #48	; 0x30
 800d090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d254 <_vfiprintf_r+0x24c>
 800d094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d098:	f04f 0901 	mov.w	r9, #1
 800d09c:	4623      	mov	r3, r4
 800d09e:	469a      	mov	sl, r3
 800d0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0a4:	b10a      	cbz	r2, 800d0aa <_vfiprintf_r+0xa2>
 800d0a6:	2a25      	cmp	r2, #37	; 0x25
 800d0a8:	d1f9      	bne.n	800d09e <_vfiprintf_r+0x96>
 800d0aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d0ae:	d00b      	beq.n	800d0c8 <_vfiprintf_r+0xc0>
 800d0b0:	465b      	mov	r3, fp
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f7ff ff94 	bl	800cfe4 <__sfputs_r>
 800d0bc:	3001      	adds	r0, #1
 800d0be:	f000 80aa 	beq.w	800d216 <_vfiprintf_r+0x20e>
 800d0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0c4:	445a      	add	r2, fp
 800d0c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 80a2 	beq.w	800d216 <_vfiprintf_r+0x20e>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0dc:	f10a 0a01 	add.w	sl, sl, #1
 800d0e0:	9304      	str	r3, [sp, #16]
 800d0e2:	9307      	str	r3, [sp, #28]
 800d0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d0ea:	4654      	mov	r4, sl
 800d0ec:	2205      	movs	r2, #5
 800d0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f2:	4858      	ldr	r0, [pc, #352]	; (800d254 <_vfiprintf_r+0x24c>)
 800d0f4:	f7f3 f87c 	bl	80001f0 <memchr>
 800d0f8:	9a04      	ldr	r2, [sp, #16]
 800d0fa:	b9d8      	cbnz	r0, 800d134 <_vfiprintf_r+0x12c>
 800d0fc:	06d1      	lsls	r1, r2, #27
 800d0fe:	bf44      	itt	mi
 800d100:	2320      	movmi	r3, #32
 800d102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d106:	0713      	lsls	r3, r2, #28
 800d108:	bf44      	itt	mi
 800d10a:	232b      	movmi	r3, #43	; 0x2b
 800d10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d110:	f89a 3000 	ldrb.w	r3, [sl]
 800d114:	2b2a      	cmp	r3, #42	; 0x2a
 800d116:	d015      	beq.n	800d144 <_vfiprintf_r+0x13c>
 800d118:	9a07      	ldr	r2, [sp, #28]
 800d11a:	4654      	mov	r4, sl
 800d11c:	2000      	movs	r0, #0
 800d11e:	f04f 0c0a 	mov.w	ip, #10
 800d122:	4621      	mov	r1, r4
 800d124:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d128:	3b30      	subs	r3, #48	; 0x30
 800d12a:	2b09      	cmp	r3, #9
 800d12c:	d94e      	bls.n	800d1cc <_vfiprintf_r+0x1c4>
 800d12e:	b1b0      	cbz	r0, 800d15e <_vfiprintf_r+0x156>
 800d130:	9207      	str	r2, [sp, #28]
 800d132:	e014      	b.n	800d15e <_vfiprintf_r+0x156>
 800d134:	eba0 0308 	sub.w	r3, r0, r8
 800d138:	fa09 f303 	lsl.w	r3, r9, r3
 800d13c:	4313      	orrs	r3, r2
 800d13e:	9304      	str	r3, [sp, #16]
 800d140:	46a2      	mov	sl, r4
 800d142:	e7d2      	b.n	800d0ea <_vfiprintf_r+0xe2>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	1d19      	adds	r1, r3, #4
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	9103      	str	r1, [sp, #12]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	bfbb      	ittet	lt
 800d150:	425b      	neglt	r3, r3
 800d152:	f042 0202 	orrlt.w	r2, r2, #2
 800d156:	9307      	strge	r3, [sp, #28]
 800d158:	9307      	strlt	r3, [sp, #28]
 800d15a:	bfb8      	it	lt
 800d15c:	9204      	strlt	r2, [sp, #16]
 800d15e:	7823      	ldrb	r3, [r4, #0]
 800d160:	2b2e      	cmp	r3, #46	; 0x2e
 800d162:	d10c      	bne.n	800d17e <_vfiprintf_r+0x176>
 800d164:	7863      	ldrb	r3, [r4, #1]
 800d166:	2b2a      	cmp	r3, #42	; 0x2a
 800d168:	d135      	bne.n	800d1d6 <_vfiprintf_r+0x1ce>
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	1d1a      	adds	r2, r3, #4
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	9203      	str	r2, [sp, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	bfb8      	it	lt
 800d176:	f04f 33ff 	movlt.w	r3, #4294967295
 800d17a:	3402      	adds	r4, #2
 800d17c:	9305      	str	r3, [sp, #20]
 800d17e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d264 <_vfiprintf_r+0x25c>
 800d182:	7821      	ldrb	r1, [r4, #0]
 800d184:	2203      	movs	r2, #3
 800d186:	4650      	mov	r0, sl
 800d188:	f7f3 f832 	bl	80001f0 <memchr>
 800d18c:	b140      	cbz	r0, 800d1a0 <_vfiprintf_r+0x198>
 800d18e:	2340      	movs	r3, #64	; 0x40
 800d190:	eba0 000a 	sub.w	r0, r0, sl
 800d194:	fa03 f000 	lsl.w	r0, r3, r0
 800d198:	9b04      	ldr	r3, [sp, #16]
 800d19a:	4303      	orrs	r3, r0
 800d19c:	3401      	adds	r4, #1
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a4:	482c      	ldr	r0, [pc, #176]	; (800d258 <_vfiprintf_r+0x250>)
 800d1a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1aa:	2206      	movs	r2, #6
 800d1ac:	f7f3 f820 	bl	80001f0 <memchr>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d03f      	beq.n	800d234 <_vfiprintf_r+0x22c>
 800d1b4:	4b29      	ldr	r3, [pc, #164]	; (800d25c <_vfiprintf_r+0x254>)
 800d1b6:	bb1b      	cbnz	r3, 800d200 <_vfiprintf_r+0x1f8>
 800d1b8:	9b03      	ldr	r3, [sp, #12]
 800d1ba:	3307      	adds	r3, #7
 800d1bc:	f023 0307 	bic.w	r3, r3, #7
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	9303      	str	r3, [sp, #12]
 800d1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c6:	443b      	add	r3, r7
 800d1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ca:	e767      	b.n	800d09c <_vfiprintf_r+0x94>
 800d1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	e7a5      	b.n	800d122 <_vfiprintf_r+0x11a>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	3401      	adds	r4, #1
 800d1da:	9305      	str	r3, [sp, #20]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	f04f 0c0a 	mov.w	ip, #10
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1e8:	3a30      	subs	r2, #48	; 0x30
 800d1ea:	2a09      	cmp	r2, #9
 800d1ec:	d903      	bls.n	800d1f6 <_vfiprintf_r+0x1ee>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0c5      	beq.n	800d17e <_vfiprintf_r+0x176>
 800d1f2:	9105      	str	r1, [sp, #20]
 800d1f4:	e7c3      	b.n	800d17e <_vfiprintf_r+0x176>
 800d1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e7f0      	b.n	800d1e2 <_vfiprintf_r+0x1da>
 800d200:	ab03      	add	r3, sp, #12
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	462a      	mov	r2, r5
 800d206:	4b16      	ldr	r3, [pc, #88]	; (800d260 <_vfiprintf_r+0x258>)
 800d208:	a904      	add	r1, sp, #16
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7fd fde6 	bl	800addc <_printf_float>
 800d210:	4607      	mov	r7, r0
 800d212:	1c78      	adds	r0, r7, #1
 800d214:	d1d6      	bne.n	800d1c4 <_vfiprintf_r+0x1bc>
 800d216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d218:	07d9      	lsls	r1, r3, #31
 800d21a:	d405      	bmi.n	800d228 <_vfiprintf_r+0x220>
 800d21c:	89ab      	ldrh	r3, [r5, #12]
 800d21e:	059a      	lsls	r2, r3, #22
 800d220:	d402      	bmi.n	800d228 <_vfiprintf_r+0x220>
 800d222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d224:	f000 faaf 	bl	800d786 <__retarget_lock_release_recursive>
 800d228:	89ab      	ldrh	r3, [r5, #12]
 800d22a:	065b      	lsls	r3, r3, #25
 800d22c:	f53f af12 	bmi.w	800d054 <_vfiprintf_r+0x4c>
 800d230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d232:	e711      	b.n	800d058 <_vfiprintf_r+0x50>
 800d234:	ab03      	add	r3, sp, #12
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	462a      	mov	r2, r5
 800d23a:	4b09      	ldr	r3, [pc, #36]	; (800d260 <_vfiprintf_r+0x258>)
 800d23c:	a904      	add	r1, sp, #16
 800d23e:	4630      	mov	r0, r6
 800d240:	f7fe f870 	bl	800b324 <_printf_i>
 800d244:	e7e4      	b.n	800d210 <_vfiprintf_r+0x208>
 800d246:	bf00      	nop
 800d248:	0800e114 	.word	0x0800e114
 800d24c:	0800e134 	.word	0x0800e134
 800d250:	0800e0f4 	.word	0x0800e0f4
 800d254:	0800df9c 	.word	0x0800df9c
 800d258:	0800dfa6 	.word	0x0800dfa6
 800d25c:	0800addd 	.word	0x0800addd
 800d260:	0800cfe5 	.word	0x0800cfe5
 800d264:	0800dfa2 	.word	0x0800dfa2

0800d268 <__swbuf_r>:
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	460e      	mov	r6, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	4605      	mov	r5, r0
 800d270:	b118      	cbz	r0, 800d27a <__swbuf_r+0x12>
 800d272:	6983      	ldr	r3, [r0, #24]
 800d274:	b90b      	cbnz	r3, 800d27a <__swbuf_r+0x12>
 800d276:	f000 f9e7 	bl	800d648 <__sinit>
 800d27a:	4b21      	ldr	r3, [pc, #132]	; (800d300 <__swbuf_r+0x98>)
 800d27c:	429c      	cmp	r4, r3
 800d27e:	d12b      	bne.n	800d2d8 <__swbuf_r+0x70>
 800d280:	686c      	ldr	r4, [r5, #4]
 800d282:	69a3      	ldr	r3, [r4, #24]
 800d284:	60a3      	str	r3, [r4, #8]
 800d286:	89a3      	ldrh	r3, [r4, #12]
 800d288:	071a      	lsls	r2, r3, #28
 800d28a:	d52f      	bpl.n	800d2ec <__swbuf_r+0x84>
 800d28c:	6923      	ldr	r3, [r4, #16]
 800d28e:	b36b      	cbz	r3, 800d2ec <__swbuf_r+0x84>
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	6820      	ldr	r0, [r4, #0]
 800d294:	1ac0      	subs	r0, r0, r3
 800d296:	6963      	ldr	r3, [r4, #20]
 800d298:	b2f6      	uxtb	r6, r6
 800d29a:	4283      	cmp	r3, r0
 800d29c:	4637      	mov	r7, r6
 800d29e:	dc04      	bgt.n	800d2aa <__swbuf_r+0x42>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f93c 	bl	800d520 <_fflush_r>
 800d2a8:	bb30      	cbnz	r0, 800d2f8 <__swbuf_r+0x90>
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	60a3      	str	r3, [r4, #8]
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	6022      	str	r2, [r4, #0]
 800d2b6:	701e      	strb	r6, [r3, #0]
 800d2b8:	6963      	ldr	r3, [r4, #20]
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	4283      	cmp	r3, r0
 800d2be:	d004      	beq.n	800d2ca <__swbuf_r+0x62>
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	07db      	lsls	r3, r3, #31
 800d2c4:	d506      	bpl.n	800d2d4 <__swbuf_r+0x6c>
 800d2c6:	2e0a      	cmp	r6, #10
 800d2c8:	d104      	bne.n	800d2d4 <__swbuf_r+0x6c>
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f000 f927 	bl	800d520 <_fflush_r>
 800d2d2:	b988      	cbnz	r0, 800d2f8 <__swbuf_r+0x90>
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <__swbuf_r+0x9c>)
 800d2da:	429c      	cmp	r4, r3
 800d2dc:	d101      	bne.n	800d2e2 <__swbuf_r+0x7a>
 800d2de:	68ac      	ldr	r4, [r5, #8]
 800d2e0:	e7cf      	b.n	800d282 <__swbuf_r+0x1a>
 800d2e2:	4b09      	ldr	r3, [pc, #36]	; (800d308 <__swbuf_r+0xa0>)
 800d2e4:	429c      	cmp	r4, r3
 800d2e6:	bf08      	it	eq
 800d2e8:	68ec      	ldreq	r4, [r5, #12]
 800d2ea:	e7ca      	b.n	800d282 <__swbuf_r+0x1a>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 f81a 	bl	800d328 <__swsetup_r>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0cb      	beq.n	800d290 <__swbuf_r+0x28>
 800d2f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2fc:	e7ea      	b.n	800d2d4 <__swbuf_r+0x6c>
 800d2fe:	bf00      	nop
 800d300:	0800e114 	.word	0x0800e114
 800d304:	0800e134 	.word	0x0800e134
 800d308:	0800e0f4 	.word	0x0800e0f4

0800d30c <__ascii_wctomb>:
 800d30c:	b149      	cbz	r1, 800d322 <__ascii_wctomb+0x16>
 800d30e:	2aff      	cmp	r2, #255	; 0xff
 800d310:	bf85      	ittet	hi
 800d312:	238a      	movhi	r3, #138	; 0x8a
 800d314:	6003      	strhi	r3, [r0, #0]
 800d316:	700a      	strbls	r2, [r1, #0]
 800d318:	f04f 30ff 	movhi.w	r0, #4294967295
 800d31c:	bf98      	it	ls
 800d31e:	2001      	movls	r0, #1
 800d320:	4770      	bx	lr
 800d322:	4608      	mov	r0, r1
 800d324:	4770      	bx	lr
	...

0800d328 <__swsetup_r>:
 800d328:	4b32      	ldr	r3, [pc, #200]	; (800d3f4 <__swsetup_r+0xcc>)
 800d32a:	b570      	push	{r4, r5, r6, lr}
 800d32c:	681d      	ldr	r5, [r3, #0]
 800d32e:	4606      	mov	r6, r0
 800d330:	460c      	mov	r4, r1
 800d332:	b125      	cbz	r5, 800d33e <__swsetup_r+0x16>
 800d334:	69ab      	ldr	r3, [r5, #24]
 800d336:	b913      	cbnz	r3, 800d33e <__swsetup_r+0x16>
 800d338:	4628      	mov	r0, r5
 800d33a:	f000 f985 	bl	800d648 <__sinit>
 800d33e:	4b2e      	ldr	r3, [pc, #184]	; (800d3f8 <__swsetup_r+0xd0>)
 800d340:	429c      	cmp	r4, r3
 800d342:	d10f      	bne.n	800d364 <__swsetup_r+0x3c>
 800d344:	686c      	ldr	r4, [r5, #4]
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d34c:	0719      	lsls	r1, r3, #28
 800d34e:	d42c      	bmi.n	800d3aa <__swsetup_r+0x82>
 800d350:	06dd      	lsls	r5, r3, #27
 800d352:	d411      	bmi.n	800d378 <__swsetup_r+0x50>
 800d354:	2309      	movs	r3, #9
 800d356:	6033      	str	r3, [r6, #0]
 800d358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d35c:	81a3      	strh	r3, [r4, #12]
 800d35e:	f04f 30ff 	mov.w	r0, #4294967295
 800d362:	e03e      	b.n	800d3e2 <__swsetup_r+0xba>
 800d364:	4b25      	ldr	r3, [pc, #148]	; (800d3fc <__swsetup_r+0xd4>)
 800d366:	429c      	cmp	r4, r3
 800d368:	d101      	bne.n	800d36e <__swsetup_r+0x46>
 800d36a:	68ac      	ldr	r4, [r5, #8]
 800d36c:	e7eb      	b.n	800d346 <__swsetup_r+0x1e>
 800d36e:	4b24      	ldr	r3, [pc, #144]	; (800d400 <__swsetup_r+0xd8>)
 800d370:	429c      	cmp	r4, r3
 800d372:	bf08      	it	eq
 800d374:	68ec      	ldreq	r4, [r5, #12]
 800d376:	e7e6      	b.n	800d346 <__swsetup_r+0x1e>
 800d378:	0758      	lsls	r0, r3, #29
 800d37a:	d512      	bpl.n	800d3a2 <__swsetup_r+0x7a>
 800d37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d37e:	b141      	cbz	r1, 800d392 <__swsetup_r+0x6a>
 800d380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d384:	4299      	cmp	r1, r3
 800d386:	d002      	beq.n	800d38e <__swsetup_r+0x66>
 800d388:	4630      	mov	r0, r6
 800d38a:	f7ff fb31 	bl	800c9f0 <_free_r>
 800d38e:	2300      	movs	r3, #0
 800d390:	6363      	str	r3, [r4, #52]	; 0x34
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d398:	81a3      	strh	r3, [r4, #12]
 800d39a:	2300      	movs	r3, #0
 800d39c:	6063      	str	r3, [r4, #4]
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	f043 0308 	orr.w	r3, r3, #8
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	b94b      	cbnz	r3, 800d3c2 <__swsetup_r+0x9a>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3b8:	d003      	beq.n	800d3c2 <__swsetup_r+0x9a>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f000 fa09 	bl	800d7d4 <__smakebuf_r>
 800d3c2:	89a0      	ldrh	r0, [r4, #12]
 800d3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3c8:	f010 0301 	ands.w	r3, r0, #1
 800d3cc:	d00a      	beq.n	800d3e4 <__swsetup_r+0xbc>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60a3      	str	r3, [r4, #8]
 800d3d2:	6963      	ldr	r3, [r4, #20]
 800d3d4:	425b      	negs	r3, r3
 800d3d6:	61a3      	str	r3, [r4, #24]
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	b943      	cbnz	r3, 800d3ee <__swsetup_r+0xc6>
 800d3dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3e0:	d1ba      	bne.n	800d358 <__swsetup_r+0x30>
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	0781      	lsls	r1, r0, #30
 800d3e6:	bf58      	it	pl
 800d3e8:	6963      	ldrpl	r3, [r4, #20]
 800d3ea:	60a3      	str	r3, [r4, #8]
 800d3ec:	e7f4      	b.n	800d3d8 <__swsetup_r+0xb0>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	e7f7      	b.n	800d3e2 <__swsetup_r+0xba>
 800d3f2:	bf00      	nop
 800d3f4:	20000010 	.word	0x20000010
 800d3f8:	0800e114 	.word	0x0800e114
 800d3fc:	0800e134 	.word	0x0800e134
 800d400:	0800e0f4 	.word	0x0800e0f4

0800d404 <abort>:
 800d404:	b508      	push	{r3, lr}
 800d406:	2006      	movs	r0, #6
 800d408:	f000 fa54 	bl	800d8b4 <raise>
 800d40c:	2001      	movs	r0, #1
 800d40e:	f7f7 fa9f 	bl	8004950 <_exit>
	...

0800d414 <__sflush_r>:
 800d414:	898a      	ldrh	r2, [r1, #12]
 800d416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	4605      	mov	r5, r0
 800d41c:	0710      	lsls	r0, r2, #28
 800d41e:	460c      	mov	r4, r1
 800d420:	d458      	bmi.n	800d4d4 <__sflush_r+0xc0>
 800d422:	684b      	ldr	r3, [r1, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	dc05      	bgt.n	800d434 <__sflush_r+0x20>
 800d428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dc02      	bgt.n	800d434 <__sflush_r+0x20>
 800d42e:	2000      	movs	r0, #0
 800d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d436:	2e00      	cmp	r6, #0
 800d438:	d0f9      	beq.n	800d42e <__sflush_r+0x1a>
 800d43a:	2300      	movs	r3, #0
 800d43c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d440:	682f      	ldr	r7, [r5, #0]
 800d442:	602b      	str	r3, [r5, #0]
 800d444:	d032      	beq.n	800d4ac <__sflush_r+0x98>
 800d446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	075a      	lsls	r2, r3, #29
 800d44c:	d505      	bpl.n	800d45a <__sflush_r+0x46>
 800d44e:	6863      	ldr	r3, [r4, #4]
 800d450:	1ac0      	subs	r0, r0, r3
 800d452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d454:	b10b      	cbz	r3, 800d45a <__sflush_r+0x46>
 800d456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d458:	1ac0      	subs	r0, r0, r3
 800d45a:	2300      	movs	r3, #0
 800d45c:	4602      	mov	r2, r0
 800d45e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d460:	6a21      	ldr	r1, [r4, #32]
 800d462:	4628      	mov	r0, r5
 800d464:	47b0      	blx	r6
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	d106      	bne.n	800d47a <__sflush_r+0x66>
 800d46c:	6829      	ldr	r1, [r5, #0]
 800d46e:	291d      	cmp	r1, #29
 800d470:	d82c      	bhi.n	800d4cc <__sflush_r+0xb8>
 800d472:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <__sflush_r+0x108>)
 800d474:	40ca      	lsrs	r2, r1
 800d476:	07d6      	lsls	r6, r2, #31
 800d478:	d528      	bpl.n	800d4cc <__sflush_r+0xb8>
 800d47a:	2200      	movs	r2, #0
 800d47c:	6062      	str	r2, [r4, #4]
 800d47e:	04d9      	lsls	r1, r3, #19
 800d480:	6922      	ldr	r2, [r4, #16]
 800d482:	6022      	str	r2, [r4, #0]
 800d484:	d504      	bpl.n	800d490 <__sflush_r+0x7c>
 800d486:	1c42      	adds	r2, r0, #1
 800d488:	d101      	bne.n	800d48e <__sflush_r+0x7a>
 800d48a:	682b      	ldr	r3, [r5, #0]
 800d48c:	b903      	cbnz	r3, 800d490 <__sflush_r+0x7c>
 800d48e:	6560      	str	r0, [r4, #84]	; 0x54
 800d490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d492:	602f      	str	r7, [r5, #0]
 800d494:	2900      	cmp	r1, #0
 800d496:	d0ca      	beq.n	800d42e <__sflush_r+0x1a>
 800d498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d49c:	4299      	cmp	r1, r3
 800d49e:	d002      	beq.n	800d4a6 <__sflush_r+0x92>
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f7ff faa5 	bl	800c9f0 <_free_r>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d4aa:	e7c1      	b.n	800d430 <__sflush_r+0x1c>
 800d4ac:	6a21      	ldr	r1, [r4, #32]
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b0      	blx	r6
 800d4b4:	1c41      	adds	r1, r0, #1
 800d4b6:	d1c7      	bne.n	800d448 <__sflush_r+0x34>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0c4      	beq.n	800d448 <__sflush_r+0x34>
 800d4be:	2b1d      	cmp	r3, #29
 800d4c0:	d001      	beq.n	800d4c6 <__sflush_r+0xb2>
 800d4c2:	2b16      	cmp	r3, #22
 800d4c4:	d101      	bne.n	800d4ca <__sflush_r+0xb6>
 800d4c6:	602f      	str	r7, [r5, #0]
 800d4c8:	e7b1      	b.n	800d42e <__sflush_r+0x1a>
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4d0:	81a3      	strh	r3, [r4, #12]
 800d4d2:	e7ad      	b.n	800d430 <__sflush_r+0x1c>
 800d4d4:	690f      	ldr	r7, [r1, #16]
 800d4d6:	2f00      	cmp	r7, #0
 800d4d8:	d0a9      	beq.n	800d42e <__sflush_r+0x1a>
 800d4da:	0793      	lsls	r3, r2, #30
 800d4dc:	680e      	ldr	r6, [r1, #0]
 800d4de:	bf08      	it	eq
 800d4e0:	694b      	ldreq	r3, [r1, #20]
 800d4e2:	600f      	str	r7, [r1, #0]
 800d4e4:	bf18      	it	ne
 800d4e6:	2300      	movne	r3, #0
 800d4e8:	eba6 0807 	sub.w	r8, r6, r7
 800d4ec:	608b      	str	r3, [r1, #8]
 800d4ee:	f1b8 0f00 	cmp.w	r8, #0
 800d4f2:	dd9c      	ble.n	800d42e <__sflush_r+0x1a>
 800d4f4:	6a21      	ldr	r1, [r4, #32]
 800d4f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4f8:	4643      	mov	r3, r8
 800d4fa:	463a      	mov	r2, r7
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	47b0      	blx	r6
 800d500:	2800      	cmp	r0, #0
 800d502:	dc06      	bgt.n	800d512 <__sflush_r+0xfe>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	e78e      	b.n	800d430 <__sflush_r+0x1c>
 800d512:	4407      	add	r7, r0
 800d514:	eba8 0800 	sub.w	r8, r8, r0
 800d518:	e7e9      	b.n	800d4ee <__sflush_r+0xda>
 800d51a:	bf00      	nop
 800d51c:	20400001 	.word	0x20400001

0800d520 <_fflush_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	690b      	ldr	r3, [r1, #16]
 800d524:	4605      	mov	r5, r0
 800d526:	460c      	mov	r4, r1
 800d528:	b913      	cbnz	r3, 800d530 <_fflush_r+0x10>
 800d52a:	2500      	movs	r5, #0
 800d52c:	4628      	mov	r0, r5
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	b118      	cbz	r0, 800d53a <_fflush_r+0x1a>
 800d532:	6983      	ldr	r3, [r0, #24]
 800d534:	b90b      	cbnz	r3, 800d53a <_fflush_r+0x1a>
 800d536:	f000 f887 	bl	800d648 <__sinit>
 800d53a:	4b14      	ldr	r3, [pc, #80]	; (800d58c <_fflush_r+0x6c>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	d11b      	bne.n	800d578 <_fflush_r+0x58>
 800d540:	686c      	ldr	r4, [r5, #4]
 800d542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0ef      	beq.n	800d52a <_fflush_r+0xa>
 800d54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d54c:	07d0      	lsls	r0, r2, #31
 800d54e:	d404      	bmi.n	800d55a <_fflush_r+0x3a>
 800d550:	0599      	lsls	r1, r3, #22
 800d552:	d402      	bmi.n	800d55a <_fflush_r+0x3a>
 800d554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d556:	f000 f915 	bl	800d784 <__retarget_lock_acquire_recursive>
 800d55a:	4628      	mov	r0, r5
 800d55c:	4621      	mov	r1, r4
 800d55e:	f7ff ff59 	bl	800d414 <__sflush_r>
 800d562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d564:	07da      	lsls	r2, r3, #31
 800d566:	4605      	mov	r5, r0
 800d568:	d4e0      	bmi.n	800d52c <_fflush_r+0xc>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	059b      	lsls	r3, r3, #22
 800d56e:	d4dd      	bmi.n	800d52c <_fflush_r+0xc>
 800d570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d572:	f000 f908 	bl	800d786 <__retarget_lock_release_recursive>
 800d576:	e7d9      	b.n	800d52c <_fflush_r+0xc>
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <_fflush_r+0x70>)
 800d57a:	429c      	cmp	r4, r3
 800d57c:	d101      	bne.n	800d582 <_fflush_r+0x62>
 800d57e:	68ac      	ldr	r4, [r5, #8]
 800d580:	e7df      	b.n	800d542 <_fflush_r+0x22>
 800d582:	4b04      	ldr	r3, [pc, #16]	; (800d594 <_fflush_r+0x74>)
 800d584:	429c      	cmp	r4, r3
 800d586:	bf08      	it	eq
 800d588:	68ec      	ldreq	r4, [r5, #12]
 800d58a:	e7da      	b.n	800d542 <_fflush_r+0x22>
 800d58c:	0800e114 	.word	0x0800e114
 800d590:	0800e134 	.word	0x0800e134
 800d594:	0800e0f4 	.word	0x0800e0f4

0800d598 <std>:
 800d598:	2300      	movs	r3, #0
 800d59a:	b510      	push	{r4, lr}
 800d59c:	4604      	mov	r4, r0
 800d59e:	e9c0 3300 	strd	r3, r3, [r0]
 800d5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5a6:	6083      	str	r3, [r0, #8]
 800d5a8:	8181      	strh	r1, [r0, #12]
 800d5aa:	6643      	str	r3, [r0, #100]	; 0x64
 800d5ac:	81c2      	strh	r2, [r0, #14]
 800d5ae:	6183      	str	r3, [r0, #24]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	2208      	movs	r2, #8
 800d5b4:	305c      	adds	r0, #92	; 0x5c
 800d5b6:	f7fd fb69 	bl	800ac8c <memset>
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <std+0x38>)
 800d5bc:	6263      	str	r3, [r4, #36]	; 0x24
 800d5be:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <std+0x3c>)
 800d5c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5c2:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <std+0x40>)
 800d5c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5c6:	4b05      	ldr	r3, [pc, #20]	; (800d5dc <std+0x44>)
 800d5c8:	6224      	str	r4, [r4, #32]
 800d5ca:	6323      	str	r3, [r4, #48]	; 0x30
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	bf00      	nop
 800d5d0:	0800d8ed 	.word	0x0800d8ed
 800d5d4:	0800d90f 	.word	0x0800d90f
 800d5d8:	0800d947 	.word	0x0800d947
 800d5dc:	0800d96b 	.word	0x0800d96b

0800d5e0 <_cleanup_r>:
 800d5e0:	4901      	ldr	r1, [pc, #4]	; (800d5e8 <_cleanup_r+0x8>)
 800d5e2:	f000 b8af 	b.w	800d744 <_fwalk_reent>
 800d5e6:	bf00      	nop
 800d5e8:	0800d521 	.word	0x0800d521

0800d5ec <__sfmoreglue>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	2268      	movs	r2, #104	; 0x68
 800d5f0:	1e4d      	subs	r5, r1, #1
 800d5f2:	4355      	muls	r5, r2
 800d5f4:	460e      	mov	r6, r1
 800d5f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5fa:	f7ff fa65 	bl	800cac8 <_malloc_r>
 800d5fe:	4604      	mov	r4, r0
 800d600:	b140      	cbz	r0, 800d614 <__sfmoreglue+0x28>
 800d602:	2100      	movs	r1, #0
 800d604:	e9c0 1600 	strd	r1, r6, [r0]
 800d608:	300c      	adds	r0, #12
 800d60a:	60a0      	str	r0, [r4, #8]
 800d60c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d610:	f7fd fb3c 	bl	800ac8c <memset>
 800d614:	4620      	mov	r0, r4
 800d616:	bd70      	pop	{r4, r5, r6, pc}

0800d618 <__sfp_lock_acquire>:
 800d618:	4801      	ldr	r0, [pc, #4]	; (800d620 <__sfp_lock_acquire+0x8>)
 800d61a:	f000 b8b3 	b.w	800d784 <__retarget_lock_acquire_recursive>
 800d61e:	bf00      	nop
 800d620:	200012bd 	.word	0x200012bd

0800d624 <__sfp_lock_release>:
 800d624:	4801      	ldr	r0, [pc, #4]	; (800d62c <__sfp_lock_release+0x8>)
 800d626:	f000 b8ae 	b.w	800d786 <__retarget_lock_release_recursive>
 800d62a:	bf00      	nop
 800d62c:	200012bd 	.word	0x200012bd

0800d630 <__sinit_lock_acquire>:
 800d630:	4801      	ldr	r0, [pc, #4]	; (800d638 <__sinit_lock_acquire+0x8>)
 800d632:	f000 b8a7 	b.w	800d784 <__retarget_lock_acquire_recursive>
 800d636:	bf00      	nop
 800d638:	200012be 	.word	0x200012be

0800d63c <__sinit_lock_release>:
 800d63c:	4801      	ldr	r0, [pc, #4]	; (800d644 <__sinit_lock_release+0x8>)
 800d63e:	f000 b8a2 	b.w	800d786 <__retarget_lock_release_recursive>
 800d642:	bf00      	nop
 800d644:	200012be 	.word	0x200012be

0800d648 <__sinit>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	4604      	mov	r4, r0
 800d64c:	f7ff fff0 	bl	800d630 <__sinit_lock_acquire>
 800d650:	69a3      	ldr	r3, [r4, #24]
 800d652:	b11b      	cbz	r3, 800d65c <__sinit+0x14>
 800d654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d658:	f7ff bff0 	b.w	800d63c <__sinit_lock_release>
 800d65c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d660:	6523      	str	r3, [r4, #80]	; 0x50
 800d662:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <__sinit+0x68>)
 800d664:	4a13      	ldr	r2, [pc, #76]	; (800d6b4 <__sinit+0x6c>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	62a2      	str	r2, [r4, #40]	; 0x28
 800d66a:	42a3      	cmp	r3, r4
 800d66c:	bf04      	itt	eq
 800d66e:	2301      	moveq	r3, #1
 800d670:	61a3      	streq	r3, [r4, #24]
 800d672:	4620      	mov	r0, r4
 800d674:	f000 f820 	bl	800d6b8 <__sfp>
 800d678:	6060      	str	r0, [r4, #4]
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 f81c 	bl	800d6b8 <__sfp>
 800d680:	60a0      	str	r0, [r4, #8]
 800d682:	4620      	mov	r0, r4
 800d684:	f000 f818 	bl	800d6b8 <__sfp>
 800d688:	2200      	movs	r2, #0
 800d68a:	60e0      	str	r0, [r4, #12]
 800d68c:	2104      	movs	r1, #4
 800d68e:	6860      	ldr	r0, [r4, #4]
 800d690:	f7ff ff82 	bl	800d598 <std>
 800d694:	68a0      	ldr	r0, [r4, #8]
 800d696:	2201      	movs	r2, #1
 800d698:	2109      	movs	r1, #9
 800d69a:	f7ff ff7d 	bl	800d598 <std>
 800d69e:	68e0      	ldr	r0, [r4, #12]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	2112      	movs	r1, #18
 800d6a4:	f7ff ff78 	bl	800d598 <std>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	61a3      	str	r3, [r4, #24]
 800d6ac:	e7d2      	b.n	800d654 <__sinit+0xc>
 800d6ae:	bf00      	nop
 800d6b0:	0800dd7c 	.word	0x0800dd7c
 800d6b4:	0800d5e1 	.word	0x0800d5e1

0800d6b8 <__sfp>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	f7ff ffac 	bl	800d618 <__sfp_lock_acquire>
 800d6c0:	4b1e      	ldr	r3, [pc, #120]	; (800d73c <__sfp+0x84>)
 800d6c2:	681e      	ldr	r6, [r3, #0]
 800d6c4:	69b3      	ldr	r3, [r6, #24]
 800d6c6:	b913      	cbnz	r3, 800d6ce <__sfp+0x16>
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f7ff ffbd 	bl	800d648 <__sinit>
 800d6ce:	3648      	adds	r6, #72	; 0x48
 800d6d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	d503      	bpl.n	800d6e0 <__sfp+0x28>
 800d6d8:	6833      	ldr	r3, [r6, #0]
 800d6da:	b30b      	cbz	r3, 800d720 <__sfp+0x68>
 800d6dc:	6836      	ldr	r6, [r6, #0]
 800d6de:	e7f7      	b.n	800d6d0 <__sfp+0x18>
 800d6e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d6e4:	b9d5      	cbnz	r5, 800d71c <__sfp+0x64>
 800d6e6:	4b16      	ldr	r3, [pc, #88]	; (800d740 <__sfp+0x88>)
 800d6e8:	60e3      	str	r3, [r4, #12]
 800d6ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6ee:	6665      	str	r5, [r4, #100]	; 0x64
 800d6f0:	f000 f847 	bl	800d782 <__retarget_lock_init_recursive>
 800d6f4:	f7ff ff96 	bl	800d624 <__sfp_lock_release>
 800d6f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d700:	6025      	str	r5, [r4, #0]
 800d702:	61a5      	str	r5, [r4, #24]
 800d704:	2208      	movs	r2, #8
 800d706:	4629      	mov	r1, r5
 800d708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d70c:	f7fd fabe 	bl	800ac8c <memset>
 800d710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d718:	4620      	mov	r0, r4
 800d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d71c:	3468      	adds	r4, #104	; 0x68
 800d71e:	e7d9      	b.n	800d6d4 <__sfp+0x1c>
 800d720:	2104      	movs	r1, #4
 800d722:	4638      	mov	r0, r7
 800d724:	f7ff ff62 	bl	800d5ec <__sfmoreglue>
 800d728:	4604      	mov	r4, r0
 800d72a:	6030      	str	r0, [r6, #0]
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d1d5      	bne.n	800d6dc <__sfp+0x24>
 800d730:	f7ff ff78 	bl	800d624 <__sfp_lock_release>
 800d734:	230c      	movs	r3, #12
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	e7ee      	b.n	800d718 <__sfp+0x60>
 800d73a:	bf00      	nop
 800d73c:	0800dd7c 	.word	0x0800dd7c
 800d740:	ffff0001 	.word	0xffff0001

0800d744 <_fwalk_reent>:
 800d744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d748:	4606      	mov	r6, r0
 800d74a:	4688      	mov	r8, r1
 800d74c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d750:	2700      	movs	r7, #0
 800d752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d756:	f1b9 0901 	subs.w	r9, r9, #1
 800d75a:	d505      	bpl.n	800d768 <_fwalk_reent+0x24>
 800d75c:	6824      	ldr	r4, [r4, #0]
 800d75e:	2c00      	cmp	r4, #0
 800d760:	d1f7      	bne.n	800d752 <_fwalk_reent+0xe>
 800d762:	4638      	mov	r0, r7
 800d764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d768:	89ab      	ldrh	r3, [r5, #12]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d907      	bls.n	800d77e <_fwalk_reent+0x3a>
 800d76e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d772:	3301      	adds	r3, #1
 800d774:	d003      	beq.n	800d77e <_fwalk_reent+0x3a>
 800d776:	4629      	mov	r1, r5
 800d778:	4630      	mov	r0, r6
 800d77a:	47c0      	blx	r8
 800d77c:	4307      	orrs	r7, r0
 800d77e:	3568      	adds	r5, #104	; 0x68
 800d780:	e7e9      	b.n	800d756 <_fwalk_reent+0x12>

0800d782 <__retarget_lock_init_recursive>:
 800d782:	4770      	bx	lr

0800d784 <__retarget_lock_acquire_recursive>:
 800d784:	4770      	bx	lr

0800d786 <__retarget_lock_release_recursive>:
 800d786:	4770      	bx	lr

0800d788 <__swhatbuf_r>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	460e      	mov	r6, r1
 800d78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d790:	2900      	cmp	r1, #0
 800d792:	b096      	sub	sp, #88	; 0x58
 800d794:	4614      	mov	r4, r2
 800d796:	461d      	mov	r5, r3
 800d798:	da08      	bge.n	800d7ac <__swhatbuf_r+0x24>
 800d79a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	602a      	str	r2, [r5, #0]
 800d7a2:	061a      	lsls	r2, r3, #24
 800d7a4:	d410      	bmi.n	800d7c8 <__swhatbuf_r+0x40>
 800d7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7aa:	e00e      	b.n	800d7ca <__swhatbuf_r+0x42>
 800d7ac:	466a      	mov	r2, sp
 800d7ae:	f000 f903 	bl	800d9b8 <_fstat_r>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	dbf1      	blt.n	800d79a <__swhatbuf_r+0x12>
 800d7b6:	9a01      	ldr	r2, [sp, #4]
 800d7b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d7bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d7c0:	425a      	negs	r2, r3
 800d7c2:	415a      	adcs	r2, r3
 800d7c4:	602a      	str	r2, [r5, #0]
 800d7c6:	e7ee      	b.n	800d7a6 <__swhatbuf_r+0x1e>
 800d7c8:	2340      	movs	r3, #64	; 0x40
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	b016      	add	sp, #88	; 0x58
 800d7d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7d4 <__smakebuf_r>:
 800d7d4:	898b      	ldrh	r3, [r1, #12]
 800d7d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7d8:	079d      	lsls	r5, r3, #30
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460c      	mov	r4, r1
 800d7de:	d507      	bpl.n	800d7f0 <__smakebuf_r+0x1c>
 800d7e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	6123      	str	r3, [r4, #16]
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	6163      	str	r3, [r4, #20]
 800d7ec:	b002      	add	sp, #8
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	ab01      	add	r3, sp, #4
 800d7f2:	466a      	mov	r2, sp
 800d7f4:	f7ff ffc8 	bl	800d788 <__swhatbuf_r>
 800d7f8:	9900      	ldr	r1, [sp, #0]
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7ff f963 	bl	800cac8 <_malloc_r>
 800d802:	b948      	cbnz	r0, 800d818 <__smakebuf_r+0x44>
 800d804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d808:	059a      	lsls	r2, r3, #22
 800d80a:	d4ef      	bmi.n	800d7ec <__smakebuf_r+0x18>
 800d80c:	f023 0303 	bic.w	r3, r3, #3
 800d810:	f043 0302 	orr.w	r3, r3, #2
 800d814:	81a3      	strh	r3, [r4, #12]
 800d816:	e7e3      	b.n	800d7e0 <__smakebuf_r+0xc>
 800d818:	4b0d      	ldr	r3, [pc, #52]	; (800d850 <__smakebuf_r+0x7c>)
 800d81a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	6020      	str	r0, [r4, #0]
 800d820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d824:	81a3      	strh	r3, [r4, #12]
 800d826:	9b00      	ldr	r3, [sp, #0]
 800d828:	6163      	str	r3, [r4, #20]
 800d82a:	9b01      	ldr	r3, [sp, #4]
 800d82c:	6120      	str	r0, [r4, #16]
 800d82e:	b15b      	cbz	r3, 800d848 <__smakebuf_r+0x74>
 800d830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d834:	4630      	mov	r0, r6
 800d836:	f000 f8d1 	bl	800d9dc <_isatty_r>
 800d83a:	b128      	cbz	r0, 800d848 <__smakebuf_r+0x74>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	f043 0301 	orr.w	r3, r3, #1
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	89a0      	ldrh	r0, [r4, #12]
 800d84a:	4305      	orrs	r5, r0
 800d84c:	81a5      	strh	r5, [r4, #12]
 800d84e:	e7cd      	b.n	800d7ec <__smakebuf_r+0x18>
 800d850:	0800d5e1 	.word	0x0800d5e1

0800d854 <_malloc_usable_size_r>:
 800d854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d858:	1f18      	subs	r0, r3, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bfbc      	itt	lt
 800d85e:	580b      	ldrlt	r3, [r1, r0]
 800d860:	18c0      	addlt	r0, r0, r3
 800d862:	4770      	bx	lr

0800d864 <_raise_r>:
 800d864:	291f      	cmp	r1, #31
 800d866:	b538      	push	{r3, r4, r5, lr}
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	d904      	bls.n	800d878 <_raise_r+0x14>
 800d86e:	2316      	movs	r3, #22
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d87a:	b112      	cbz	r2, 800d882 <_raise_r+0x1e>
 800d87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d880:	b94b      	cbnz	r3, 800d896 <_raise_r+0x32>
 800d882:	4620      	mov	r0, r4
 800d884:	f000 f830 	bl	800d8e8 <_getpid_r>
 800d888:	462a      	mov	r2, r5
 800d88a:	4601      	mov	r1, r0
 800d88c:	4620      	mov	r0, r4
 800d88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d892:	f000 b817 	b.w	800d8c4 <_kill_r>
 800d896:	2b01      	cmp	r3, #1
 800d898:	d00a      	beq.n	800d8b0 <_raise_r+0x4c>
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	d103      	bne.n	800d8a6 <_raise_r+0x42>
 800d89e:	2316      	movs	r3, #22
 800d8a0:	6003      	str	r3, [r0, #0]
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	e7e7      	b.n	800d876 <_raise_r+0x12>
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	4798      	blx	r3
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	e7e0      	b.n	800d876 <_raise_r+0x12>

0800d8b4 <raise>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <raise+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bfd3 	b.w	800d864 <_raise_r>
 800d8be:	bf00      	nop
 800d8c0:	20000010 	.word	0x20000010

0800d8c4 <_kill_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4d07      	ldr	r5, [pc, #28]	; (800d8e4 <_kill_r+0x20>)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f7f7 f82d 	bl	8004930 <_kill>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	d102      	bne.n	800d8e0 <_kill_r+0x1c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	b103      	cbz	r3, 800d8e0 <_kill_r+0x1c>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200012b8 	.word	0x200012b8

0800d8e8 <_getpid_r>:
 800d8e8:	f7f7 b81a 	b.w	8004920 <_getpid>

0800d8ec <__sread>:
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f4:	f000 f894 	bl	800da20 <_read_r>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	bfab      	itete	ge
 800d8fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d900:	181b      	addge	r3, r3, r0
 800d902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d906:	bfac      	ite	ge
 800d908:	6563      	strge	r3, [r4, #84]	; 0x54
 800d90a:	81a3      	strhlt	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__swrite>:
 800d90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d912:	461f      	mov	r7, r3
 800d914:	898b      	ldrh	r3, [r1, #12]
 800d916:	05db      	lsls	r3, r3, #23
 800d918:	4605      	mov	r5, r0
 800d91a:	460c      	mov	r4, r1
 800d91c:	4616      	mov	r6, r2
 800d91e:	d505      	bpl.n	800d92c <__swrite+0x1e>
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	2302      	movs	r3, #2
 800d926:	2200      	movs	r2, #0
 800d928:	f000 f868 	bl	800d9fc <_lseek_r>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	4632      	mov	r2, r6
 800d93a:	463b      	mov	r3, r7
 800d93c:	4628      	mov	r0, r5
 800d93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d942:	f000 b817 	b.w	800d974 <_write_r>

0800d946 <__sseek>:
 800d946:	b510      	push	{r4, lr}
 800d948:	460c      	mov	r4, r1
 800d94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94e:	f000 f855 	bl	800d9fc <_lseek_r>
 800d952:	1c43      	adds	r3, r0, #1
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	bf15      	itete	ne
 800d958:	6560      	strne	r0, [r4, #84]	; 0x54
 800d95a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d95e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d962:	81a3      	strheq	r3, [r4, #12]
 800d964:	bf18      	it	ne
 800d966:	81a3      	strhne	r3, [r4, #12]
 800d968:	bd10      	pop	{r4, pc}

0800d96a <__sclose>:
 800d96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96e:	f000 b813 	b.w	800d998 <_close_r>
	...

0800d974 <_write_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d07      	ldr	r5, [pc, #28]	; (800d994 <_write_r+0x20>)
 800d978:	4604      	mov	r4, r0
 800d97a:	4608      	mov	r0, r1
 800d97c:	4611      	mov	r1, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	602a      	str	r2, [r5, #0]
 800d982:	461a      	mov	r2, r3
 800d984:	f7f7 f80b 	bl	800499e <_write>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_write_r+0x1e>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_write_r+0x1e>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	200012b8 	.word	0x200012b8

0800d998 <_close_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d06      	ldr	r5, [pc, #24]	; (800d9b4 <_close_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f7 f817 	bl	80049d6 <_close>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_close_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_close_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	200012b8 	.word	0x200012b8

0800d9b8 <_fstat_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_fstat_r+0x20>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	f7f7 f812 	bl	80049ee <_fstat>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d102      	bne.n	800d9d4 <_fstat_r+0x1c>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b103      	cbz	r3, 800d9d4 <_fstat_r+0x1c>
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	bf00      	nop
 800d9d8:	200012b8 	.word	0x200012b8

0800d9dc <_isatty_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d06      	ldr	r5, [pc, #24]	; (800d9f8 <_isatty_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	f7f7 f811 	bl	8004a0e <_isatty>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_isatty_r+0x1a>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_isatty_r+0x1a>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	200012b8 	.word	0x200012b8

0800d9fc <_lseek_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4d07      	ldr	r5, [pc, #28]	; (800da1c <_lseek_r+0x20>)
 800da00:	4604      	mov	r4, r0
 800da02:	4608      	mov	r0, r1
 800da04:	4611      	mov	r1, r2
 800da06:	2200      	movs	r2, #0
 800da08:	602a      	str	r2, [r5, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	f7f7 f80a 	bl	8004a24 <_lseek>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_lseek_r+0x1e>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_lseek_r+0x1e>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	200012b8 	.word	0x200012b8

0800da20 <_read_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_read_r+0x20>)
 800da24:	4604      	mov	r4, r0
 800da26:	4608      	mov	r0, r1
 800da28:	4611      	mov	r1, r2
 800da2a:	2200      	movs	r2, #0
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	f7f6 ff98 	bl	8004964 <_read>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <_read_r+0x1e>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	b103      	cbz	r3, 800da3e <_read_r+0x1e>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	200012b8 	.word	0x200012b8
 800da44:	00000000 	.word	0x00000000

0800da48 <floor>:
 800da48:	ec51 0b10 	vmov	r0, r1, d0
 800da4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800da54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800da58:	2e13      	cmp	r6, #19
 800da5a:	ee10 5a10 	vmov	r5, s0
 800da5e:	ee10 8a10 	vmov	r8, s0
 800da62:	460c      	mov	r4, r1
 800da64:	dc32      	bgt.n	800dacc <floor+0x84>
 800da66:	2e00      	cmp	r6, #0
 800da68:	da14      	bge.n	800da94 <floor+0x4c>
 800da6a:	a333      	add	r3, pc, #204	; (adr r3, 800db38 <floor+0xf0>)
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fc14 	bl	800029c <__adddf3>
 800da74:	2200      	movs	r2, #0
 800da76:	2300      	movs	r3, #0
 800da78:	f7f3 f856 	bl	8000b28 <__aeabi_dcmpgt>
 800da7c:	b138      	cbz	r0, 800da8e <floor+0x46>
 800da7e:	2c00      	cmp	r4, #0
 800da80:	da57      	bge.n	800db32 <floor+0xea>
 800da82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800da86:	431d      	orrs	r5, r3
 800da88:	d001      	beq.n	800da8e <floor+0x46>
 800da8a:	4c2d      	ldr	r4, [pc, #180]	; (800db40 <floor+0xf8>)
 800da8c:	2500      	movs	r5, #0
 800da8e:	4621      	mov	r1, r4
 800da90:	4628      	mov	r0, r5
 800da92:	e025      	b.n	800dae0 <floor+0x98>
 800da94:	4f2b      	ldr	r7, [pc, #172]	; (800db44 <floor+0xfc>)
 800da96:	4137      	asrs	r7, r6
 800da98:	ea01 0307 	and.w	r3, r1, r7
 800da9c:	4303      	orrs	r3, r0
 800da9e:	d01f      	beq.n	800dae0 <floor+0x98>
 800daa0:	a325      	add	r3, pc, #148	; (adr r3, 800db38 <floor+0xf0>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fbf9 	bl	800029c <__adddf3>
 800daaa:	2200      	movs	r2, #0
 800daac:	2300      	movs	r3, #0
 800daae:	f7f3 f83b 	bl	8000b28 <__aeabi_dcmpgt>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0eb      	beq.n	800da8e <floor+0x46>
 800dab6:	2c00      	cmp	r4, #0
 800dab8:	bfbe      	ittt	lt
 800daba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dabe:	fa43 f606 	asrlt.w	r6, r3, r6
 800dac2:	19a4      	addlt	r4, r4, r6
 800dac4:	ea24 0407 	bic.w	r4, r4, r7
 800dac8:	2500      	movs	r5, #0
 800daca:	e7e0      	b.n	800da8e <floor+0x46>
 800dacc:	2e33      	cmp	r6, #51	; 0x33
 800dace:	dd0b      	ble.n	800dae8 <floor+0xa0>
 800dad0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dad4:	d104      	bne.n	800dae0 <floor+0x98>
 800dad6:	ee10 2a10 	vmov	r2, s0
 800dada:	460b      	mov	r3, r1
 800dadc:	f7f2 fbde 	bl	800029c <__adddf3>
 800dae0:	ec41 0b10 	vmov	d0, r0, r1
 800dae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800daec:	f04f 33ff 	mov.w	r3, #4294967295
 800daf0:	fa23 f707 	lsr.w	r7, r3, r7
 800daf4:	4207      	tst	r7, r0
 800daf6:	d0f3      	beq.n	800dae0 <floor+0x98>
 800daf8:	a30f      	add	r3, pc, #60	; (adr r3, 800db38 <floor+0xf0>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	f7f2 fbcd 	bl	800029c <__adddf3>
 800db02:	2200      	movs	r2, #0
 800db04:	2300      	movs	r3, #0
 800db06:	f7f3 f80f 	bl	8000b28 <__aeabi_dcmpgt>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d0bf      	beq.n	800da8e <floor+0x46>
 800db0e:	2c00      	cmp	r4, #0
 800db10:	da02      	bge.n	800db18 <floor+0xd0>
 800db12:	2e14      	cmp	r6, #20
 800db14:	d103      	bne.n	800db1e <floor+0xd6>
 800db16:	3401      	adds	r4, #1
 800db18:	ea25 0507 	bic.w	r5, r5, r7
 800db1c:	e7b7      	b.n	800da8e <floor+0x46>
 800db1e:	2301      	movs	r3, #1
 800db20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db24:	fa03 f606 	lsl.w	r6, r3, r6
 800db28:	4435      	add	r5, r6
 800db2a:	4545      	cmp	r5, r8
 800db2c:	bf38      	it	cc
 800db2e:	18e4      	addcc	r4, r4, r3
 800db30:	e7f2      	b.n	800db18 <floor+0xd0>
 800db32:	2500      	movs	r5, #0
 800db34:	462c      	mov	r4, r5
 800db36:	e7aa      	b.n	800da8e <floor+0x46>
 800db38:	8800759c 	.word	0x8800759c
 800db3c:	7e37e43c 	.word	0x7e37e43c
 800db40:	bff00000 	.word	0xbff00000
 800db44:	000fffff 	.word	0x000fffff

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
